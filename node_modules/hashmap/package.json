{
  "_from": "hashmap",
  "_id": "hashmap@2.3.0",
  "_inBundle": false,
  "_integrity": "sha1-sT+2XafIul49uPwbjFuh0ASdryI=",
  "_location": "/hashmap",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "hashmap",
    "fetchSpec": "latest",
    "name": "hashmap",
    "raw": "hashmap",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/hashmap/-/hashmap-2.3.0.tgz",
  "_shasum": "b13fb65da7c8ba5e3db8fc1b8c5ba1d0049daf22",
  "_spec": "hashmap",
  "_where": "G:\\Jubi-Ai-Product\\Prudent\\prudent-apiserver",
  "author": {
    "name": "Ariel Flesler",
    "url": "https://github.com/flesler"
  },
  "bugs": {
    "url": "https://github.com/flesler/hashmap/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "HashMap Class for JavaScript",
  "devDependencies": {
    "chai": "4.1.1",
    "husky": "0.14.3",
    "jshint": "2.9.5",
    "mocha": "3.5.0"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/flesler/hashmap",
  "keywords": [
    "array",
    "associative",
    "browser",
    "hashmap",
    "javascript",
    "map",
    "node",
    "nodejs",
    "object"
  ],
  "license": "MIT",
  "main": "./hashmap.js",
  "name": "hashmap",
  "optionalDependencies": {},
  "readme": "# HashMap Class for JavaScript\n\n## Installation\n\n[![NPM](https://nodei.co/npm/hashmap.png?compact=true)](https://npmjs.org/package/hashmap)\n\nUsing [npm](https://npmjs.org/package/hashmap):\n\n    $ npm install hashmap\n\nUsing bower:\n\n    $ bower install hashmap\n\nYou can download the last stable version from the [releases page](https://github.com/flesler/hashmap/releases).\n\nIf you like risk, you can download the [latest master version](https://raw.github.com/flesler/hashmap/master/hashmap.js), it's usually stable.\n\nTo run the tests:\n\n    $ npm test\n\n## Description\n\nThis project provides a `HashMap` class that works both on __Node.js__ and the __browser__.\nHashMap instances __store key/value pairs__ allowing __keys of any type__.\n\nUnlike regular objects, __keys will not be stringified__. For example numbers and strings won't be mixed, you can pass `Date`'s, `RegExp`'s, DOM Elements, anything! (even `null` and `undefined`)\n\n## HashMap constructor overloads\n- `new HashMap()` creates an empty hashmap\n- `new HashMap(map:HashMap)` creates a hashmap with the key-value pairs of `map`\n- `new HashMap(arr:Array)` creates a hashmap from the 2D key-value array `arr`, e.g. `[['key1','val1'], ['key2','val2']]`\n- `new HashMap(key:*, value:*, key2:*, value2:*, ...)` creates a hashmap with several key-value pairs\n\n## HashMap methods\n\n- `get(key:*) : *` returns the value stored for that key.\n- `set(key:*, value:*) : HashMap` stores a key-value pair\n- `multi(key:*, value:*, key2:*, value2:*, ...) : HashMap` stores several key-value pairs\n- `copy(other:HashMap) : HashMap` copies all key-value pairs from other to this instance\n- `has(key:*) : Boolean` returns whether a key is set on the hashmap\n- `search(value:*) : *` returns key under which given value is stored (`null` if not found)\n- `delete(key:*) : HashMap` deletes a key-value pair by key\n- `remove(key:*) : HashMap` Alias for `delete(key:*)` *(deprecated)*\n- `type(key:*) : String` returns the data type of the provided key (used internally)\n- `keys() : Array<*>` returns an array with all the registered keys\n- `values() : Array<*>` returns an array with all the values\n- `entries() : Array<[*,*]>` returns an array with [key,value] pairs\n- `size : Number` the amount of key-value pairs\n- `count() : Number` returns the amount of key-value pairs *(deprecated)*\n- `clear() : HashMap` deletes all the key-value pairs on the hashmap\n- `clone() : HashMap` creates a new hashmap with all the key-value pairs of the original\n- `hash(key:*) : String` returns the stringified version of a key (used internally)\n- `forEach(function(value, key)) : HashMap` iterates the pairs and calls the function for each one\n\n### Method chaining\n\nAll methods that don't return something, will return the HashMap instance to enable chaining.\n\n## Examples\n\nAssume this for all examples below\n\n```js\nvar map = new HashMap();\n```\n\nIf you're using this within Node, you first need to import the class\n\n```js\nvar HashMap = require('hashmap');\n```\n\n### Basic use case\n\n```js\nmap.set(\"some_key\", \"some value\");\nmap.get(\"some_key\"); // --> \"some value\"\n```\n\n### Map size / number of elements\n\n```js\nvar map = new HashMap();\nmap.set(\"key1\", \"val1\");\nmap.set(\"key2\", \"val2\");\nmap.size; // -> 2\n```\n\n### Deleting key-value pairs\n\n```js\nmap.set(\"some_key\", \"some value\");\nmap.delete(\"some_key\");\nmap.get(\"some_key\"); // --> undefined\n```\n\n### No stringification\n\n```js\nmap.set(\"1\", \"string one\");\nmap.set(1, \"number one\");\nmap.get(\"1\"); // --> \"string one\"\n```\n\nA regular `Object` used as a map would yield `\"number one\"`\n\n### Objects as keys\n\n```js\nvar key = {};\nvar key2 = {};\nmap.set(key, 123);\nmap.set(key2, 321);\nmap.get(key); // --> 123\n```\nA regular `Object` used as a map would yield `321`\n\n### Iterating\n\n```js\nmap.set(1, \"test 1\");\nmap.set(2, \"test 2\");\nmap.set(3, \"test 3\");\n\nmap.forEach(function(value, key) {\n    console.log(key + \" : \" + value);\n});\n```\n\n### Method chaining\n\n```js\nmap\n  .set(1, \"test 1\")\n  .set(2, \"test 2\")\n  .set(3, \"test 3\")\n  .forEach(function(value, key) {\n      console.log(key + \" : \" + value);\n  });\n```\n\n## LICENSE\n\nThe MIT License (MIT)\n\nCopyright (c) 2012 Ariel Flesler\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF\n\n## To-Do\n\n* (?) Allow extending the hashing function in a AOP way or by passing a service\n* Make tests work on the browser\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/flesler/hashmap.git"
  },
  "scripts": {
    "precommit": "jshint hashmap.js",
    "prepush": "npm run test",
    "test": "mocha test/ --reporter dot"
  },
  "version": "2.3.0"
}
