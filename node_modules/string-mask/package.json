{
  "_from": "string-mask",
  "_id": "string-mask@0.3.0",
  "_inBundle": false,
  "_integrity": "sha1-nnJEuHuy9vlkfirJj5b6GlfCEZg=",
  "_location": "/string-mask",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "string-mask",
    "fetchSpec": "latest",
    "name": "string-mask",
    "raw": "string-mask",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/string-mask/-/string-mask-0.3.0.tgz",
  "_shasum": "9e7244b87bb2f6f9647e2ac98f96fa1a57c21198",
  "_spec": "string-mask",
  "_where": "E:\\Web\\Prudent\\prudent-apiserver",
  "author": {
    "email": "darc.tec@gmail.com",
    "name": "Daniel Campos"
  },
  "bugs": {
    "url": "https://github.com/the-darc/string-mask/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A string formatter and validator based on masks",
  "devDependencies": {
    "gulp": "^3.7.0",
    "gulp-coveralls": "^0.1.4",
    "gulp-istanbul": "^0.9.0",
    "gulp-istanbul-enforcer": "^1.0.3",
    "gulp-jscs": "^3.0.2",
    "gulp-jshint": "^2.0.0",
    "gulp-load-plugins": "^0.10.0",
    "gulp-mocha": "^2.0.1",
    "jshint-stylish": "^0.2.0",
    "should": "^4.0.1"
  },
  "homepage": "https://github.com/the-darc/string-mask#readme",
  "id": "/string-mask",
  "keywords": [
    "formatter",
    "mask",
    "string",
    "validation",
    "validator"
  ],
  "license": "MIT",
  "main": "src/string-mask.js",
  "name": "string-mask",
  "optionalDependencies": {},
  "readme": "#string-mask\n[![npm version](https://badge.fury.io/js/string-mask.svg)](http://badge.fury.io/js/string-mask)\n[![Bower version](https://badge.fury.io/bo/string-mask.svg)](http://badge.fury.io/bo/string-mask)\n[![Build Status](https://travis-ci.org/the-darc/string-mask.svg?branch=master)](https://travis-ci.org/the-darc/string-mask)\n[![Coverage Status](https://coveralls.io/repos/the-darc/string-mask/badge.svg)](https://coveralls.io/r/the-darc/string-mask)\n\nA string formatter and validator based on masks.\n\n## INSTALLATION\n\n**With npm:**\n\n```javascript\nnpm install --save string-mask\n```\n\n**With bower:**\n\n```javascript\nbower install --save string-mask\n```\n## SPECIAL MASK CHARACTERS\n\nCharacter | Description\n--- | ---\n`0` | Any numbers\n`9` | Any numbers (Optional)\n`#` | Any numbers (recursive)\n`A` | Any alphanumeric character\n`a` | Any alphanumeric character (Optional) __Not implemented yet__\n`S` | Any letter\n`U` | Any letter (All lower case character will be mapped to uppercase)\n`L` | Any letter (All upper case character will be mapped to lowercase)\n`$` | Escape character, used to escape any of the special formatting characters.\n\n### Special characters types\n\n - **Optional characters:** Used to parse characters that cold exist in the source string or not. See [Date and time](#date-and-time).\n\n - **Recursive characters:** Used to parse patterns that repeat in the end or in the start of the source string. See [Two decimal number with thousands separators](#two-decimal-number-with-thousands-separators)\n\n> _Note: Any character of the mask positioned after a recursive character will be handled as a non special character._\n\n## USAGE\n\n **Use it creating an mask instance with the StringMask contructor:**\n\n```javascript\n/**\n * - optionsObject parameter is optional in the constructor\n * - apply will return the a masked string value\n * - validate will return `true` if the string matchs the mask\n */\nvar mask = new StringMask('some mask', optionsObject); //optionsObject is optional\nvar maskedValue = mask.apply('some value string');\nvar isValid = mask.validate('some value string to validate');\n```\n\n**Or by the static interface:**\n\n```javascript\n/**\n * - optionsObject parameter is optional in all methods\n * - apply will return the a masked string value\n * - validate will return `true` if the string matchs the mask\n * - process will return a object: {result: <maskedValue>, valid: <isValid>}\n */\nvar maskedValue = StringMask.apply('some value string', 'some mask', optionsObject); \nvar isValid = StringMask.validate('some value string', 'some mask', optionsObject);\nvar result = StringMask.process('some value string', 'some mask', optionsObject);\n```\n\n\n### Some masks examples\n\n#### Number\n\n```javascript\n\tvar formatter = new StringMask('#0');\n\tvar result = formatter.apply('123'); // 123\n```\n\n#### Two decimal number with thousands separators\n\n```javascript\n\tvar formatter = new StringMask('#.##0,00', {reverse: true});\n\tvar result = formatter.apply('100123456'); // 1.001.234,56\n\tresult = formatter.apply('6'); // 0,06\n```\n\n#### Phone number\n\n```javascript\n\tvar formatter = new StringMask('+00 (00) 0000-0000');\n\tvar result = formatter.apply('553122222222'); // +55 (31) 2222-2222\n```\n\n#### Percentage\n\n```javascript\n\tvar formatter = new StringMask('#0,00%');\n\tvar result = formatter.apply('001'); // 0,01%\n```\n\n#### Brazilian CPF number\n\n```javascript\n\tvar formatter = new StringMask('000.000.000-00');\n\tvar result = formatter.apply('12965815620'); // 129.658.156-20\n```\n\n#### Date and time\n\n```javascript\n\tvar formatter = new StringMask('90/90/9900');\n\tvar result = formatter.apply('1187'); // 1/1/87\n```\n\n#### Convert Case\n\n```javascript\n\tvar formatter = new StringMask('UUUUUUUUUUUUU');\n\tvar result = formatter.apply('To Upper Case'); // TO UPPER CASE\n```\n\n```javascript\n\tvar formatter = new StringMask('LLLLLLLLLLLLL');\n\tvar result = formatter.apply('To Lower Case'); // to lower case\n```\n\n#### International Bank Number\n\n```javascript\n\tvar formatter = new StringMask('UUAA AAAA AAAA AAAA AAAA AAAA AAA');\n\tvar result = formatter.apply('FR761111900069410000AA33222');\n\t// result: FR76 1111 BBBB 6941 0000 AA33 222\n```\n\n## CONTRIBUTING\n\nWe'd love for you to contribute to our source code! We just ask to: \n\n - Write tests for the new feature or bug fix that you are solving\n - Ensure all tests pass before send the pull-request (Use: `$ gulp pre-push`)\n - Use commit messages following the commit conventions of [angular.js Git Commit Guidelines](https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#commit)\n - Pull requests will not be merged if:\n   - has not unit tests\n   - reduce the code coverage\n   - not passing in the `$gulp pre-push` task\n\n## LICENSE\n\nCopyright (c) 2016 Daniel Campos\n\nLicensed under the MIT license.\n  \n  \n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/the-darc/string-mask.git"
  },
  "scripts": {
    "release": "conventional-changelog -p angular -i CHANGELOG.md -s",
    "test": "gulp test-coverage"
  },
  "version": "0.3.0"
}
