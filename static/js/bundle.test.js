(function () {
    function r(e, n, t) {
        function o(i, f) {
            if (!n[i]) {
                if (!e[i]) {
                    var c = "function" == typeof require && require;if (!f && c) return c(i, !0);if (u) return u(i, !0);var a = new Error("Cannot find module '" + i + "'");throw a.code = "MODULE_NOT_FOUND", a;
                }var p = n[i] = { exports: {} };e[i][0].call(p.exports, function (r) {
                    var n = e[i][1][r];return o(n || r);
                }, p, p.exports, r, e, n, t);
            }return n[i].exports;
        }for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);return o;
    }return r;
})()({ 1: [function (require, module, exports) {
        // shim for using process in browser
        var process = module.exports = {};

        // cached from whatever global is present so that test runners that stub it
        // don't break things.  But we need to wrap it in a try catch in case it is
        // wrapped in strict mode code which doesn't define any globals.  It's inside a
        // function because try/catches deoptimize in certain engines.

        var cachedSetTimeout;
        var cachedClearTimeout;

        function defaultSetTimout() {
            throw new Error('setTimeout has not been defined');
        }
        function defaultClearTimeout() {
            throw new Error('clearTimeout has not been defined');
        }
        (function () {
            try {
                if (typeof setTimeout === 'function') {
                    cachedSetTimeout = setTimeout;
                } else {
                    cachedSetTimeout = defaultSetTimout;
                }
            } catch (e) {
                cachedSetTimeout = defaultSetTimout;
            }
            try {
                if (typeof clearTimeout === 'function') {
                    cachedClearTimeout = clearTimeout;
                } else {
                    cachedClearTimeout = defaultClearTimeout;
                }
            } catch (e) {
                cachedClearTimeout = defaultClearTimeout;
            }
        })();
        function runTimeout(fun) {
            if (cachedSetTimeout === setTimeout) {
                //normal enviroments in sane situations
                return setTimeout(fun, 0);
            }
            // if setTimeout wasn't available but was latter defined
            if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                cachedSetTimeout = setTimeout;
                return setTimeout(fun, 0);
            }
            try {
                // when when somebody has screwed with setTimeout but no I.E. maddness
                return cachedSetTimeout(fun, 0);
            } catch (e) {
                try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                    return cachedSetTimeout.call(null, fun, 0);
                } catch (e) {
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                    return cachedSetTimeout.call(this, fun, 0);
                }
            }
        }
        function runClearTimeout(marker) {
            if (cachedClearTimeout === clearTimeout) {
                //normal enviroments in sane situations
                return clearTimeout(marker);
            }
            // if clearTimeout wasn't available but was latter defined
            if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                cachedClearTimeout = clearTimeout;
                return clearTimeout(marker);
            }
            try {
                // when when somebody has screwed with setTimeout but no I.E. maddness
                return cachedClearTimeout(marker);
            } catch (e) {
                try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                    return cachedClearTimeout.call(null, marker);
                } catch (e) {
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                    // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                    return cachedClearTimeout.call(this, marker);
                }
            }
        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;

        function cleanUpNextTick() {
            if (!draining || !currentQueue) {
                return;
            }
            draining = false;
            if (currentQueue.length) {
                queue = currentQueue.concat(queue);
            } else {
                queueIndex = -1;
            }
            if (queue.length) {
                drainQueue();
            }
        }

        function drainQueue() {
            if (draining) {
                return;
            }
            var timeout = runTimeout(cleanUpNextTick);
            draining = true;

            var len = queue.length;
            while (len) {
                currentQueue = queue;
                queue = [];
                while (++queueIndex < len) {
                    if (currentQueue) {
                        currentQueue[queueIndex].run();
                    }
                }
                queueIndex = -1;
                len = queue.length;
            }
            currentQueue = null;
            draining = false;
            runClearTimeout(timeout);
        }

        process.nextTick = function (fun) {
            var args = new Array(arguments.length - 1);
            if (arguments.length > 1) {
                for (var i = 1; i < arguments.length; i++) {
                    args[i - 1] = arguments[i];
                }
            }
            queue.push(new Item(fun, args));
            if (queue.length === 1 && !draining) {
                runTimeout(drainQueue);
            }
        };

        // v8 likes predictible objects
        function Item(fun, array) {
            this.fun = fun;
            this.array = array;
        }
        Item.prototype.run = function () {
            this.fun.apply(null, this.array);
        };
        process.title = 'browser';
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = ''; // empty string to avoid regexp issues
        process.versions = {};

        function noop() {}

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;

        process.listeners = function (name) {
            return [];
        };

        process.binding = function (name) {
            throw new Error('process.binding is not supported');
        };

        process.cwd = function () {
            return '/';
        };
        process.chdir = function (dir) {
            throw new Error('process.chdir is not supported');
        };
        process.umask = function () {
            return 0;
        };
    }, {}], 2: [function (require, module, exports) {
        (function () {
            //require
            // let BayesClassifier = require('bayes-classifier')
            let bm25 = require('wink-bm25-text-search');
            let nlp = require('wink-nlp-utils');
            let tokenizer = require('string-tokenizer');
            let SentenceTokenizer = require('sentence-tokenizer');
            let stringSimilarity = require('string-similarity');
            let sentTokenizer = new SentenceTokenizer('webBot');
            let chatArray = [];
            let online = true;
            let tags = {};
            let currentButtonContext = {};
            let deviceInfo = {
                display: {
                    width: window.screen.width,
                    height: window.screen.height,
                    availWidth: window.screen.availWidth,
                    availHeight: window.screen.availHeight,
                    colorDepth: window.screen.colorDepth,
                    pixelDepth: window.screen.pixelDepth
                },
                inputType: "text",
                // location:{},
                connectionType: {},
                userAgent: navigator.userAgent,
                url: window.location.href
            };
            function utmExtractor(sender) {
                if (sender && sender.includes("-") && !tags.utmExtraction) {
                    let keyValues = sender.split("-");
                    keyValues.map(element => {
                        if (element && element.includes(".") && element.split(".").length == 2) {
                            tags[element.split(".")[0]] = element.split(".")[1];
                        }
                        return "invalid";
                    });
                    tags.utmExtraction = true;
                }
            }
            // if ('geolocation' in navigator) {
            //     navigator.geolocation.getCurrentPosition(function (location) {
            //         appendLocation(location, 'fetched');
            //     });
            //     navigator.geolocation.watchPosition(appendLocation);
            //     function appendLocation(location, verb) {
            //         // console.log("Location Fetched")
            //         deviceInfo.location=location
            //         deviceInfo.location.verbResponse = verb || 'updated';
            //     }
            // } 

            function getNavConnection() {
                return navigator.connection || navigator.mozConnection || navigator.webkitConnection || navigator.msConnection;
            }
            let info = getNavConnection();
            if (info) {
                info.addEventListener('change', updateNetworkInfo);
                updateNetworkInfo(info);
            }

            function updateNetworkInfo(info) {
                deviceInfo.connectionType = {
                    type: info.type,
                    effectiveType: info.effectiveType,
                    downlinkMax: info.downlinkMax
                };
            }

            let Crypt = function (passphrase) {
                let pass = passphrase;
                let CryptoJSAesJson = {
                    parse: function (jsonStr) {
                        let j = JSON.parse(jsonStr);
                        let cipherParams = CryptoJS.lib.CipherParams.create({ ciphertext: CryptoJS.enc.Base64.parse(j.ct) });
                        if (j.iv) cipherParams.iv = CryptoJS.enc.Hex.parse(j.iv);
                        if (j.s) cipherParams.salt = CryptoJS.enc.Hex.parse(j.s);
                        return cipherParams;
                    },
                    stringify: function (cipherParams) {
                        let j = { ct: cipherParams.ciphertext.toString(CryptoJS.enc.Base64) };
                        if (cipherParams.iv) j.iv = cipherParams.iv.toString();
                        if (cipherParams.salt) j.s = cipherParams.salt.toString();
                        return JSON.stringify(j);
                    }
                };

                return {
                    decrypt: function (data) {
                        return JSON.parse(CryptoJS.AES.decrypt(data, pass, { format: CryptoJSAesJson }).toString(CryptoJS.enc.Utf8));
                    },
                    encrypt: function (data) {
                        return CryptoJS.AES.encrypt(JSON.stringify(data), pass, { format: CryptoJSAesJson }).toString();
                    }
                };
            };
            //------start------
    //------CODE------
    let passphrase = '05229b55-9289-39c3-a602-832286d99db2';
    let passphraseTransit = 'dsajghdksa7fg8ow7eg32o874gf873gf8v7w8cyv387egf8ygsygyugjhgfdkuyuyuktfkuygwuyyugsdYGUYGgyjgblgUGIYGIGYE';
    let intents={"ct":"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","iv":"9f4c30d270d13f7df38c9b858ab1e4ba","s":"90759446b84b5b0c"};
    let entities={"ct":"","iv":"acc66abf9678ca863ddf6445c8bd3f01","s":"4b9377c2c2375a56"};
    let flows={"ct":"","iv":"1fb49659ec456d516a2177c7069a9c0a","s":"5bb91df0be4c8b29"};

    let checkUrl='https://parramato.com/check';
    let modal=window.jubiModal;
    window.jubiModal=null;

    let backendUrl='https://parramato.com'
    let backendPath='/socket'
    
    let middlewareUrl = 'wss://development.jubi.ai/'
    let middlewarePath = '/prudent-uat/socket'
    let middlewareWebsocket = true
    let middlewareSecurity = true

    let uploadUrl = 'https://parramato.com'
    let uploadPath = '/upload/socket'

    let humanUrl = 'https://parramato.com'
    let humanPath = '/human/socket'

    let voiceUrl = 'https://parramato.com'
    let voicePath = '/voice/socket'

    let directMultiplier=300
    let fallbackMultiplier = 0.8

    let timeoutSeconds= 1200


    let strictlyFlow=false;
    let humanAssistSwitch=false;
    let voiceEnabled=false;
    let cookie=undefined;

    let speechGenderBackend='FEMALE'
    let speechLanguageCodeBackend='en-US'

    let projectId='ClonePrudentProduction_432543815345'
    let attachmentUrl='https://parramato.com/bot-view/images/attachment.png'
    let integrityPassPhrase='hbu8b23478gbuy2bcfy2cbcihsdcgUGUYUuy2bcfy2cbcihsdcYBEBIW'
    let localSavePassPhrase='8rhfuahiuHFIJUHAFIWEHFOw98ehfu9HFjhE234jbhJHbjhbfjebkfewfewjhEUHFUIClonePrudentProduction_432543815345'
    //------CODE------
    //------end------
            //Setup
            //global function and param changes

            if (strictlyFlow) {
                $("#jubi-textInput").hide();
            }
            let channel = "web";
            let crypter = Crypt(passphrase);
            let crypterTransit = Crypt(passphraseTransit);
            let crypterMiddleware = Crypt(window.passphraseMiddleware + integrityPassPhrase);
            let crypterLocal = Crypt(window.passphraseMiddleware + integrityPassPhrase + projectId);
            window.passphraseMiddleware = null;
            const intentDocs = JSON.parse(crypter.decrypt(JSON.stringify(intents)));
            const entityDocs = JSON.parse(crypter.decrypt(JSON.stringify(entities)));
            // const storedClassifier=JSON.parse(crypter.decrypt(JSON.stringify(classifierData)));
            const flowDocs = JSON.parse(crypter.decrypt(JSON.stringify(flows)));
            if (!cookie) {
                clearAllLocalStorageData();
            }
            let user = {};

            let webId = get("id");
            if (webId) {
                webId = webId + "-" + IDGenerator(8);
                utmExtractor(webId);
                clearAllLocalStorageData();
            }
            let readyState = false;
            let thresholdDirect = 0.5;
            let thresholdOptions = 0.2;
            let decorateBotResponse;
            let lastTimestamp;
            let updateWebId;
            function clearAllLocalStorageData() {
                if (window.localStorage) {
                    window.localStorage.setItem(localSavePassPhrase, undefined);
                    window.localStorage.setItem("t_" + localSavePassPhrase, undefined);
                    window.localStorage.setItem("user_" + localSavePassPhrase, undefined);
                    window.localStorage.setItem("tags_" + localSavePassPhrase, undefined);
                    window.localStorage.setItem("webId_" + localSavePassPhrase, undefined);
                }
            }
            function setLocalStorageData(key, value) {
                if (window.localStorage) {
                    window.localStorage.setItem(key, value);
                }
            }
            function getLocalStorageData(key) {
                return window.localStorage ? window.localStorage.getItem(key) : undefined;
            }
            window.subscriptionForWebId = {
                setCallback: function (callback) {
                    updateWebId = callback;
                },
                getWebId: function () {
                    return webId;
                },
                getState: function () {
                    return readyState;
                }
            };

            (function () {

                try {
                    // console.log("tags")
                    let encryptedTags = getLocalStorageData("tags_" + localSavePassPhrase);
                    tags = JSON.parse(crypterLocal.decrypt(encryptedTags));
                    // console.log(tags)
                } catch (e) {
                    // console.log(e)
                }
                try {
                    // console.log("tags")
                    let encryptedUser = getLocalStorageData("user_" + localSavePassPhrase);
                    user = JSON.parse(crypterLocal.decrypt(encryptedUser));
                    // console.log(tags)
                } catch (e) {
                    // console.log(e)
                }
                if (!webId) {
                    let webIdData = getLocalStorageData("webId_" + localSavePassPhrase);
                    if (webIdData) {
                        try {
                            webIdData = JSON.parse(crypterLocal.decrypt(webIdData));
                            if (webIdData && webIdData.id) {
                                webId = webIdData.id;
                            }
                        } catch (e) {}
                    }
                }
                if (!webId) {
                    webId = IDGenerator(20);
                }
                webId = webId.replace(/ +?/g, '');
                let depth = 0;
                let totalQueries = 0;
                let totalIntents = 0;
                for (let intent of Object.keys(intentDocs)) {
                    totalQueries += intentDocs[intent].length;
                    totalIntents += 1;
                }
                depth = totalQueries / totalIntents;
                thresholdDirect = (1 - Math.tanh(Math.log10(depth + 1) * 0.5)) * directMultiplier;
                thresholdDirect = thresholdDirect > 1 ? 1 : thresholdDirect;
                thresholdOptions = thresholdDirect * fallbackMultiplier;
                console.log("confidence direct:" + thresholdDirect);
                console.log("confidence fallback:" + thresholdOptions);
            })();

            let socketHuman = io(humanUrl, {
                transports: ['websocket'],
                path: humanPath
            });
            socketHuman.on('disconnect', function () {
                tags.blockBot = undefined;
                //online=false;
                // console.log("Going Offline")
                //disconnectVoice();
                // offFunction();
            });
            socketHuman.on('connect', function () {
                //online=true;
                //onFunction();
            });

            let socketUpload = io(uploadUrl, {
                transports: ['websocket'],
                path: uploadPath
            });

            let socketVoice = io(voiceUrl, {
                transports: ['websocket'],
                path: voicePath
            });

            let socketBackend = io(backendUrl, {
                transports: ['websocket'],
                path: backendPath
            });
            let socketMiddleware;
            if (middlewareWebsocket) {
                socketMiddleware = io(middlewareUrl, {
                    transports: ['websocket'],
                    path: middlewarePath
                });
            } else {
                socketMiddleware = io(middlewareUrl, {
                    path: middlewarePath
                });
            }

            // console.log("Separate Backend")
            socketMiddleware.on('connect', function () {
                window.socketId = socketMiddleware.id; //
                online = true;
                onFunction();
            });

            String.prototype.replaceAll = function (search, replacement) {
                let target = this;
                return target.split(search).join(replacement);
            };
            Element.prototype.remove = function () {
                this.parentElement.removeChild(this);
            };
            NodeList.prototype.remove = HTMLCollection.prototype.remove = function () {
                for (let i = this.length - 1; i >= 0; i--) {
                    if (this[i] && this[i].parentElement) {
                        this[i].parentElement.removeChild(this[i]);
                    }
                }
            };
            //Internet On/Off Functions
            function onFunction() {
                $("#offlinebx").hide();
                console.log("ON:::");
            }
            function offFunction() {
                if (document.getElementById("offlinebx")) {
                    $("#offlinebx").show();
                } else {
                    document.getElementById("pm-mainSec").innerHTML += '<div class="offlinebx" id="offlinebx">' + '<div class="innerofline">' + '<h3>No connection, please refresh or check internet</h3>' + '</div>' + '</div>';
                }
            }
            //Init
            function init() {
                $(document).ready(function () {
                    $("#jubi-chat-loader-app").html(window.mainpage);
                    $("#jubisecmain").html(window.leftpanel + window.rightpanel);
                    $("#jubichatbot").html(window.templateOpenView + window.loadPermissionView);
                    window.mainpage = window.leftpanel = window.rightpanel = window.templateOpenView = window.loadPermissionView = undefined;
                    middleware();
                    setTimeout(() => {
                        $("#jubisecmain").fadeIn(100);
                        $("#jubichatbot").fadeIn(100);
                    }, 500);
                });
            }

            window.jubiChatEventEmitter = data => {
                triggerEvent({
                    senderId: webId,
                    channel: channel,
                    webInformation: deviceInfo,
                    projectId: projectId,
                    data: data,
                    type: "external"
                });
            };

            let triggerCallCount = 0;
            setInterval(() => {
                triggerCallCount = 0;
            }, 1000);

            function rateLimiter(func) {
                if (triggerCallCount < 30) {
                    triggerCallCount++;
                    func();
                } else {
                    console.log("Too Many requests");
                }
            }

            //Trigger Events
            function triggerEvent(event) {
                rateLimiter(() => {
                    if (online) {
                        let uid = IDGenerator(20);
                        if (window.jubiChatEventListener) {
                            window.jubiChatEventListener(event);
                        }
                        // console.log("EVENT "+event.type)
                        // console.log({data:event,webId:webId,requestId:uid})
                        socketBackend.emit("web-event-register", crypterTransit.encrypt(JSON.stringify({ data: event, webId: webId, requestId: uid })));
                        socketBackend.on("web-event-register-" + webId + "-" + uid, () => {});
                    }
                });
            }

            function triggerEventError(event) {
                rateLimiter(() => {
                    if (online) {
                        let uid = IDGenerator(20);
                        if (window.chatErrorEventTrigger) {
                            window.chatErrorEventTrigger(event);
                        }
                        console.log("EVENT ERROR " + event.type);
                        console.log({ data: event, webId: webId, requestId: uid });
                        socketBackend.emit("web-event-register-error", crypterTransit.encrypt(JSON.stringify({ data: event, webId: webId, requestId: uid })));
                        socketBackend.on("web-event-register-error-" + webId + "-" + uid, () => {});
                    }
                });
            }

            //Invalidate
            async function invalidate(callbackOption, onlyInvalidateFlag) {
                try {
                    if (!onlyInvalidateFlag) {
                        if (user && user.stages && user.stages.length > 1 && user.tracker < user.stages.length - 1) {
                            let reply = await transform({
                                text: "It has been a while. Cancelled the previous conversation.",
                                type: "text"
                            });
                            decorateBotResponse(reply);
                        }
                    }
                    user.tracker = 0;
                    let cancelFlow = flowDocs["selectemergency"] || flowDocs["selectEmergency"];
                    if (!cancelFlow) {
                        cancelFlow = {
                            stages: [{
                                text: ["Cancelling your current conversation."],
                                stage: "selectfallback",
                                type: "text"
                            }]
                        };
                    }
                    user.stages = cancelFlow.stages;
                    user.stuckCount = 0;
                    user.conversationId = undefined;
                    if (callbackOption) {
                        callbackOption();
                    }
                } catch (e) {
                    // console.log(e);
                    triggerEventError({
                        senderId: webId,
                        channel: channel,
                        projectId: projectId,
                        type: "invalidate-1",
                        error: e
                    });
                }
            }

            function transform(response) {

                function replaceTags(text) {
                    let match = /\${[a-zA-Z0-9_]*}/g.exec(text);
                    return text.replace(match, '');
                }
                function findMatch(str) {
                    let match = /\${(image|file|audio|video)::[^(${|})]+}/g.exec(str);
                    if (match && match.length > 0) {
                        return match;
                    } else {
                        return undefined;
                    }
                }
                function transformMediaOrText(text, i) {
                    if (findMatch(text)) {
                        let match = text.replace('${', '').replace('}', '').split('::');
                        return {
                            id: i,
                            type: match[0],
                            value: match[1]
                        };
                    } else {
                        return {
                            id: i,
                            type: 'text',
                            value: replaceTags(text)
                        };
                    }
                }

                return new Promise((resolve, reject) => {
                    try {
                        if (Array.isArray(response.text) && response.text.length == 1) {
                            response.text = response.text[0];
                        }
                        //extract media
                        let tempStr = response.text;
                        let match = findMatch(tempStr);
                        let mediaFlag = false;
                        let botMessage = [];
                        if (typeof response.text === 'string') {
                            while (match) {
                                response.text = response.text.replace(match[0], '\\n' + match[0] + '\\n');
                                tempStr = tempStr.replace(match[0], '');
                                match = findMatch(tempStr);
                                mediaFlag = true;
                            }
                            // new line
                            response.text = response.text.replaceAll('|break|', '\\n');
                            if (response.text && response.text.includes('\\n')) {
                                response.text = response.text.split('\\n');
                            } else if (response.text && response.text.length > 60 && !mediaFlag) {
                                sentTokenizer.setEntry(response.text);
                                response.text = sentTokenizer.getSentences();
                            }
                        }
                        if (typeof response.text === 'string') {
                            botMessage.push(transformMediaOrText(response.text, 0));
                        } else if (response.text instanceof Array) {
                            let textArray = response.text;
                            for (let i = 0; i < textArray.length; i++) {
                                botMessage.push(transformMediaOrText(textArray[i], i));
                            }
                        }
                        let options = [];
                        currentButtonContext = {};
                        switch (response.type) {
                            case 'button':
                                let sameButton = false;
                                for (let i = 0; i < response.next.data.length; i++) {
                                    options.push({ type: response.next.data[i].type, text: response.next.data[i].text, data: response.next.data[i].data });
                                    if (currentButtonContext[response.next.data[i].text.toLowerCase().trim()]) {
                                        sameButton = true;
                                        currentButtonContext = {};
                                    }
                                    if (!sameButton) {
                                        currentButtonContext[response.next.data[i].text.toLowerCase().trim()] = response.next.data[i].data.toLowerCase().trim();
                                    }
                                }
                                resolve({
                                    botMessage: botMessage,
                                    answerType: 'persist-option',
                                    options: options
                                });
                                if (strictlyFlow) {
                                    $("#jubi-textInput").hide(200);
                                }
                                break;
                            case 'quickReply':
                                for (let i = 0; i < response.next.data.length; i++) {
                                    options.push({ type: response.next.data[i].type, text: response.next.data[i].text, data: response.next.data[i].data });
                                }
                                resolve({
                                    botMessage: botMessage,
                                    answerType: 'option',
                                    options: options
                                });
                                if (strictlyFlow) {
                                    $("#jubi-textInput").hide(200);
                                }
                                break;
                            case 'generic':
                                resolve({
                                    botMessage: botMessage,
                                    answerType: 'generic',
                                    options: response.next.data
                                });
                                if (strictlyFlow) {
                                    $("#jubi-textInput").hide(200);
                                }
                                break;
                            default:
                                resolve({
                                    botMessage: botMessage,
                                    answerType: 'text'
                                });
                                if (strictlyFlow) {
                                    $("#jubi-textInput").show(200);
                                }
                                break;
                        }
                    } catch (e) {
                        triggerEventError({
                            senderId: webId,
                            channel: channel,
                            projectId: projectId,
                            type: "transform-1",
                            error: e
                        });
                        // console.log(e);
                        return reject(e);
                    }
                });
            }

            //Chat Engine
            let ChatEngine = function (callbackOption) {

                let callback = function (data) {
                    // console.log("no callback")
                    // console.log(data)
                };

                if (callbackOption) {
                    callback = callbackOption;
                }

                async function runOnNotification(data) {
                    if (middlewareSecurity) {
                        data = JSON.parse(crypterMiddleware.decrypt(data));
                    }
                    // console.log(data)
                    // console.log("Web-External")
                    let reply = await transform({
                        text: data.text,
                        type: data.type,
                        next: data.next
                    });
                    triggerEvent({
                        senderId: webId,
                        channel: channel,
                        projectId: projectId,
                        data: {
                            text: data.text,
                            type: data.type,
                            next: data.next
                        },
                        type: "notification"
                    });
                    socketHuman.emit("preHandler", {
                        senderId: webId,
                        projectId: projectId,
                        tags: tags,
                        type: "pre",
                        reply: {
                            text: data.text,
                            type: data.type,
                            next: data.next
                        }
                    });
                    callback(reply);
                }

                function pre(requestedStage) {
                    return new Promise(function (resolve, reject) {
                        if (!online) {
                            return reject({ status: "offline" });
                        }
                        let uid = IDGenerator(20);
                        requestedStage.webId = webId;
                        requestedStage.requestId = uid;
                        if (tags.blockBot) {
                            requestedStage.tags.blockBot = true;
                        }
                        requestedStage.tags = tags;
                        if (middlewareSecurity) {
                            socketMiddleware.emit("web-pre", crypterMiddleware.encrypt(JSON.stringify(requestedStage)));
                        } else {
                            socketMiddleware.emit("web-pre", JSON.stringify(requestedStage));
                        }

                        socketMiddleware.on("web-pre-" + webId + "-" + uid, receivedModel => {
                            if (middlewareSecurity) {
                                receivedModel = JSON.parse(crypterMiddleware.decrypt(receivedModel));
                            }
                            resolve(receivedModel);
                            triggerEvent({
                                senderId: webId,
                                channel: channel,
                                projectId: projectId,
                                input: requestedStage,
                                output: receivedModel,
                                type: "pre"
                            });
                            return;
                        });
                    });
                }

                async function runOnHumanNotification(data) {

                    // data = JSON.parse(crypterMiddleware.decrypt(data))
                    // console.log("Web external")
                    // console.log(data)
                    // console.log("Web-External")

                    let currentStage = {
                        text: data.text,
                        type: data.type,
                        next: data.next
                    };
                    let flowName;

                    if (!tags.blockBot && typeof data.text == 'string' && data.text.trim().startsWith("#")) {
                        flowName = data.text.replace("#", "");
                        let flow = flowDocs[flowName];
                        if (flow) {
                            user.tracker = 0;
                            user.stages = flow.stages;
                            user.stuckCount = 0;
                            user.conversationId = flow.flowId;
                            currentStage = clone(user.stages[user.tracker]);
                            if (!currentStage.firstMessage) {
                                currentStage.firstMessage = "";
                            }
                            if (Array.isArray(currentStage.text)) {
                                for (let index in currentStage.text) {
                                    currentStage.text[index] = currentStage.firstMessage + "|break|" + currentStage.text[index];
                                }
                            } else {
                                currentStage.text = currentStage.firstMessage + "|break|" + currentStage.text;
                            }
                            if (currentStage && currentStage.next && currentStage.next.pre && currentStage.next.pre.length > 0) {
                                pre(currentStage).then(resolve).catch(e => {
                                    if (!online) {
                                        currentStage = {
                                            text: "Oh! I would require internet to help you here.",
                                            type: "text"
                                        };
                                    }
                                });
                            }
                        }
                    }

                    let reply = await transform(currentStage);
                    triggerEvent({
                        senderId: webId,
                        channel: channel,
                        webInformation: deviceInfo,
                        projectId: projectId,
                        assistance: true,
                        input: {
                            user: user,
                            tags: tags
                        },
                        intentTrigger: flowName,
                        output: data,
                        blockBot: true,
                        flowDirection: "output",
                        type: "process"
                    });
                    socketHuman.emit("preHandler", {
                        senderId: webId,
                        projectId: projectId,
                        tags: tags,
                        assistance: true,
                        type: "pre",
                        reply: currentStage
                    });
                    callback(reply);
                }

                socketMiddleware.on("web-external-" + webId.toString(), runOnNotification);
                socketMiddleware.on("web-timeout-" + webId.toString(), async function (data) {
                    invalidate(async () => {
                        callback((await transform(data)));
                    });
                });

                socketHuman.on("web-external-" + webId.toString(), runOnHumanNotification);
                socketHuman.on("start-bot-" + webId.toString(), function (data) {
                    tags.blockBot = undefined;
                    runOnHumanNotification(data);
                });
                socketHuman.on("pause-bot-" + webId.toString(), function () {
                    tags.blockBot = true;
                });

                this.processInput = async function (text) {
                    socketHuman.emit("postHandler", {
                        senderId: webId,
                        projectId: projectId,
                        tags: tags,
                        intent: "",
                        type: "post",
                        reply: {
                            projectId: projectId,
                            data: {
                                text: text
                            },
                            sender: webId,
                            recipient: "jubiAiWeb"
                        },
                        time: new Date().getTime()
                    });
                    if (tags && !tags.blockBot) {
                        // console.log("PROCESS INPUT")
                        if (strictlyFlow) {
                            $("#jubi-textInput").hide(200);
                        }
                        try {
                            if (lastTimestamp === undefined) {
                                let encryptedLastTimestamp = getLocalStorageData("t_" + localSavePassPhrase);
                                if (encryptedLastTimestamp) {
                                    try {
                                        lastTimestamp = JSON.parse(crypterLocal.decrypt(encryptedLastTimestamp)).lastTimestamp;
                                    } catch (e) {}
                                }
                            }
                            if (lastTimestamp + parseInt(timeoutSeconds || 1200) * 1000 < new Date().getTime()) {
                                invalidate();
                            }
                            lastTimestamp = new Date().getTime();
                            setLocalStorageData("t_" + localSavePassPhrase, crypterLocal.encrypt(JSON.stringify({ lastTimestamp: lastTimestamp })));

                            let timestampstart = new Date().getTime();
                            let engineOut = await runEngine(text);
                            let stage = engineOut.stage;
                            let timestampend = new Date().getTime();
                            setLocalStorageData("user_" + localSavePassPhrase, crypterLocal.encrypt(JSON.stringify(user)));

                            if (humanAssistSwitch) {
                                if (engineOut.status.final == "cancelStuck" || engineOut.status.final == "" || engineOut.status.final == "nextInvalid" || engineOut.status.final == "nextFallback") {
                                    engineOut.status.final = undefined;
                                    socketHuman.emit("assignAgentBackend", {
                                        data: {
                                            senderId: webId,
                                            bot: projectId
                                        },
                                        senderId: webId,
                                        projectId: projectId
                                    });
                                }
                            }

                            triggerEvent({
                                senderId: webId,
                                channel: channel,
                                webInformation: deviceInfo,
                                projectId: projectId,
                                input: {
                                    text: text,
                                    user: user,
                                    tags: tags
                                },
                                requestAssistance: tags.blockBot,
                                apiTime: timestampend - timestampstart,
                                output: stage,
                                nlu: engineOut.nlu,
                                status: engineOut.status,
                                type: "process"
                            });
                            if (!tags.blockBot) {
                                socketHuman.emit("preHandler", {
                                    senderId: webId,
                                    type: "pre",
                                    projectId: projectId,
                                    tags: tags,
                                    text: text,
                                    reply: stage
                                });
                                let reply = await transform(replaceTagsFromStage(stage));
                                callback(reply);
                            }
                        } catch (e) {
                            triggerEventError({
                                senderId: webId,
                                channel: channel,
                                projectId: projectId,
                                type: "processinput-1",
                                error: e
                            });
                            // console.log(e);
                        }
                    } else {
                        triggerEvent({
                            senderId: webId,
                            channel: channel,
                            webInformation: deviceInfo,
                            projectId: projectId,
                            input: {
                                text: text,
                                user: user,
                                tags: tags
                            },
                            blockBot: true,
                            flowDirection: "input",
                            type: "process"
                        });
                    }
                };
                function replaceTagsFromStage(stage) {
                    if (Array.isArray(stage.text)) {
                        for (let index in stage.text) {
                            stage.text[index] = replaceAllTags(stage.text[index]);
                        }
                    } else {
                        stage.text = replaceAllTags(stage.text);
                    }
                    if (stage.type == "button" || stage.type == "quickReply") {
                        for (let index in stage.next.data) {
                            stage.next.data[index].data = replaceAllTags(stage.next.data[index].data);
                            stage.next.data[index].text = replaceAllTags(stage.next.data[index].text);
                        }
                    }
                    return stage;
                }

                function replaceAllTags(text) {
                    let match = /\${[a-zA-Z0-9_]*}/g.exec(text);
                    if (match) {
                        do {
                            // console.log(match[0])
                            let matchedTag = match[0].replace("${", "").replace("}", "");
                            if (tags[matchedTag]) {
                                text = text.replace(match[0], tags[matchedTag]);
                            } else {
                                text = text.replace(match[0], "");
                            }
                            match = /\${[a-zA-Z0-9_]*}/g.exec(text);
                        } while (match);
                    }
                    return text;
                }

                function runEngine(text) {
                    return new Promise(async function (resolve, reject) {
                        try {
                            let timestamp1 = new Date().getTime();
                            tags["userSays"] = text;
                            let nluProcessedModel = await processNlu(cleanText(text));
                            // triggerEvent({
                            //     senderId:webId,
                            //     channel:channel,
                            //     projectId:projectId,
                            //     input:text,
                            //     output:nluProcessedModel,
                            //     type:"nlu"
                            // });
                            let timestamp2 = new Date().getTime();
                            let validatedModel = await processValidator(text, user, nluProcessedModel.entities);
                            let timestamp3 = new Date().getTime();
                            let prevStage = {};
                            if (user.stages) {
                                prevStage = user.stages[user.tracker];
                            }
                            if (user.previousOptions && user.previousQuery) {
                                let output = { intents: {}, entities: {}, top: []
                                    //entity extraction
                                };for (let option of user.previousOptions) {
                                    // let entityData=replaceAllEntities(option.query,output);
                                    // let textReplaced = entityData.text
                                    // console.log("MATCH::::::::::::")
                                    // console.log("TEXT REPLACED:::::::::::::"+textReplaced)
                                    // console.log("TEXT:::::::::::::"+text)
                                    // console.log("OQ:::::::::::::"+option.query)
                                    if (text == option.query) {
                                        // console.log("MATCHED::::::::::::")
                                        triggerEvent({
                                            senderId: webId,
                                            channel: channel,
                                            projectId: projectId,
                                            query: user.previousQuery,
                                            similar: option,
                                            type: "match"
                                        });
                                    }
                                }
                            }
                            user.previousOptions = undefined;
                            user.previousQuery = undefined;
                            let expectation;
                            if (user && user.stages && user.stages.length > user.tracker && user.stages[user.tracker] && user.stages[user.tracker].next && user.stages[user.tracker].next.expectation) {
                                expectation = user.stages[user.tracker].next.expectation;
                            }
                            if (expectation) {
                                let saveResponse = await saveInformation("pre", validatedModel, prevStage, {}, nluProcessedModel, text);
                                if (saveResponse && saveResponse.error) {
                                    triggerEventError({
                                        senderId: webId,
                                        channel: channel,
                                        projectId: projectId,
                                        type: "runengine-1",
                                        error: saveResponse.error
                                    });
                                    // console.log(saveResponse.error);
                                }
                                if (saveResponse.tags) {
                                    tags = saveResponse.tags;
                                }
                                setLocalStorageData("tags_" + localSavePassPhrase, crypterLocal.encrypt(JSON.stringify(saveResponse.tags)));
                            } else {
                                saveInformation("pre", validatedModel, prevStage, {}, nluProcessedModel, text).then(response => {
                                    if (response && response.error) {
                                        triggerEventError({
                                            senderId: webId,
                                            channel: channel,
                                            projectId: projectId,
                                            type: "runengine-2",
                                            error: response.error
                                        });
                                        // console.log(reponse.error);
                                    }
                                    if (response.tags) {
                                        if (tags.blockBot) {
                                            response.tags.blockBot = true;
                                        }
                                        tags = response.tags;
                                    }
                                    if (validatedModel && validatedModel.data) {
                                        tags[prevStage.stage] = validatedModel.data;
                                    }
                                    setLocalStorageData("tags_" + localSavePassPhrase, crypterLocal.encrypt(JSON.stringify(tags)));
                                }).catch(e => {
                                    triggerEventError({
                                        senderId: webId,
                                        channel: channel,
                                        projectId: projectId,
                                        type: "runengine-3",
                                        error: e
                                    });
                                    // console.log(e)
                                });
                                if (validatedModel && validatedModel.data) {
                                    tags[prevStage.stage] = validatedModel.data;
                                }
                                setLocalStorageData("tags_" + localSavePassPhrase, crypterLocal.encrypt(JSON.stringify(tags)));
                            }
                            // console.log(tags)
                            let timestamp4 = new Date().getTime();
                            let flowManagerData = await processFlowManager({ query: text, intents: nluProcessedModel.intents, topIntents: nluProcessedModel.top, validation: validatedModel });
                            let stageModel = flowManagerData.response;
                            let status = flowManagerData.status;
                            let timestamp5 = new Date().getTime();
                            // console.log(timestamp2-timestamp1)
                            // console.log(timestamp3-timestamp2)
                            // console.log(timestamp4-timestamp3)
                            // console.log(timestamp5-timestamp4)
                            saveInformation("post", validatedModel, prevStage, stageModel, nluProcessedModel, text).then(reponse => {
                                if (reponse && reponse.error) {
                                    triggerEventError({
                                        senderId: webId,
                                        channel: channel,
                                        projectId: projectId,
                                        type: "runengine-4",
                                        error: reponse.error
                                    });
                                    // console.log(reponse.error);
                                }
                                if (reponse.tags) {
                                    if (tags.blockBot) {
                                        reponse.tags.blockBot = true;
                                    }
                                    tags = reponse.tags;
                                }
                                setLocalStorageData("tags_" + localSavePassPhrase, crypterLocal.encrypt(JSON.stringify(tags)));
                            }).catch(e => {
                                triggerEventError({
                                    senderId: webId,
                                    channel: channel,
                                    projectId: projectId,
                                    type: "runengine-5",
                                    error: e
                                });
                                // console.log(e)
                            });
                            return resolve({ stage: stageModel, nlu: nluProcessedModel, status: status });
                        } catch (e) {
                            if (!online) {
                                invalidate(async () => {
                                    callback((await transform({
                                        text: "Oh! I would require internet to help you here.",
                                        type: "text"
                                    })));
                                }, true);
                            }
                            triggerEventError({
                                senderId: webId,
                                channel: channel,
                                projectId: projectId,
                                type: "runengine-6",
                                error: e
                            });
                            // console.log(e)
                            return reject(e);
                        }
                    });

                    function saveInformation(type, validatedModel, prevStage, stageModel, nluProcessedModel, text) {
                        return new Promise((resolve, reject) => {
                            if (!online) {
                                return reject({ status: "offline" });
                            }
                            let uid = IDGenerator(20);
                            let input = { type: type, validation: validatedModel, prevStage: prevStage, webId: webId, nlu: nluProcessedModel, text: text, stage: stageModel, requestId: uid };
                            if (middlewareSecurity) {
                                socketMiddleware.emit("web-save", crypterMiddleware.encrypt(JSON.stringify(input)));
                            } else {
                                socketMiddleware.emit("web-save", JSON.stringify(input));
                            }
                            socketMiddleware.on("web-save-" + webId + "-" + uid, receivedModel => {
                                if (middlewareSecurity) {
                                    receivedModel = JSON.parse(crypterMiddleware.decrypt(receivedModel));
                                }
                                resolve(receivedModel);
                                triggerEvent({
                                    senderId: webId,
                                    channel: channel,
                                    projectId: projectId,
                                    input: input,
                                    output: receivedModel,
                                    type: "save"
                                });
                            });
                        });
                    }

                    // function getTokenizedData(text){
                    //     return tokenizer()
                    //     .input(text)
                    //     .token('data', /[a-zA-Z0-9]+/)
                    //     .resolve()
                    //     .data||[]
                    // }
                    function cleanText(text) {
                        //text tokenizing and cleaning
                        let tokenizedData = tokenizer().input(text).token('data', /[^!^@^-^_^=^\[^&^\/^\^^#^,^+^(^)^$^~^%^.^'^"^:^*^?^<^>^{^}^\]^0^1^2^3^4^5^6^7^8^9^\s]+/).resolve().data;
                        let resp = "";
                        if (tokenizedData) {
                            if (Array.isArray(tokenizedData)) {
                                resp = tokenizedData.reduce((text, value) => {
                                    return text.toLowerCase() + " " + value.toLowerCase();
                                });
                            } else {
                                resp = tokenizedData.toLowerCase().trim();
                            }
                        }
                        // console.log(":::::::::::")
                        // console.log(resp)
                        return resp;
                    }

                    function opinionFromLR(data) {
                        return new Promise(async function (resolve, reject) {
                            if (!online) {
                                return reject({ status: "offline" });
                            }
                            let uid = IDGenerator(20);
                            let requestData = {
                                data: data,
                                webId: webId,
                                requestId: uid
                            };
                            socketBackend.emit("web-opinion-lr", crypterTransit.encrypt(JSON.stringify(requestData)));
                            socketBackend.on("web-opinion-lr-" + webId + "-" + uid, receivedModel => {
                                receivedModel = JSON.parse(crypterTransit.decrypt(receivedModel));
                                if (receivedModel.error) {
                                    triggerEventError({
                                        senderId: webId,
                                        channel: channel,
                                        projectId: projectId,
                                        type: "opinionfromlr-1",
                                        error: body.error
                                    });
                                    // console.log(body.error)
                                    return reject(err);
                                }
                                // console.log(receivedModel)
                                return resolve(receivedModel);
                            });
                        });
                    }
                    function replaceAllEntities(text, output) {
                        //entity extraction
                        let entitiesDetected = [];
                        let filteredEntities = [];
                        let entitiesToBeDeletedIndices = [];
                        for (let label in entityDocs) {
                            for (let value in entityDocs[label]) {
                                let flag = false;
                                for (let token of entityDocs[label][value]) {
                                    // for( let textToken of getTokenizedData(text)){
                                    // if(textToken==token&&token.trim()!=""&&textToken.trim()!=""){
                                    if ((text.startsWith(token + " ") || text.endsWith(" " + token) || text.trim() == token || text && text.includes(" " + token + " ")) && token.trim() != "") {
                                        if (entitiesDetected.length == 0) {
                                            entitiesDetected.push({ token: token, synonymGroup: value, entity: label });
                                            flag = true;
                                        }
                                        for (let index in entitiesDetected) {
                                            if (entitiesDetected[index].token && entitiesDetected[index].token.includes(token)) {
                                                flag = true;
                                                break;
                                            } else if (token && token.includes(entitiesDetected[index].token)) {
                                                entitiesDetected.push({ token: token, synonymGroup: value, entity: label });
                                                entitiesToBeDeletedIndices.push(index);
                                                flag = true;
                                                break;
                                            } else {
                                                entitiesDetected.push({ token: token, synonymGroup: value, entity: label });
                                                flag = true;
                                            }
                                        }
                                    }
                                    if (flag) {
                                        break;
                                    }
                                    // }
                                    // }
                                }
                            }
                        }
                        for (let index in entitiesDetected) {
                            if (!entitiesToBeDeletedIndices || !entitiesToBeDeletedIndices.includes(index)) {
                                filteredEntities.push(entitiesDetected[index]);
                            }
                        }
                        output.entities = filteredEntities;

                        for (let element of filteredEntities) {
                            text = text.replaceAll(element.token, element.entity);
                        }
                        return { output: output, text: text };
                    }
                    function processNlu(text) {
                        return new Promise(async function (resolve, reject) {
                            try {

                                //output variable
                                let output = { intents: {}, entities: {}, top: [] };

                                let entityData = replaceAllEntities(text, output);
                                text = entityData.text;
                                output = entityData.output;

                                //exact match
                                let matchFlag = false;
                                let max = 0;
                                // console.log("QUERY")
                                // console.log(text)
                                let outputIntents = [];
                                for (let label in intentDocs) {
                                    for (let utterance of intentDocs[label]) {
                                        let score = 0;
                                        if (utterance.toLowerCase() == text.toLowerCase()) {
                                            score = 1;
                                            // console.log("MATCH MATCH")
                                        } else {
                                            score = stringSimilarity.compareTwoStrings(utterance, text);
                                        }

                                        // console.log(text+":::"+score+":::"+utterance)
                                        if (score > 0.95) {
                                            if (score > max) {
                                                output.intents = {
                                                    intent: label,
                                                    probability: score,
                                                    query: intentDocs[label][0]
                                                };
                                                max = score;
                                                matchFlag = true;
                                            } else if (max == score) {
                                                matchFlag = false;
                                            }
                                        }
                                        if (utterance == text) {
                                            outputIntents.push({
                                                intent: label,
                                                probability: 1,
                                                query: intentDocs[label][0]
                                            });
                                        }
                                    }
                                }
                                // console.log("OUTPUT INTENTS")
                                // console.log(outputIntents)
                                if (outputIntents.length > 1 || output.intents.probability && output.intents.probability < 0.97) {
                                    matchFlag = false;
                                } else if (outputIntents.length == 1) {
                                    matchFlag = true;
                                }
                                // console.log("INTENT DOCS")
                                // console.log(intentDocs)
                                // console.log("EXACT MATCH")
                                // console.log(matchFlag)
                                console.log("JUBI_REQUEST:" + text);

                                //ml based match
                                if (!matchFlag) {
                                    // //generate nb output
                                    // let classifier = new BayesClassifier()
                                    // for( let intent in intentDocs){
                                    //     classifier.addDocuments(intentDocs[intent], intent)
                                    // }

                                    // classifier.train();
                                    // let nbData=classifier.getClassifications(text).splice(0,5)
                                    // // let nbTotalScore=0
                                    // // for( let element of classifier.getClassifications(text)){
                                    // //     nbTotalScore+=element.value
                                    // // }
                                    // // let nbData=classifier.getClassifications(text).splice(0,5)
                                    // // let failoverData={
                                    // //     intents:{
                                    // //         intent:nbData[0].label,
                                    // //         probability:nbData[0].value/nbTotalScore,
                                    // //         query:intentDocs[nbData[0].label][0]
                                    // //     },
                                    // //     top:[]
                                    // // }
                                    // // for( let i in nbData){
                                    // //     failoverData.top.push({
                                    // //         intent:nbData[i].label,
                                    // //         probability:nbData[i].value/nbTotalScore,
                                    // //         query:intentDocs[nbData[i].label][0]
                                    // //     })
                                    // // }

                                    // // create shrinked data
                                    // // let shrinkedData=classifier.getClassifications(text)
                                    // console.log("NB DATA")
                                    // console.log(nbData)
                                    let shrinkedIndexedData = {};
                                    for (let element in intentDocs) {
                                        if (intentDocs[element].length > 0) {
                                            shrinkedIndexedData[element] = intentDocs[element];
                                        }
                                    }
                                    // console.log("TOTAL DATA")
                                    // console.log(shrinkedIndexedData)
                                    let results = [];
                                    try {
                                        //train bm25 on shrinked data
                                        let engine = bm25();
                                        engine.defineConfig({ fldWeights: { text: 1 } });
                                        engine.definePrepTasks([nlp.string.lowerCase, nlp.string.removeExtraSpaces, nlp.string.tokenize0, nlp.tokens.propagateNegations, nlp.tokens.stem]);
                                        for (let label in shrinkedIndexedData) {
                                            if (shrinkedIndexedData[label].length > 0) {
                                                let text = shrinkedIndexedData[label].reduce((text, value) => {
                                                    return text + " " + value;
                                                });
                                                engine.addDoc({ text: text }, label);
                                            }
                                        }
                                        engine.consolidate(4);
                                        //run query on shrinked data trained bm25
                                        results = engine.search(text, 5);
                                    } catch (e) {
                                        triggerEventError({
                                            senderId: webId,
                                            channel: channel,
                                            projectId: projectId,
                                            type: "processnlu-1",
                                            error: e
                                        });
                                        // console.log(e);
                                    }

                                    // console.log("BM25")
                                    // console.log(results)


                                    if (results.length > 1) {
                                        let bm25TotalScore = 0;
                                        for (let element of results) {
                                            bm25TotalScore += Math.exp(element[1]);
                                        }
                                        let requestData = {
                                            data: {},
                                            query: text
                                        };
                                        for (let result of results) {
                                            requestData.data[result[0]] = shrinkedIndexedData[result[0]];
                                            requestData.projectId = "projectBrowser";
                                        }
                                        try {
                                            let response = await opinionFromLR(requestData);
                                            triggerEvent({
                                                senderId: webId,
                                                channel: channel,
                                                projectId: projectId,
                                                input: requestData,
                                                output: response,
                                                type: "lr"
                                            });
                                            output.intents = {
                                                intent: response.intents[0].name,
                                                probability: parseFloat(response.intents[0].confidence),
                                                query: intentDocs[response.intents[0].name][0]
                                            };
                                        } catch (e) {
                                            // console.log(e);
                                            output.intents = {
                                                intent: results[0][0],
                                                probability: Math.exp(results[0][1]) / bm25TotalScore,
                                                query: intentDocs[results[0][0]][0]
                                            };
                                        }

                                        output.top = [];
                                        for (let element of results) {
                                            if (intentDocs[element[0]].length > 0) {
                                                output.top.push({
                                                    intent: element[0],
                                                    probability: element[1] / bm25TotalScore,
                                                    query: intentDocs[element[0]][0]
                                                });
                                            }
                                        }
                                    } else {
                                        output.intents = {
                                            intent: "",
                                            probability: 0,
                                            query: ""
                                        };
                                        output.top = [];
                                    }
                                    // console.log("LR")
                                    // console.log(output)
                                }
                                return resolve(output);
                            } catch (e) {
                                triggerEventError({
                                    senderId: webId,
                                    channel: channel,
                                    projectId: projectId,
                                    type: "processnlu-2",
                                    error: e
                                });
                                // console.log(e);
                                return reject(e);
                            }
                        });
                    }
                    function processValidator(text, user, entities) {
                        let validator = {
                            wordList: wordList,
                            regex: regex,
                            post: post
                        };
                        return new Promise(async function (resolve, reject) {
                            try {
                                let expectation;
                                let post;
                                if (user && user.stages && user.stages.length > user.tracker && user.stages[user.tracker] && user.stages[user.tracker].next && user.stages[user.tracker].next.expectation) {
                                    expectation = user.stages[user.tracker].next.expectation;
                                } else if (user && user.stages && user.stages.length > user.tracker && user.stages[user.tracker] && user.stages[user.tracker].next && user.stages[user.tracker].next.post && user.stages[user.tracker].next.post.length > 0) {
                                    post = user.stages[user.tracker].next.post[0];
                                }

                                if (expectation && expectation.type) {
                                    let runFunc = validator[expectation.type].bind({ entities: entities, expectation: expectation, user: user });
                                    resolve((await runFunc(text)));
                                } else if (post && post.url) {
                                    let runFunc = validator["post"].bind({ entities: entities, post: post });
                                    resolve((await runFunc(text)));
                                } else {
                                    resolve({
                                        data: text,
                                        validated: true
                                    });
                                }
                            } catch (e) {
                                triggerEventError({
                                    senderId: webId,
                                    channel: channel,
                                    projectId: projectId,
                                    type: "processvalidator-1",
                                    error: e
                                });
                                // console.log(e)
                                return reject(e);
                            }
                        });

                        function post(input) {
                            return new Promise(function (resolve, reject) {
                                try {
                                    if (!online) {
                                        return reject({ status: "offline" });
                                    }
                                    let model = {};
                                    let uid = IDGenerator(20);
                                    model.data = input;
                                    model.validated = true;
                                    model.webId = webId;
                                    model.requestId = uid;
                                    model.stage = user.stages[user.tracker];
                                    if (middlewareSecurity) {
                                        socketMiddleware.emit("web-post", crypterMiddleware.encrypt(JSON.stringify(model)));
                                    } else {
                                        socketMiddleware.emit("web-post", JSON.stringify(model));
                                    }
                                    socketMiddleware.on("web-post-" + webId + "-" + uid, receivedModel => {
                                        if (middlewareSecurity) {
                                            receivedModel = JSON.parse(crypterMiddleware.decrypt(receivedModel));
                                        }
                                        resolve(receivedModel);
                                        triggerEvent({
                                            senderId: webId,
                                            channel: channel,
                                            projectId: projectId,
                                            input: input,
                                            output: receivedModel,
                                            type: "post"
                                        });
                                        return;
                                    });
                                } catch (e) {
                                    triggerEventError({
                                        senderId: webId,
                                        channel: channel,
                                        projectId: projectId,
                                        type: "post-1",
                                        error: e
                                    });
                                    // console.log(e);
                                    return reject(e);
                                }
                            });
                        }
                        function wordList(input) {
                            let entities = this.entities;
                            let expectation = this.expectation;
                            let model = {};
                            return new Promise(function (resolve, reject) {
                                try {
                                    // console.log(expectation)
                                    // console.log(entities)
                                    // console.log(input)
                                    if (expectation.val) {
                                        let entityValues = Object.keys(expectation.val);
                                        for (let entity of entities) {
                                            let flag = false;
                                            for (let value of entityValues) {
                                                if (entity.synonymGroup && typeof entity.synonymGroup == "string" && value && typeof value == "string" && entity.synonymGroup.trim() == value.trim()) {
                                                    flag = true;
                                                }
                                            }
                                            if (flag) {
                                                if (expectation.val[entity.synonymGroup]) {
                                                    model.stage = expectation.val[entity.synonymGroup];
                                                }
                                                // console.log(model.stage)
                                                // console.log(":::::::::::STAGE::::::::::::")
                                                model.data = entity.synonymGroup;
                                                model.validated = true;
                                                return resolve(model);
                                            }
                                        }
                                    }
                                    model.data = input;
                                    model.validated = false;
                                    return resolve(model);
                                } catch (e) {
                                    triggerEventError({
                                        senderId: webId,
                                        channel: channel,
                                        projectId: projectId,
                                        type: "wordlist-1",
                                        error: e
                                    });
                                    // console.log(e);
                                    return reject(e);
                                }
                            });
                        }
                        function regex(inp) {
                            let entities = this.entities;
                            let expectation = this.expectation;
                            let model = {};
                            return new Promise(function (resolve, reject) {
                                try {
                                    if (expectation.val && expectation.val.trim()) {
                                        let reg = new RegExp(expectation.val.trim());
                                        if (expectation.val && inp.match(reg)) {
                                            model.data = inp.match(reg)[0];
                                            model.validated = true;
                                            return resolve(model);
                                        } else {
                                            model.validated = false;
                                            return resolve(model);
                                        }
                                    } else {
                                        model.validated = false;
                                        return resolve(model);
                                    }
                                } catch (e) {
                                    triggerEventError({
                                        senderId: webId,
                                        channel: channel,
                                        projectId: projectId,
                                        type: "regex-1",
                                        error: e
                                    });
                                    // console.log(e);
                                    return reject(e);
                                }
                            });
                        }
                    }
                    function processFlowManager(data) {
                        return new Promise(async function (resolve, reject) {
                            try {
                                let status = {
                                    level: "fallback",
                                    prevConversation: "qna",
                                    nextInitConversation: "invalid",
                                    validation: data.validation.validated,
                                    final: "",
                                    previousStage: ""
                                };
                                let topIntents = [];
                                if (data && data.topIntents) {
                                    for (let element of data.topIntents) {
                                        if (!element.intent.startsWith("st_")) {
                                            topIntents.push(element);
                                        }
                                    }
                                    data.topIntents = topIntents;
                                }
                                // console.log(data.intents.probability)
                                let flow = flowDocs[data.intents.intent];
                                if (data.intents.probability >= thresholdDirect) {
                                    status.level = "direct";
                                } else if (data.intents.probability >= thresholdOptions) {
                                    status.level = "options";
                                }
                                if (user && user.stages && user.stages.length > 1 && user.tracker < user.stages.length - 1) {
                                    status.prevConversation = "flow";
                                }
                                if (flow) {
                                    if (flow.stages.length == 1) {
                                        status.nextInitConversation = "qna";
                                    } else if (flow.stages.length > 1) {
                                        status.nextInitConversation = "flow";
                                    }
                                }

                                if (user && user.stuckCount === undefined) {
                                    user.stuckCount = 0;
                                }
                                if (status.level === "direct" && flow && flow.flowId && flow.flowId.toLowerCase().trim() === "selectemergency") {
                                    status.final = "cancel";
                                    status.previousStage = "";
                                } else if (status.prevConversation == "flow" && status.nextInitConversation == "qna" && status.level == "direct" && data.intents.intent.toLowerCase().trim() === "selectprevious" && user.tracker > 0) {
                                    status.final = "inFlowPrevious";
                                    status.previousStage = "";
                                } else if (status.prevConversation == "flow" && status.nextInitConversation == "qna" && status.level == "direct" && !user.stages[user.tracker].skipGhost) {
                                    status.final = "inFlowNextGhost";
                                    status.previousStage = "";
                                }
                                // else if (status.prevConversation=="flow"&&status.nextInitConversation=="flow"&&status.level=="direct"&&flow&&user.conversationId!=flow.flowId){
                                //     status.final="nextStart"
                                // }
                                else if (status.prevConversation == "flow" && status.validation) {
                                        status.final = "inFlowNextValidated";
                                        status.previousStage = user.stages[user.tracker].stage;
                                    } else if (status.prevConversation == "flow" && !status.validation) {
                                        if (user.stuckCount < 3) {
                                            status.final = "inFlowNextInvalidated";
                                            status.previousStage = user.stages[user.tracker].stage;
                                        } else {
                                            status.final = "cancelStuck";
                                            status.previousStage = "";
                                        }
                                    } else if (status.prevConversation == "qna" && status.nextInitConversation == "invalid") {
                                        status.final = "nextInvalid";
                                        status.previousStage = "";
                                    } else if (status.prevConversation == "qna" && status.level == "direct") {
                                        status.final = "nextStart";
                                        status.previousStage = "";
                                    } else if (status.prevConversation == "qna" && status.level == "options") {
                                        if (topIntents.length > 0) {
                                            status.final = "nextOptions";
                                            status.previousStage = "";
                                        } else {
                                            status.final = "nextFallback";
                                            status.previousStage = "";
                                        }
                                    } else if (status.prevConversation == "qna" && status.level == "fallback") {
                                        status.final = "nextFallback";
                                        status.previousStage = "";
                                    }
                                return resolve({ response: await decideResponse(flow, data, status), status: status });
                            } catch (e) {
                                triggerEventError({
                                    senderId: webId,
                                    channel: channel,
                                    projectId: projectId,
                                    type: "processflowmanager-1",
                                    error: e
                                });
                                // console.log(e);
                                return reject(e);
                            }
                        });

                        function decideResponse(flow, data, status) {
                            return new Promise((resolve, reject) => {
                                try {
                                    // console.log(status) 
                                    let fallbackFlow = flowDocs["selectfallback"] || flowDocs["selectFallback"];
                                    let currentStage;
                                    switch (status.final) {
                                        case "cancel":
                                            user.tracker = 0;
                                            let cancelFlow = flowDocs["selectemergency"] || flowDocs["selectEmergency"];
                                            if (!cancelFlow) {
                                                cancelFlow = {
                                                    stages: [{
                                                        text: ["Cancelling your current conversation."],
                                                        stage: "selectfallback",
                                                        type: "text"
                                                    }]
                                                };
                                            }
                                            user.stages = cancelFlow.stages;
                                            user.stuckCount = 0;
                                            user.conversationId = undefined;
                                            resolve(user.stages[user.tracker]);
                                            break;
                                        case "cancelStuck":
                                            user.tracker = 0;
                                            user.stages = [{
                                                text: ["Cancelling, as it seems you are stuck somewhere."],
                                                stage: "selectfallback",
                                                type: "text"
                                            }];
                                            user.stuckCount = 0;
                                            user.conversationId = undefined;
                                            if (humanAssistSwitch) {
                                                tags.blockBot = true;
                                            }
                                            resolve(user.stages[user.tracker]);
                                            break;
                                        case "inFlowPrevious":
                                            user.tracker = parseInt(user.tracker) - 1;
                                            user.stuckCount = 0;
                                            currentStage = clone(user.stages[user.tracker]);
                                            if (currentStage && currentStage.next && currentStage.next.pre && currentStage.next.pre.length > 0) {
                                                pre(currentStage).then(receivedStage => {
                                                    resolve(receivedStage);
                                                }).catch(e => {

                                                    if (!online) {
                                                        invalidate(async () => {
                                                            callback((await transform({
                                                                text: "Oh! I would require internet to help you here.",
                                                                type: "text"
                                                            })));
                                                        }, true);
                                                    } else {
                                                        // console.log(e)
                                                        resolve(currentStage);
                                                    }
                                                });
                                            } else {
                                                resolve(currentStage);
                                            }
                                            break;
                                        case "inFlowNextGhost":
                                            let text = "";
                                            if (Array.isArray(flow.stages[0].text)) {
                                                text = flow.stages[0].text[getRandom(flow.stages[0].text.length)];
                                            } else {
                                                text = flow.stages[0].text;
                                            }
                                            currentStage = clone(user.stages[user.tracker]);
                                            if (currentStage && currentStage.next && currentStage.next.pre && currentStage.next.pre.length > 0) {
                                                pre(currentStage).then(receivedStage => {
                                                    if (Array.isArray(receivedStage.text)) {
                                                        for (let index in receivedStage.text) {
                                                            receivedStage.text[index] = text + "|break|" + receivedStage.text[index];
                                                        }
                                                    } else {
                                                        receivedStage.text = text + "|break|" + receivedStage.text;
                                                    }
                                                    resolve(receivedStage);
                                                }).catch(e => {
                                                    if (!online) {
                                                        invalidate(async () => {
                                                            callback((await transform({
                                                                text: "Oh! I would require internet to help you here.",
                                                                type: "text"
                                                            })));
                                                        }, true);
                                                    } else {
                                                        // console.log(e)
                                                        resolve(currentStage);
                                                    }
                                                });
                                            } else {
                                                if (Array.isArray(currentStage.text)) {
                                                    for (let index in currentStage.text) {
                                                        currentStage.text[index] = text + "|break|" + currentStage.text[index];
                                                    }
                                                } else {
                                                    currentStage.text = text + "|break|" + currentStage.text;
                                                }
                                                resolve(currentStage);
                                            }
                                            break;
                                        case "inFlowNextValidated":
                                            user.stuckCount = 0;
                                            currentStage = clone(user.stages[user.tracker]);
                                            let validText = "";
                                            if (currentStage && currentStage.next && currentStage.next.expectation && currentStage.next.expectation.validMessage) {
                                                validText = currentStage.next.expectation.validMessage;
                                            }
                                            if (currentStage && currentStage.next && currentStage.next.post && currentStage.next.post[0].validMessage) {
                                                validText = currentStage.next.post[0].validMessage;
                                            }
                                            let stageFound = false;
                                            if (data.validation.stage) {
                                                for (let index in user.stages) {
                                                    let stage = user.stages[index];
                                                    // console.log(":::::::::::::::::::::::")
                                                    // console.log(stage.stage)
                                                    if (stage.stage == data.validation.stage) {
                                                        user.tracker = index;
                                                        stageFound = true;
                                                        break;
                                                    }
                                                }
                                            }
                                            if (!stageFound) {
                                                user.tracker = parseInt(user.tracker) + 1;
                                            }
                                            currentStage = clone(user.stages[user.tracker]);
                                            if (currentStage && currentStage.next && currentStage.next.pre && currentStage.next.pre.length > 0) {
                                                pre(currentStage).then(receivedStage => {
                                                    if (Array.isArray(receivedStage.text)) {
                                                        for (let index in receivedStage.text) {
                                                            receivedStage.text[index] = validText + "|break|" + receivedStage.text[index];
                                                        }
                                                    } else {
                                                        receivedStage.text = validText + "|break|" + receivedStage.text;
                                                    }
                                                    resolve(receivedStage);
                                                }).catch(e => {
                                                    if (!online) {
                                                        invalidate(async () => {
                                                            callback((await transform({
                                                                text: "Oh! I would require internet to help you here.",
                                                                type: "text"
                                                            })));
                                                        }, true);
                                                    } else {
                                                        // console.log(e)
                                                        resolve(currentStage);
                                                    }
                                                });
                                            } else {
                                                if (Array.isArray(currentStage.text)) {
                                                    for (let index in currentStage.text) {
                                                        currentStage.text[index] = validText + "|break|" + currentStage.text[index];
                                                    }
                                                } else {
                                                    currentStage.text = validText + "|break|" + currentStage.text;
                                                }
                                                resolve(currentStage);
                                            }

                                            break;
                                        case "inFlowNextInvalidated":
                                            user.stuckCount = user.stuckCount + 1;
                                            currentStage = clone(user.stages[user.tracker]);
                                            // console.log(currentStage)
                                            let invalidText = "";
                                            if (currentStage && currentStage.next && currentStage.next.expectation && currentStage.next.expectation.invalidMessage) {
                                                invalidText = currentStage.next.expectation.invalidMessage;
                                            }
                                            if (currentStage && currentStage.next && currentStage.next.post && currentStage.next.post[0].invalidMessage) {
                                                invalidText = currentStage.next.post[0].invalidMessage;
                                            }
                                            if (currentStage && currentStage.next && currentStage.next.pre && currentStage.next.pre.length > 0) {
                                                pre(currentStage).then(receivedStage => {
                                                    if (Array.isArray(receivedStage.text)) {
                                                        for (let index in receivedStage.text) {
                                                            receivedStage.text[index] = invalidText + "|break|" + receivedStage.text[index];
                                                        }
                                                    } else {
                                                        receivedStage.text = invalidText + "|break|" + receivedStage.text;
                                                    }
                                                    resolve(receivedStage);
                                                }).catch(e => {
                                                    if (!online) {
                                                        invalidate(async () => {
                                                            callback((await transform({
                                                                text: "Oh! I would require internet to help you here.",
                                                                type: "text"
                                                            })));
                                                        }, true);
                                                    } else {
                                                        // console.log(e)
                                                        resolve(currentStage);
                                                    }
                                                });
                                            } else {
                                                if (Array.isArray(currentStage.text)) {
                                                    for (let index in currentStage.text) {
                                                        currentStage.text[index] = invalidText + "|break|" + currentStage.text[index];
                                                    }
                                                } else {
                                                    currentStage.text = invalidText + "|break|" + currentStage.text;
                                                }
                                                resolve(currentStage);
                                            }

                                            break;
                                        case "nextStart":
                                            user.tracker = 0;
                                            user.stages = flow.stages;
                                            user.stuckCount = 0;
                                            user.conversationId = flow.flowId;
                                            currentStage = clone(user.stages[user.tracker]);
                                            if (!currentStage.firstMessage) {
                                                currentStage.firstMessage = "";
                                            }
                                            if (Array.isArray(currentStage.text)) {
                                                for (let index in currentStage.text) {
                                                    currentStage.text[index] = currentStage.firstMessage + "|break|" + currentStage.text[index];
                                                }
                                            } else {
                                                currentStage.text = currentStage.firstMessage + "|break|" + currentStage.text;
                                            }
                                            if (currentStage && currentStage.next && currentStage.next.pre && currentStage.next.pre.length > 0) {
                                                pre(currentStage).then(resolve).catch(e => {
                                                    if (!online) {
                                                        invalidate(async () => {
                                                            callback((await transform({
                                                                text: "Oh! I would require internet to help you here.",
                                                                type: "text"
                                                            })));
                                                        }, true);
                                                    } else {
                                                        // console.log(e)
                                                        resolve(currentStage);
                                                    }
                                                });
                                            } else {
                                                resolve(currentStage);
                                            }
                                            break;
                                        case "nextFallback":
                                            user.tracker = 0;
                                            if (!fallbackFlow) {
                                                fallbackFlow = {
                                                    stages: [{
                                                        text: ["Could not understand your query."],
                                                        stage: "selectfallback",
                                                        type: "text"
                                                    }]
                                                };
                                            }
                                            user.stages = fallbackFlow.stages;
                                            user.stuckCount = 0;
                                            user.conversationId = undefined;
                                            if (humanAssistSwitch) {
                                                tags.blockBot = true;
                                            }
                                            resolve(user.stages[user.tracker]);
                                            break;
                                        case "nextInvalid":
                                            user.tracker = 0;
                                            if (!fallbackFlow) {
                                                fallbackFlow = {
                                                    stages: [{
                                                        text: ["Could not understand your query."],
                                                        stage: "selectfallback",
                                                        type: "text",
                                                        override: true
                                                    }]
                                                };
                                            } else {
                                                fallbackFlow.stages[0].override = true;
                                            }
                                            user.stages = fallbackFlow.stages;
                                            user.stuckCount = 0;
                                            user.conversationId = undefined;
                                            if (humanAssistSwitch) {
                                                tags.blockBot = true;
                                            }
                                            resolve(user.stages[user.tracker]);
                                            break;
                                        case "nextOptions":
                                            user.tracker = 0;
                                            user.stages = [{
                                                text: ["We have got following answers to help you."],
                                                stage: "optionsfallback",
                                                type: "generic",
                                                next: {
                                                    data: []
                                                }
                                            }];
                                            let index = 0;
                                            user.previousQuery = data.query;
                                            user.previousOptions = data.topIntents;
                                            for (let element of data.topIntents) {
                                                let reply;
                                                index++;
                                                if (flowDocs[element.intent] && flowDocs[element.intent].stages && flowDocs[element.intent].stages.length > 0) {
                                                    if (Array.isArray(flowDocs[element.intent].stages[0].text)) {
                                                        reply = flowDocs[element.intent].stages[0].text[0];
                                                    } else {
                                                        reply = flowDocs[element.intent].stages[0].text;
                                                    }
                                                }
                                                if (element.query && reply) {

                                                    user.stages[0].next.data.push({
                                                        title: capFirstLetter(element.query.trim()),
                                                        text: reply,
                                                        buttons: [{ data: element.query, text: "Read More" }]
                                                    });
                                                }
                                                function capFirstLetter(textSent) {
                                                    try {
                                                        return textSent.charAt(0).toUpperCase() + textSent.slice(1);
                                                    } catch (e) {
                                                        return textSent;
                                                    }
                                                }
                                            }
                                            if (user.stages[0].next.data.length == 0) {
                                                if (!fallbackFlow) {
                                                    fallbackFlow = {
                                                        stages: [{
                                                            text: ["Could not understand your query."],
                                                            stage: "selectfallback",
                                                            type: "text",
                                                            override: true
                                                        }]
                                                    };
                                                } else {
                                                    fallbackFlow.stages[0].override = true;
                                                }
                                                user.stages = fallbackFlow.stages;
                                                if (humanAssistSwitch) {
                                                    tags.blockBot = true;
                                                }
                                                status.final = "";
                                            } else {
                                                user.stages[0].next.data.push({
                                                    title: "Not relevant",
                                                    text: "Did not match my query",
                                                    buttons: [{ data: "not relevant", text: "Select" }]
                                                });
                                            }
                                            user.stuckCount = 0;
                                            user.conversationId = undefined;
                                            resolve(user.stages[user.tracker]);
                                            break;
                                        default:
                                            status.final = "";
                                            user.tracker = 0;
                                            if (!fallbackFlow) {
                                                fallbackFlow = {
                                                    stages: [{
                                                        text: ["Could not understand your query."],
                                                        stage: "selectfallback",
                                                        type: "text",
                                                        override: true
                                                    }]
                                                };
                                            } else {
                                                fallbackFlow.stages[0].override = true;
                                            }
                                            user.stages = fallbackFlow.stages;
                                            user.stuckCount = 0;
                                            user.conversationId = undefined;

                                            if (humanAssistSwitch) {
                                                tags.blockBot = true;
                                            }
                                            resolve(user.stages[user.tracker]);
                                            break;
                                    }
                                } catch (e) {
                                    triggerEventError({
                                        senderId: webId,
                                        channel: channel,
                                        projectId: projectId,
                                        type: "decideresponse-1",
                                        error: e
                                    });
                                    // console.log(e);
                                    return reject(e);
                                }
                            });
                        }
                    }
                }
            };
            //Chat Middleware Js
            function middleware() {
                let backendResponse;
                if (!backendResponse) {
                    backendResponse = false;
                }
                let booleanHideShow;
                let delayMaster = 0;
                let msgIndex = 0;
                let gender = null;
                let profile = undefined;
                let semaphoreForFirstChatLoad = true;
                let lastConversationSemaphore = true;
                let inputQuery = get("query");
                // let inputDefault=false;
                if (!inputQuery) {
                    inputQuery = 'Get Started';
                    // inputDefault=true;
                }
                if (!voiceEnabled || !online) {
                    // console.log("no speech")
                    hideVoice();
                }

                // setTimeout(async()=>{
                //     let currentState=await doesConnectionExist();
                //     if(currentState!=online){
                //         online=currentState;
                //         if(online){
                //             console.log("Going Online")
                //         }
                //         else{
                //             console.log("Going Offline")
                //             disconnectVoice();
                //         }
                //     } 
                // },1000);
                socketMiddleware.on('disconnect', function () {
                    online = false;
                    console.log("Going Offline");
                    disconnectVoice();
                    offFunction();
                });

                let ce = new ChatEngine(postReply);
                decorateBotResponse = postReply;
                socketBackend.on("web-webview-" + webId.toString(), async function (data) {
                    triggerEvent({
                        senderId: webId,
                        channel: channel,
                        projectId: projectId,
                        data: data,
                        type: "webViewSubmit"
                    });
                    data = JSON.parse(crypterMiddleware.decrypt(data));

                    ce.processInput(data.text);

                    $(".showEditIframe").fadeOut(600);
                    setTimeout(() => {
                        $(".showEditIframe").remove();
                    }, 200);
                });
                socketMiddleware.on("web-webview-" + webId.toString(), async function (data) {

                    if (middlewareSecurity) {
                        data = JSON.parse(crypterMiddleware.decrypt(data));
                    }
                    triggerEvent({
                        senderId: webId,
                        channel: channel,
                        projectId: projectId,
                        data: data,
                        type: "webViewSubmit"
                    });
                    ce.processInput(data.text);
                    $(".showEditIframe").fadeOut(600);
                    setTimeout(() => {
                        $(".showEditIframe").remove();
                    }, 200);
                });
                String.prototype.replaceAll = function (search, replacement) {
                    let target = this;
                    return target.split(search).join(replacement);
                };
                function htmlInjectionPrevent(msg) {
                    if (msg) {
                        return msg.toString().replaceAll(/</g, "&lt;").replaceAll(/>/g, "&gt;");
                    } else {
                        return msg;
                    }
                }
                function boot() {
                    try {
                        if (inputQuery && cookie) {
                            let encryptedData = getLocalStorageData(localSavePassPhrase);
                            if (encryptedData) {
                                let decryptedArray = JSON.parse(crypterLocal.decrypt(encryptedData));
                                // console.log("DECRYPTED ARRAY")
                                // console.log(decryptedArray)
                                let flagCookie = false;
                                for (let dataElement of decryptedArray) {
                                    if (dataElement.trim().startsWith("<div class='pm-bxRightchat'")) {
                                        flagCookie = true;
                                        break;
                                    }
                                }
                                if (decryptedArray.length > 1 && flagCookie) {
                                    let htmlToBeAdded = "";
                                    for (let element of decryptedArray) {
                                        htmlToBeAdded += element;
                                    }
                                    chatArray = decryptedArray;
                                    $('body').on("click", "#jubi-continue-storage", function (e) {
                                        if (updateWebId) {
                                            readyState = true;
                                            updateWebId(webId);
                                        }
                                        document.getElementById('pm-permission-view').style.display = "none";
                                        document.getElementById('pm-secIframe').style.display = "block";
                                        pushToChatStart(htmlToBeAdded);
                                        $(".bxCheckOPtion").remove();
                                        setTimeout(() => {
                                            scrollUp();
                                        }, chatArray.length * 20);
                                        if (tags && tags.blockBot && humanAssistSwitch) {
                                            socketHuman.emit("assignAgentBackend", {
                                                data: {
                                                    senderId: webId,
                                                    bot: projectId
                                                },
                                                senderId: webId,
                                                projectId: projectId
                                            });
                                        }
                                    });
                                    $('body').on("click", "#jubi-start-fresh", function (e) {
                                        if (updateWebId) {
                                            readyState = true;
                                            updateWebId(webId);
                                        }
                                        invalidate(() => {}, true);
                                        clearAllLocalStorageData();
                                        chatArray = [];
                                        document.getElementById('pm-permission-view').style.display = "none";
                                        document.getElementById('pm-secIframe').style.display = "block";
                                        console.log(inputQuery);
                                        console.log(":::::::::::::::>>>>>>>>>>>");
                                        let ans = prepareJSONRequest(inputQuery);
                                        sendMessage(ans);
                                        scrollUp();
                                    });
                                    document.getElementById('pm-permission-view').style.display = "block";
                                    document.getElementById('pm-secIframe').style.display = "none";
                                    return;
                                }
                            }
                        }
                        throw new Error("Default start");
                    } catch (e) {
                        let startTheBot = () => {
                            if (updateWebId) {
                                readyState = true;
                                updateWebId(webId);
                            }
                            clearAllLocalStorageData();
                            chatArray = [];
                            document.getElementById('pm-permission-view').style.display = "none";
                            document.getElementById('pm-secIframe').style.display = "block";
                            console.log("Start Message");
                            console.log(inputQuery);
                            user.stages = undefined;
                            user.tracker = 0;
                            user.conversationId = undefined;
                            let ans = prepareJSONRequest(inputQuery);
                            sendMessage(ans);
                            scrollUp();
                        };
                        if (!window.runOnJubiStartEvent) {
                            console.log("Starting Bot now");
                            startTheBot();
                        } else {
                            console.log("Starting Bot later");
                            window.jubiStartEvent = startTheBot;
                        }
                    }
                }

                let run = window.askBot = function (answer, type) {
                    lastConversationSemaphore = true;
                    let str;
                    if (answer.startsWith("upload_file>")) {
                        str = showFile(answer);
                    } else {
                        str = showAnswer(answer);
                    }
                    if (str) {
                        pushToChat(str);
                    }
                    let ans = prepareJSONRequest(answer);
                    sendMessage(ans, type);
                    scrollUp();
                };

                //--voice-work
                // Stream Audio
                let bufferSize = 2048,
                    AudioContext,
                    context,
                    processor,
                    input,
                    globalStream,
                    recognizer,
                    wholeString,
                    lastActiveTimestamp,
                    recordSemaphore = false,
                    flush,
                    mute = true;

                try {
                    document.getElementById('jubi-unmuteVoice').style.display = "none";
                    if (voiceEnabled) {
                        document.getElementById('jubi-muteVoice').style.display = "block";
                    } else {
                        document.getElementById('jubi-muteVoice').style.display = "none";
                    }
                } catch (e) {}

                $("body").on('click', '#jubi-unmuteVoice', function (e) {
                    document.getElementById('jubi-unmuteVoice').style.display = "none";
                    document.getElementById('jubi-muteVoice').style.display = "block";
                    mute = true;
                    stopVoice();
                });
                $("body").on('click', '#jubi-muteVoice', function (e) {
                    document.getElementById('jubi-unmuteVoice').style.display = "block";
                    document.getElementById('jubi-muteVoice').style.display = "none";
                    mute = false;
                });

                let resultText = document.getElementById('jubi-result-text'),
                    removeLastSentence = true,
                    streamStreaming = false;

                const constraints = {
                    audio: true,
                    video: false
                };

                function clearSpeechText() {
                    wholeString = "";
                    while (resultText && resultText.firstChild) {
                        resultText.removeChild(resultText.firstChild);
                    }
                    document.getElementById('jubi-recording-text').style.display = "none";
                    document.getElementById("pm-buttonlock").style.paddingBottom = "0px";
                }
                //voice
                function hideVoice() {
                    try {
                        document.getElementById('pm-textInput').style.display = "block";
                        document.getElementById('jubi-textInput').style.display = "none";
                        document.getElementById('button-play-ws').setAttribute('disabled', 'disabled');
                        document.getElementById('button-stop-ws').setAttribute('disabled', 'disabled');
                    } catch (e) {
                        // console.log(e);
                    }
                }

                //voice ui -----------
                if (voiceEnabled) {
                    addVoiceListeners();
                }

                async function disconnectVoice() {
                    $("#jubi-bxinput").fadeIn(100);
                    $("#button-send").fadeIn(100);
                    $("#keyboard-icon").hide();
                    $("#voice-buttons").hide();
                    $("#jubi-answerBottom").focus();
                    $("#button-stop-ws").hide();
                    $("#button-play-ws").show();
                    recordSemaphore = false;
                    wholeString = "";
                    clearSpeechText();
                    await stopAllRecordings();
                }

                function showVoice() {

                    $("#jubi-bxinput").hide();
                    $("#button-send").hide();
                    $("#keyboard-icon").fadeIn(50);
                    $("#voice-buttons").fadeIn(50);
                }

                function addVoiceListeners() {
                    $("#keyboard-icon").click(disconnectVoice);
                    $("#jubi-graySend").click(function () {
                        if (voiceEnabled && online) {
                            showVoice();
                        }
                    });
                    $("#jubi-redSend").click(function () {
                        if (voiceEnabled && online) {
                            showVoice();
                        }
                    });
                    $("#button-play-ws").click(() => {
                        recordSemaphore = true;
                        speechToText();
                    });
                    $("#button-stop-ws").click(async () => {
                        recordSemaphore = false;
                        if (wholeString) {
                            run(wholeString, "speech");
                        }
                        clearSpeechText();
                        await stopAllRecordings();
                    });
                }

                function hideStop() {
                    $("#button-stop-ws").hide();
                    $("#button-play-ws").show();
                }

                function hidePlay() {
                    stopVoice();
                    $("#button-play-ws").hide();
                    $("#button-stop-ws").show();
                }

                //voice ui -----------

                //stop recording----

                function stopAllRecordings() {
                    return new Promise((resolve, reject) => {
                        try {
                            if (!online) {
                                return reject({ status: "offline" });
                            }
                            if (recognizer) {
                                recognizer.stop();
                                hideStop();
                                return resolve();
                            } else if (globalStream) {
                                streamStreaming = false;
                                socketVoice.emit('web-speech-to-text-stop', crypterTransit.encrypt({ webId: webId }));
                                let track = globalStream.getTracks()[0];
                                track.stop();
                                if (input) {
                                    input.disconnect(processor);
                                    processor.disconnect(context.destination);
                                    context.close().then(function () {
                                        input = null;
                                        processor = null;
                                        context = null;
                                        AudioContext = null;
                                        hideStop();
                                        return resolve();
                                    });
                                } else {
                                    hideStop();
                                    return resolve();
                                }
                            } else {
                                socketVoice.emit('web-speech-to-text-stop', crypterTransit.encrypt({ webId: webId }));
                                hideStop();
                                return resolve();
                            }
                        } catch (e) {
                            hideStop();
                            return reject(e);
                        }
                    });
                }

                //stop recording----


                //voice record------------------


                async function speechToText() {
                    try {
                        lastActiveTimestamp = new Date().getTime();
                        let interval = setInterval(async () => {
                            if (new Date().getTime() - lastActiveTimestamp > 15000) {
                                await stopAllRecordings();
                                clearInterval(interval);
                            }
                        }, 1000);
                        try {
                            await startRecordingOnBrowser();
                        } catch (e) {
                            await startRecordingFromAPI();
                        }
                        hidePlay();
                    } catch (e) {
                        // console.log(e);
                    }
                }

                function capitalize(s) {
                    if (s.length < 1) {
                        return s;
                    }
                    return s.charAt(0).toUpperCase() + s.slice(1);
                }

                function addTimeSettingsInterim(speechData) {
                    try {
                        wholeString = speechData.results[0].alternatives[0].transcript;
                    } catch (e) {
                        // console.log(e)
                        wholeString = speechData.results[0][0].transcript;
                    }

                    let nlpObject = window.nlp(wholeString).out('terms');

                    let words_without_time = [];

                    for (let i = 0; i < nlpObject.length; i++) {
                        //data
                        let word = nlpObject[i].text;
                        let tags = [];

                        //generate span
                        let newSpan = document.createElement('span');
                        newSpan.innerHTML = word;

                        //push all tags
                        for (let j = 0; j < nlpObject[i].tags.length; j++) {
                            tags.push(nlpObject[i].tags[j]);
                        }

                        //add all classes
                        for (let j = 0; j < nlpObject[i].tags.length; j++) {
                            let cleanClassName = tags[j];
                            // console.log(tags);
                            let className = `nl-${cleanClassName}`;
                            newSpan.classList.add(className);
                        }

                        words_without_time.push(newSpan);
                    }

                    finalWord = false;
                    // endButton.disabled = true;

                    return words_without_time;
                }

                function addTimeSettingsFinal(speechData) {
                    let words = [];
                    try {
                        wholeString = speechData.results[0].alternatives[0].transcript;
                        words = speechData.results[0].alternatives[0].words;
                    } catch (e) {
                        // console.log(e)
                        wholeString = speechData.results[0][0].transcript;
                    }
                    let nlpObject = window.nlp(wholeString).out('terms');

                    let words_n_time = [];

                    for (let i = 0; i < words.length; i++) {
                        //data
                        let word = words[i].word;
                        let startTime = `${words[i].startTime.seconds}.${words[i].startTime.nanos}`;
                        let endTime = `${words[i].endTime.seconds}.${words[i].endTime.nanos}`;
                        let tags = [];

                        //generate span
                        let newSpan = document.createElement('span');
                        newSpan.innerHTML = word;
                        newSpan.dataset.startTime = startTime;

                        //push all tags
                        for (let j = 0; j < nlpObject[i].tags.length; j++) {
                            tags.push(nlpObject[i].tags[j]);
                        }

                        //add all classes
                        for (let j = 0; j < nlpObject[i].tags.length; j++) {
                            let cleanClassName = nlpObject[i].tags[j];
                            // console.log(tags);
                            let className = `nl-${cleanClassName}`;
                            newSpan.classList.add(className);
                        }

                        words_n_time.push(newSpan);
                    }

                    return words_n_time;
                }

                function startRecordingOnBrowser() {
                    return new Promise(async (resolve, reject) => {
                        // return reject()
                        window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition || null;
                        if (window.SpeechRecognition === null) {
                            return reject();
                        } else {
                            recognizer = new window.SpeechRecognition();
                            recognizer.continuous = false;
                            recognizer.interimResults = true;
                            recognizer.lang = "en-IN";
                            recognizer.onresult = getResults;
                            try {
                                recognizer.start();
                            } catch (ex) {
                                // console.log(ex)
                                await stopAllRecordings();
                            }
                            recognizer.onerror = async function (event) {
                                // console.log(event)
                                await stopAllRecordings();
                            };
                            return resolve();
                        }
                    });
                }

                socketVoice.on('speech-data', data => {
                    data = crypterTransit.decrypt(data);
                    getResults(data);
                });

                function startRecordingFromAPI() {
                    function microphoneProcess(e) {
                        let left = e.inputBuffer.getChannelData(0);
                        let left16 = downsampleBuffer(left, 44100, 16000);
                        if (online) {
                            socketVoice.emit('web-speech-to-text-binary-data', { c: left16 });
                        }
                        function downsampleBuffer(buffer, sampleRate, outSampleRate) {
                            if (outSampleRate == sampleRate) {
                                return buffer;
                            }
                            if (outSampleRate > sampleRate) {
                                throw "downsampling rate show be smaller than original sample rate";
                            }
                            let sampleRateRatio = sampleRate / outSampleRate;
                            let newLength = Math.round(buffer.length / sampleRateRatio);
                            let result = new Int16Array(newLength);
                            let offsetResult = 0;
                            let offsetBuffer = 0;
                            while (offsetResult < result.length) {
                                let nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);
                                let accum = 0,
                                    count = 0;
                                for (let i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {
                                    accum += buffer[i];
                                    count++;
                                }

                                result[offsetResult] = Math.min(1, accum / count) * 0x7FFF;
                                offsetResult++;
                                offsetBuffer = nextOffsetBuffer;
                            }
                            return result.buffer;
                        }
                    }
                    window.onbeforeunload = function () {
                        if (streamStreaming && online) {
                            socketVoice.emit('web-speech-to-text-stop', crypterTransit.encrypt({ webId: webId }));
                        }
                    };
                    return new Promise(async (resolve, reject) => {
                        try {
                            if (!online) {
                                return reject({ status: "offline" });
                            }
                            socketVoice.emit('web-speech-to-text-start', crypterTransit.encrypt({ webId: webId })); //init socket Google Speech Connection
                            streamStreaming = true;
                            AudioContext = window.AudioContext || window.webkitAudioContext;
                            context = new AudioContext();
                            processor = context.createScriptProcessor(bufferSize, 1, 1);
                            processor.connect(context.destination);
                            context.resume();
                            let handleSuccess = function (stream) {
                                globalStream = stream;
                                input = context.createMediaStreamSource(stream);
                                if (input) {
                                    input.connect(processor);
                                    processor.onaudioprocess = function (e) {
                                        microphoneProcess(e);
                                        return resolve();
                                    };
                                }
                            };
                            navigator.mediaDevices.getUserMedia(constraints).then(handleSuccess).catch(e => {
                                // console.log(e);
                                return reject(e);
                            });
                        } catch (e) {
                            return reject(e);
                        }
                    });
                }

                async function getResults(data) {
                    // console.log("RESPONSE")
                    // console.log(data.results)
                    document.getElementById('jubi-recording-text').style.display = "block";
                    lastActiveTimestamp = new Date().getTime();
                    let dataFinal = undefined || data.results[0].isFinal;
                    if (dataFinal === false) {
                        if (removeLastSentence) {
                            resultText.lastElementChild.remove();
                        }
                        removeLastSentence = true;

                        //add empty span
                        let empty = document.createElement('span');
                        resultText.appendChild(empty);

                        //add children to empty span
                        let edit = addTimeSettingsInterim(data);

                        for (let i = 0; i < edit.length; i++) {
                            resultText.lastElementChild.appendChild(edit[i]);
                            resultText.lastElementChild.appendChild(document.createTextNode('\u00A0'));
                        }
                        let height = parseInt($("#jubi-recording-text").height()) + 10;
                        document.getElementById("pm-buttonlock").style.paddingBottom = height + "px";
                        scrollUp();
                    } else if (dataFinal === true) {
                        if (resultText.lastElementChild) {
                            resultText.lastElementChild.remove();
                        }
                        //add empty span
                        let empty = document.createElement('span');
                        resultText.appendChild(empty);

                        //add children to empty span
                        let edit = addTimeSettingsFinal(data);
                        for (let i = 0; i < edit.length; i++) {
                            if (i === 0) {
                                edit[i].innerText = capitalize(edit[i].innerText);
                            }
                            resultText.lastElementChild.appendChild(edit[i]);

                            if (i !== edit.length - 1) {
                                resultText.lastElementChild.appendChild(document.createTextNode('\u00A0'));
                            }
                        }
                        resultText.lastElementChild.appendChild(document.createTextNode('\u00A0'));
                        // console.log(wholeString);
                        // console.log("Google Speech sent 'final' Sentence.");

                        finalWord = true;
                        removeLastSentence = false;
                        run(wholeString, "speech");
                        clearSpeechText();
                        await stopAllRecordings();
                    }
                    // console.log("HEIGHT")
                    // console.log($("#jubi-recording-text").height())
                }

                //voice record------------------


                //speech out-------
                async function textToSpeech(text) {
                    try {
                        await stopAllRecordings();
                    } catch (e) {
                        // console.log(e);
                    }
                    try {
                        let postSpeech;
                        // try{
                        //     postSpeech=await convertAndPlaySpeechOnBrowser(text);
                        // }
                        // catch(e){
                        postSpeech = await convertAndPlaySpeechFromAPI(text);
                        // }
                        afterVoiceOut(postSpeech);
                    } catch (e) {
                        // console.log(e);
                    }
                }

                function afterVoiceOut(e) {
                    if (recordSemaphore) {
                        speechToText();
                        hidePlay();
                    }
                }

                function stopVoice() {
                    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition || null;
                    // if(window.SpeechRecognition != null&&responsiveVoice&&responsiveVoice.voiceSupport()){
                    //     responsiveVoice.cancel();
                    // }
                    if (flush && isPlaying(flush)) {
                        flush.pause();
                        flush.currentTime = 0;
                    }
                }
                $(document).on('click', 'body *', function () {
                    stopVoice();
                });
                $(document).on('keypress', "body *", function () {
                    stopVoice();
                });

                // function convertAndPlaySpeechOnBrowser(text){
                //     return new Promise(async(resolve,reject)=>{
                //         try{
                //             window.SpeechRecognition = window.SpeechRecognition||window.webkitSpeechRecognition || null;
                //             if (window.SpeechRecognition === null) {
                //                 return reject()
                //             }
                // if(responsiveVoice.voiceSupport()){
                //     responsiveVoice.speak(text, window.speechOnBrowser||"Hindi Female", {onstart: ()=>{}, onend: (data)=>{
                //         return resolve(data)
                //     }});
                // }
                // else{
                //     return reject("no web support");
                // }
                //         }
                //         catch(e){
                //             // console.log(e);
                //             return reject(e);
                //         }
                //     });

                // }

                function isPlaying(audelem) {
                    return !audelem.paused;
                }

                function convertAndPlaySpeechFromAPI(text) {

                    return new Promise((resolve, reject) => {
                        if (!online) {
                            return reject({ status: "offline" });
                        }
                        let uid = IDGenerator(20);
                        let requestData = {
                            data: { text: text,
                                gender: speechGenderBackend || "FEMALE",
                                languageCode: speechLanguageCodeBackend || "en-US"
                            },
                            webId: webId,
                            requestId: uid
                        };
                        socketVoice.emit("web-text-to-speech", crypterTransit.encrypt(requestData));
                        socketVoice.on("web-text-to-speech-" + webId + "-" + uid, data => {
                            // console.log(data)
                            data = crypterTransit.decrypt(data);
                            playVoiceFromAPI(data);
                        });
                        function playVoiceFromAPI(speech) {
                            // speech = JSON.parse(crypterTransit.decrypt(speech))
                            if (speech.error) {
                                return reject(speech.error);
                            }
                            if (speech.status == "success") {
                                if (!flush || !isPlaying(flush)) {
                                    flush = new Audio(speech.url);
                                    flush.play();
                                    flush.onended = () => {
                                        return resolve(speech);
                                    };
                                } else {
                                    setTimeout(playVoiceFromAPI, 500, speech);
                                }
                            } else {
                                return reject(speech);
                            }
                        }
                    });
                }

                //speech out-------


                function getAllText(message) {
                    let str = "";
                    for (let element of message) {
                        if (element.type == "text") {
                            str += element.value;
                        }
                    }
                    str = str.replace(/\|br\|/g, "");
                    str = str.replace(/\|break\|/g, "");
                    return str.replace(/([\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2694-\u2697]|\uD83E[\uDD10-\uDD5D])/g, ' ');
                }

                function scrollUp() {
                    $("#pm-data").animate({ scrollTop: $("#pm-buttonlock").height() }, '1000000');

                    if ($("#pm-buttonlock").height() > $("#pm-data").height() && $("#pm-buttonlock").height() > 0) {
                        $("#pm-data").css("display", "block");
                    }
                }

                function postReply(res) {
                    if (voiceEnabled && online && !mute) {
                        textToSpeech(getAllText(res.botMessage));
                    }
                    //console.log(JSON.stringify(res, null, 3))
                    $(".pm-bxCheckOPtion").remove();
                    $(".pm-bxCheckOPtionUrl").remove();
                    $(".answer").parent().parent().remove();
                    let answerType = res.answerType;
                    let count = res.botMessage.length;
                    gender = res.gender;
                    profile = res.profile;
                    let i = 0;
                    let incrementDelay = 0;
                    let totalDelay = 0;
                    let delayPop = delayMaster;
                    let sleepDelay = delayMaster * (3 / 4);
                    let delay = delayMaster * (1 / 10);
                    if (semaphoreForFirstChatLoad) {
                        semaphoreForFirstChatLoad = false;
                    } else {
                        if (!document.getElementById("bxloadgif")) {
                            let loader = prepareChatBotLoader();
                            $(".pm-bxChat").append(loader);
                            scrollUp();
                        }
                    }
                    show_replies();
                    function show_replies() {
                        setTimeout(function () {
                            let chatBotReponse = "";
                            if (res.botMessage[i].value == "CLOSE_IFRAME_ASAP") {
                                $(".showEditIframe").fadeOut(600);
                                setTimeout(() => {
                                    $(".showEditIframe").remove();
                                }, 200);
                                res.botMessage.splice(i, 1);
                            } else if (res.botMessage[i].type == "text" && res.botMessage[i].value !== "") {
                                let url = res.botMessage[i].value.match(/(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9]\.[^\s]{2,})/);
                                if (url) {
                                    res.botMessage[i].value = res.botMessage[i].value.replaceAll(url[0], "<a target='_blank' href='" + url[0] + "'>" + url[0] + "</a>");
                                }
                                if (i == 0 && lastConversationSemaphore) {
                                    chatBotReponse = prepareChatBotFirstReply(res.botMessage[i].value);
                                    if (backendResponse && booleanHideShow != true) {
                                        backendResponse = parseInt(backendResponse) + 1;
                                    }
                                } else {
                                    chatBotReponse = prepareChatBotReply(res.botMessage[i].value);
                                    if (backendResponse && booleanHideShow != true) {
                                        backendResponse = parseInt(backendResponse) + 1;
                                    }
                                }
                                i++;
                            } else if (res.botMessage[i].type == "image") {
                                if (i == 0 && lastConversationSemaphore) {
                                    chatBotReponse = prepareChatBotFirstImageReply(res.botMessage[i].value);
                                    if (backendResponse && booleanHideShow != true) {
                                        backendResponse = parseInt(backendResponse) + 1;
                                    }
                                } else {
                                    chatBotReponse = prepareChatBotImageReply(res.botMessage[i].value);
                                    if (backendResponse && booleanHideShow != true) {
                                        backendResponse = parseInt(backendResponse) + 1;
                                    }
                                }
                                i++;
                            } else if (res.botMessage[i].type == "video") {
                                // console.log(res.botMessage[i].type + res.botMessage[i].value + "****")
                                // console.log(lastConversationSemaphore);
                                if (i == 0 && lastConversationSemaphore) {
                                    chatBotReponse = prepareFirstVideoReply(res.botMessage[i].value);
                                    if (backendResponse && booleanHideShow != true) {
                                        backendResponse = parseInt(backendResponse) + 1;
                                    }
                                } else {
                                    chatBotReponse = prepareVideoReply(res.botMessage[i].value);
                                    if (backendResponse && booleanHideShow != true) {
                                        backendResponse = parseInt(backendResponse) + 1;
                                    }
                                }
                                i++;
                            } else if (res.botMessage[i].type == "file" || res.botMessage[i].type == "audio") {
                                if (i == 0 && lastConversationSemaphore) {
                                    chatBotReponse = prepareFirstFileReply(res.botMessage[i].value);
                                    if (backendResponse && booleanHideShow != true) {
                                        backendResponse = parseInt(backendResponse) + 1;
                                    }
                                } else {
                                    chatBotReponse = prepareFileReply(res.botMessage[i].value);
                                    if (backendResponse && booleanHideShow != true) {
                                        backendResponse = parseInt(backendResponse) + 1;
                                    }
                                }
                                i++;
                            } else {
                                res.botMessage.splice(i, 1);
                            }
                            if (chatBotReponse) {
                                pushToChat(chatBotReponse);
                            }
                            scrollUp();
                            function sleep(ms) {
                                let start = new Date().getTime();
                                let end = start;
                                while (end < start + ms) {
                                    end = new Date().getTime();
                                }
                            }
                            function delayResponse() {
                                if (i < res.botMessage.length) {
                                    sleep(sleepDelay);
                                }
                                if (i < res.botMessage.length - 1 && !document.getElementById("bxloadgif")) {
                                    let loader = prepareChatBotLoader();
                                    $(".pm-bxChat").append(loader);
                                }

                                if (i == res.botMessage.length) {
                                    lastConversationSemaphore = false;
                                    if (res.options) {
                                        pushToChat(prepareUserInput(res.answerType, res.options));
                                    }

                                    return false;
                                } else {
                                    show_replies();
                                }
                            }

                            delayResponse();
                        }, delayPop);
                    }
                    msgIndex++;
                }
                function prepareUserInput(questionType, options) {
                    if (questionType == 'option') {
                        let str = optionStart();
                        for (let i = 0; i < options.length; i++) {
                            str = str + "<li><a href='javascript:void(0);' data-id='" + htmlInjectionPrevent(options[i].text) + "'  inner-id='" + htmlInjectionPrevent(options[i].data) + "' class='question-options'>" + htmlInjectionPrevent(options[i].text) + "</a></li>";
                        }

                        str = str + optionEnd();
                        return str;
                    } else if (questionType == 'persist-option') {
                        let str = optionPersistStart();
                        for (let i = 0; i < options.length; i++) {
                            if (options[i].type == "url") {
                                str = str + "<li><a href='" + htmlInjectionPrevent(options[i].data) + "' target='_blank' data-id='" + htmlInjectionPrevent(options[i].text) + "'  inner-id='" + htmlInjectionPrevent(options[i].text) + "' class='question-options-persist-url'>" + htmlInjectionPrevent(options[i].text) + "</a></li>";
                            } else if (options[i].type == "webView") {
                                str = str + "<li><a href='javascript:void(0);' data-id='" + htmlInjectionPrevent(options[i].text) + "'  inner-id='" + htmlInjectionPrevent(options[i].data) + "' class='question-options-persist-webView'>" + htmlInjectionPrevent(options[i].text) + "</a></li>";
                            } else {
                                str = str + "<li><a href='javascript:void(0);' data-id='" + htmlInjectionPrevent(options[i].text) + "'  inner-id='" + htmlInjectionPrevent(options[i].data) + "' class='question-options-persist'>" + htmlInjectionPrevent(options[i].text) + "</a></li>";
                            }
                        }

                        str = str + optionEnd();
                        return str;
                    } else if (questionType = "generic") {
                        let str = buildGeneric(options);
                        // console.log(str)
                        setTimeout(function () {
                            slidebx();
                        }, 0);
                        return str;
                    }
                }
                function pushToChatStart(str) {
                    $(".pm-bxChat").append(str);
                    // $(".pm-bxLeftchat:last-child").animate({ "opacity": "show", bottom: "10" }, 800);
                    // $(".pm-bxRightchat:last-child").animate({ "opacity": "show", bottom: "10" }, 800);
                    // $(".pm-bxCheckOPtionPersist:last-child").hide();
                    // $(".pm-bxCheckOPtionPersist:last-child").animate({ "opacity": "show", bottom: "40" }, 800);
                }
                function pushToChat(str) {
                    $("#pm-bxloadgif").remove();
                    $("#pm-bxloadgif").animate({ "opacity": "hide", bottom: "10" }, 300);
                    $(".pm-bxChat").append(str);
                    $(".pm-bxLeftchat:last-child").animate({ "opacity": "show", bottom: "10" }, 800);
                    $(".pm-bxRightchat:last-child").animate({ "opacity": "show", bottom: "10" }, 800);
                    $(".pm-bxCheckOPtionPersist:last-child").hide();
                    $(".pm-bxCheckOPtionPersist:last-child").animate({ "opacity": "show", bottom: "40" }, 800);
                    chatArray.push(str);
                    // console.log(chatArray);
                    setLocalStorageData(localSavePassPhrase, crypterLocal.encrypt(JSON.stringify(chatArray)));
                    setLocalStorageData("webId_" + localSavePassPhrase, crypterLocal.encrypt(JSON.stringify({ id: webId })));
                }
                function pushToView(str) {
                    $("#pm-mainSec").append(str);
                }

                function prepareJSONRequest(answer) {
                    return {
                        text: answer
                    };
                }
                function genericStart() {
                    return '<div class="pm-owlsliderbx"><div class="slider-inner pm-slider-inner"><div  class="owl-carousel owl-theme">';
                }
                function replaceAll(str, find, replace) {
                    if (typeof str == "string") {
                        return str.replace(new RegExp(find, 'g'), replace);
                    }
                    return str;
                }
                function buildGeneric(data) {
                    let html = '';
                    if (data && data.length > 0 && data[0].buttons && data[0].buttons.length > 0) {
                        html = genericStart();
                        for (let i = 0; i < data.length; i++) {
                            html += '<div class="item">';
                            if (data[i].image) {
                                html += '<div class="pm-slideImage"><img src="' + data[i].image + '"></div>';
                            }
                            html += '<div class="pm-sliderContent">';
                            if (data[i].title) {
                                html += '<h5> ' + data[i].title + '</h5>';
                            }
                            if (data[i].text) {
                                // console.log(data[i].text)
                                html += '<p>' + data[i].text.replaceAll("|br|", "<br/>") + '</p>';
                            }
                            html += '</div><div class="pm-bxslidebtn">';
                            for (let j = 0; j < data[i].buttons.length; j++) {
                                let options = data[i].buttons[j];
                                options.text = replaceAll(options.text, "'", " ");
                                options.data = replaceAll(options.data, '"', " ");
                                if (options.type == "url") {
                                    html += "<a href='" + options.data + "' target='_blank' data-id='" + htmlInjectionPrevent(data[i].title) + "' inner-id='" + htmlInjectionPrevent(options.data) + "' class='question-options-url'>" + htmlInjectionPrevent(options.text) + "</a> ";
                                } else {
                                    html += "<a href='javascript:void(0);' data-id='" + htmlInjectionPrevent(data[i].title) + "' inner-id='" + htmlInjectionPrevent(options.data) + "' class='question-options'>" + htmlInjectionPrevent(options.text) + "</a> ";
                                }
                            }
                            html += '</div>';
                            html += '</div>';
                        }

                        html += genericEnd();
                    }
                    return html;
                }
                function genericEnd() {
                    return '</div></div></div>';
                }
                function prepareChatBotReply(msg) {
                    return "<div class='pm-bxLeftchat ' style='visibility: visible;'>" + "<div class='pm-leftInput' >" + "<p>" + msg.replaceAll("|br|", "<br/>") + "</p>" + "<div class='pm-pointLeftchat'>" + "</div>" + "</div><div class='clearfix'></div>" + "</div>";
                }
                function prepareChatBotFirstReply(msg) {
                    return "<div class='pm-bxLeftchat ' style='visibility: visible;'>" + "<div class='pm-leftUserimg'>" + "<img src='" + modal.static.images.botIcon + "' class='img-responsive'>" + "</div>" + "<div class='pm-leftInput' >" + "<div class='pm-arrowLeftchat pm-arrow-left'></div>" + "<p>" + msg.replaceAll("|br|", "<br/>") + "</p>" + "<div class='pm-pointLeftchat'>" + "</div>" + "</div><div class='clearfix'></div>" + "</div>";
                }
                function prepareFirstFileReply(msg) {
                    return "<div class='pm-bxLeftchat ' style='visibility: visible; '>" + "<div class='pm-leftUserimg'>" + "<img src='" + modal.static.images.botIcon + "' class='img-responsive'>" + "</div>" + "<div class='pm-leftInput'>" + "<div class='pm-arrowLeftchat pm-arrow-left'></div>" + "<div class='pm-postImg'>" + "<a href='" + msg + "' target='_blank'><img src='" + attachmentUrl + "'  class='img-responsive'/></a>" + "</div>" + "<div class='pm-pointLeftchat'>" + "</div>" + "</div><div class='clearfix'></div>" + "</div>";
                }
                function prepareFileReply(msg) {
                    return "<div class='pm-bxLeftchat ' style='visibility: visible;'>" + "<div class='pm-leftInput'>" + "<div class='pm-postImg'>" + "<a href='" + msg + "' target='_blank'><img src='" + attachmentUrl + "'  class='img-responsive'/></a>" + "</div>" + "<div class='pm-pointLeftchat'>" + "</div>" + "</div><div class='clearfix'></div>" + "</div>";
                }
                function prepareChatBotFirstImageReply(msg) {
                    return "<div class='pm-bxLeftchat ' style='visibility: visible; '>" + "<div class='pm-leftUserimg'>" + "<img src='" + modal.static.images.botIcon + "' class='img-responsive'>" + "</div>" + "<div class='pm-leftInput'>" + "<div class='pm-arrowLeftchat pm-arrow-left'></div>" + "<div class='pm-postImg'>" + "<a href='" + msg + "' target='_blank'><img src='" + msg + "'  class='img-responsive'/></a>" + "</div>" + "<div class='pm-pointLeftchat'>" + "</div>" + "</div><div class='clearfix'></div>" + "</div>";
                }
                function prepareChatBotImageReply(msg) {
                    return "<div class='pm-bxLeftchat ' style='visibility: visible;'>" + "<div class='pm-leftInput'>" + "<div class='pm-postImg'>" + "<a href='" + msg + "' target='_blank'><img src='" + msg + "'  class='img-responsive'/></a>" + "</div>" + "<div class='pm-pointLeftchat'>" + "</div>" + "</div><div class='clearfix'></div>" + "</div>";
                }
                function prepareFirstVideoReply(msg) {
                    return "<div class='pm-bxLeftchat ' style='visibility: visible; '>" + "<div class='pm-leftUserimg'>" + "<img src='" + modal.static.images.botIcon + "' class='img-responsive'>" + "</div>" + "<div class='pm-leftInput'>" + "<div class='pm-arrowLeftchat pm-arrow-left'></div>" + ' <iframe   src="' + msg + '" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>' + "<div class='pm-pointLeftchat'>" + "</div>" + "</div><div class='clearfix'></div>" + "</div>";
                }
                function prepareVideoReply(msg) {
                    return "<div class='pm-bxLeftchat ' style='visibility: visible;'>" + "<div class='pm-leftInput'>" + ' <iframe   src="' + msg + '" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>' + "<div class='pm-pointLeftchat'>" + "</div>" + "</div><div class='clearfix'></div>" + "</div>";
                }
                function prepareChatBotLoader() {
                    return "<div id='pm-bxloadgif' class='pm-bxuser_question pm-bxloadgif ' style='visibility: visible;'><div class='pm-leftInputGif'><div class='pm-leftUserimg'><img src='" + modal.static.images.botIcon + "' class='img-responsive'></div><div class='pm-innerloadgif'>" + "<img src='" + modal.static.images.loaderBotChat + "' />" + "</div></div></div>";
                }
                function showWebView(url) {
                    return '<div class="showEditIframe" id="iframeView">' + '<div class="closeIframeBtn"><img src="' + modal.static.images.closeWebView + '" class="img-responsive"></div>' + '<iframe src="' + url + '" frameborder="0" -webkit-overflow-scrolling:="" touch;="" allowfullscreen="" style="overflow:hidden;"></iframe>' + '</div>';
                }
                function showFile(answer) {
                    let arr = answer.split(">");
                    if (arr.length == 2) {
                        let isImage = checkForImage(arr[1]);
                        let imageUrl = htmlInjectionPrevent(arr[1]);
                        if (isImage) {
                            return "<div class='pm-bxRightchat' style='visibility: visible;'>" + "<div class='pm-rightInput'>" + "<div class='pm-arrowRightchat pm-arrow-right'></div>" + "<a href='" + imageUrl + "' target='_blank'><img src='" + imageUrl + "'  class='img-responsive'/></a>" + "<div class='pm-pointRightchat'>" + "</div>" + "<div class='clearfix'></div>" + "</div>" + "<div class='pm-rightUserimg'>" + "<img src='" + modal.static.images.userIcon + "' class='img-responsive'>" + "</div>" + "<div class='clearfix'></div>" + "</div>";
                        } else {
                            return "<div class='pm-bxRightchat' style='visibility: visible;'>" + "<div class='pm-rightInput'>" + "<div class='pm-arrowRightchat pm-arrow-right'></div>" + "<a href='" + imageUrl + "' target='_blank'><img src='" + attachmentUrl + "'  class='img-responsive'/></a>" + "<div class='pm-pointRightchat'>" + "</div>" + "<div class='clearfix'></div>" + "</div>" + "<div class='pm-rightUserimg'>" + "<img src='" + modal.static.images.userIcon + "' class='img-responsive'>" + "</div>" + "<div class='clearfix'></div>" + "</div>";
                        }
                    } else {
                        return;
                    }
                }
                function checkForImage(url) {
                    return url.match(/\.(jpeg|jpg|gif|png)$/) != null;
                }
                function showAnswer(answer) {
                    return "<div class='pm-bxRightchat' style='visibility: visible;'>" + "<div class='pm-rightInput'>" + "<div class='pm-arrowRightchat pm-arrow-right'></div>" + "<p>" + htmlInjectionPrevent(answer) + "</p>" + "<div class='pm-pointRightchat'>" + "</div>" + "<div class='clearfix'></div>" + "</div>" + "<div class='pm-rightUserimg'>" + "<img src='" + modal.static.images.userIcon + "' class='img-responsive'>" + "</div>" + "<div class='clearfix'></div>" + "</div>";
                }
                function showMaleAnswer(answer) {
                    return "<div class='pm-bxRightchat' style='visibility: visible; '>" + "<div class='pm-rightInput'>" + "<div class='pm-arrowRightchat pm-arrow-right'></div>" + "<p>" + htmlInjectionPrevent(answer) + "</p>" + "<div class='pm-pointRightchat'>" + "</div>" + "<div class='clearfix'></div>" + "</div>" + "<div class='pm-rightUserimg'>" + "<img src='" + modal.static.images.userIcon + "' class='img-responsive'>" + "</div>" + "<div class='clearfix'></div>" + "</div>";
                }
                function showFemaleAnswer(answer) {

                    return "<div class='pm-bxRightchat' style='visibility: visible; '>" + "<div class='pm-rightInput'>" + "<div class='pm-arrowRightchat pm-arrow-right'></div>" + "<p>" + htmlInjectionPrevent(answer) + "</p>" + "<div class='pm-pointRightchat'>" + "</div>" + "<div class='clearfix'></div>" + "</div>" + "<div class='pm-rightUserimg'>" + "<img src='" + modal.static.images.userFemaleIcon + "' class='img-responsive'>" + "</div>" + "<div class='clearfix'></div>" + "</div>";
                }
                function optionStart() {
                    return "<div class='pm-bxCheckOPtion' style='visibility: visible; '>" + "<ul >";
                }
                function optionPersistStart() {
                    return "<div class='pm-bxCheckOPtionPersist' style='visibility: visible; '>" + "<ul >";
                }
                function optionEnd() {
                    return "</ul></div>";
                }
                function showProfileAnswer(answer) {
                    return "<div class='pm-bxRightchat' style='visibility: visible;'>" + "<div class='pm-rightInput'>" + "<div class='pm-arrowRightchat pm-arrow-right'></div>" + "<p>" + htmlInjectionPrevent(answer) + "</p>" + "<div class='pm-pointRightchat'>" + "</div>" + "<div class='clearfix'></div>" + "</div>" + "<div class='pm-rightUserimg'>" + "<img style='border-radius: 100px;' src='" + profile + "' class='img-responsive'>" + "</div>" + "<div class='clearfix'></div>" + "</div>";
                }
                function prepareTextInputProfileBox() {
                    return "<div class='pm-anwser-div pm-bxRightchat' style='visibility: visible; '>" + "<div class='pm-rightInput'>" + "<div class='pm-arrowRightchat pm-arrow-right'></div>" + "<input class='form-control input-lg answer' data-id='" + msgIndex.toString() + "' autofocus='autofocus' type='text' placeholder='Type and hit enter'>" + "<div class='pm-pointRightchat'>" + "</div>" + "<div class='clearfix'></div>" + "</div>" + "<div class='pm-rightUserimg'>" + "<img style='border-radius: 100px;' src='" + profile + "' class='img-responsive'>" + "</div>" + "<div class='clearfix'></div>" + "</div>";
                }
                function sendMessage(data, type) {
                    $(".pm-bxCheckOPtion").remove();
                    $(".pm-bxCheckOPtionUrl").remove();
                    $(".answer").parent().parent().remove();
                    if (tags && !tags.blockBot) {
                        // console.log(JSON.stringify(data, null, 3))
                        deviceInfo.inputType = type || "text";
                        if (!document.getElementById("bxloadgif")) {
                            let loader = prepareChatBotLoader();
                            $(".pm-bxChat").append(loader);
                        }
                        scrollUp();
                        setTimeout(_ => {
                            $("#pm-bxloadgif").remove();
                            $("#pm-bxloadgif").animate({ "opacity": "hide", bottom: "10" }, 300);
                        }, 5000);
                    }

                    setTimeout(() => {
                        data.text = currentButtonContext[data.text.toLowerCase().trim()] || data.text;
                        ce.processInput(data.text);
                    }, 100);
                }
                function slidebx() {
                    let count = 0;
                    $('.owl-carousel').each(function () {
                        $(this).attr('id', 'owl-demo' + count);
                        $('#owl-demo' + count).owlCarousel({
                            items: 2,
                            // singleItem:true,
                            // itemsDesktop: [1000, 1], 
                            // itemsDesktopSmall: [900, 1], 
                            // itemsTablet: [700, 1], 
                            // itemsMobile: [479, 1], 
                            navigation: true,
                            navigation: !0,
                            navigationText: ["&#8249", "&#8250"],
                            nav: true,
                            responsiveClass: true,
                            responsive: {
                                0: {
                                    items: 2
                                },
                                700: {
                                    items: 2
                                },
                                900: {
                                    items: 2
                                },
                                1300: {
                                    items: 2
                                }
                            }

                        });
                        count++;
                    });
                }

                $('body').on("change", ".jubi-file-upload", function (e) {
                    let input = e.target;
                    if (input.files && input.files[0]) {
                        let reader = new FileReader();
                        reader.readAsDataURL(input.files[0]);
                        reader.onloadend = function () {
                            let data = {
                                file: this.result,
                                webId: new Date().getTime()
                            };
                            if (online) {
                                socketUpload.emit('file', crypterTransit.encrypt(JSON.stringify(data)));
                                socketUpload.on('upload-complete-' + data.webId, function (data) {
                                    data = JSON.parse(crypterTransit.decrypt(data));
                                    // console.log(JSON.stringify(data))
                                    if (data.url) {
                                        run("upload_file>" + data.url, "file");
                                    }
                                });
                            }
                        };
                    } else {
                        let files = !!this.files ? this.files : [];
                        if (!files.length || !window.FileReader) return;
                        if (/^image/.test(files[0].type)) {
                            let reader = new FileReader();
                            reader.readAsDataURL(files[0]);
                            reader.onloadend = function () {
                                let data = {
                                    file: this.result,
                                    webId: webId
                                };
                                if (online) {
                                    socketUpload.emit('file', crypterTransit.encrypt(JSON.stringify(data)));
                                    socketUpload.on('upload-complete-' + data.webId, function (data) {
                                        data = JSON.parse(crypterTransit.decrypt(data));
                                        // console.log(JSON.stringify(data))
                                        run("upload_file>" + data.url, "file");
                                    });
                                }
                            };
                        }
                    }
                });

                $("body").on('click', '.question-options-persist-webView', function (e) {
                    let url = $(this).attr('inner-id');
                    let str = showWebView(url);
                    scrollUp();
                    pushToView(str);
                });
                $("body").on('click', ".closeIframeBtn", function (e) {
                    $(".showEditIframe").fadeOut(600);
                    setTimeout(() => {
                        $(".showEditIframe").remove();
                    }, 1000);
                });
                $(".pm-menu_val").click(function (e) {
                    let answer = $(this).text();
                    if (answer.trim() != "") {
                        lastConversationSemaphore = true;
                        $(".pm-bxCheckOPtion").remove();
                        $(".pm-bxCheckOPtionUrl").remove();
                        let str = null;
                        if (profile) {
                            str = showProfileAnswer(answer);
                        } else if (gender && gender == "male") {
                            str = showMaleAnswer(answer);
                        } else if (gender && gender == "female") {
                            str = showFemaleAnswer(answer);
                        } else {
                            str = showAnswer(answer);
                        }
                        scrollUp();
                        pushToChat(str);
                        let ans1 = prepareJSONRequest(answer);
                        sendMessage(ans1);
                    }
                });
                $("body").on('click', '.bxgetthefull', function (e) {
                    lastConversationSemaphore = true;
                    let inner = $(this).attr('inner-id');
                    let answer = $(this).attr('data-id');
                    $(".pm-bxCheckOPtion").remove();
                    $(".answer").parent().parent().remove();

                    let str = null;
                    if (profile) {
                        str = showProfileAnswer(answer);
                    } else if (gender && gender == "male") {
                        str = showMaleAnswer(answer);
                    } else if (gender && gender == "female") {
                        str = showFemaleAnswer(answer);
                    } else {
                        str = showAnswer(answer);
                    }
                    scrollUp();
                    pushToChat(str);
                    let ans1 = prepareJSONRequest(inner);
                    sendMessage(ans1);
                });
                $("body").on('click', '.question-options', function (e) {
                    if (e.originalEvent && e.originalEvent.isTrusted) {
                        lastConversationSemaphore = true;
                        let inner = $(this).attr('inner-id');
                        let answer = $(this).attr('data-id');
                        $(".bxCheckOPtion").remove();
                        $(".answer").parent().parent().remove();

                        let str = null;
                        if (profile) {
                            str = showProfileAnswer(answer);
                        } else if (gender && gender == "male") {
                            str = showMaleAnswer(answer);
                        } else if (gender && gender == "female") {
                            str = showFemaleAnswer(answer);
                        } else {
                            str = showAnswer(answer);
                        }
                        scrollUp();
                        pushToChat(str);
                        let ans1 = prepareJSONRequest(inner);
                        sendMessage(ans1);
                    }
                });
                $("body").on('click', '.question-options-persist', function (e) {
                    if (e.originalEvent && e.originalEvent.isTrusted) {
                        lastConversationSemaphore = true;
                        let inner = $(this).attr('inner-id');
                        let answer = $(this).attr('data-id');
                        let str = null;
                        if (profile) {
                            str = showProfileAnswer(answer);
                        } else if (gender && gender == "male") {
                            str = showMaleAnswer(answer);
                        } else if (gender && gender == "female") {
                            str = showFemaleAnswer(answer);
                        } else {
                            str = showAnswer(answer);
                        }
                        scrollUp();
                        pushToChat(str);
                        let ans1 = prepareJSONRequest(inner);
                        sendMessage(ans1);
                    }
                });
                $('body').on('click', '#pm-bottomClick', function () {
                    let answer = $("#pm-answerBottom").val();

                    answer = answer.trim();
                    if (answer === "") {
                        $('#answerBottom').val('').empty();
                    }

                    if (answer != "") {
                        lastConversationSemaphore = true;
                        $("#pm-answerBottom").val("");
                        $(".pm-bxCheckOPtion").remove();
                        $(".pm-bxCheckOPtionUrl").remove();
                        // $(".sec_slider").remove();
                        let str = null;
                        if (profile) {
                            str = showProfileAnswer(answer);
                        } else if (gender && gender == "male") {
                            str = showMaleAnswer(answer);
                        } else if (gender && gender == "female") {
                            str = showFemaleAnswer(answer);
                        } else {
                            str = showAnswer(answer);
                        }
                        scrollUp();
                        pushToChat(str);
                        let ans1 = prepareJSONRequest(answer);
                        sendMessage(ans1);
                    }
                });
                $("body").on('keypress', '#pm-answerBottom', function (e) {

                    let answer = $("#pm-answerBottom").val();
                    answer = answer.trim();
                    if (e.which == 13 && answer != "") {
                        lastConversationSemaphore = true;
                        $("#pm-answerBottom").val("");
                        $(".pm-bxCheckOPtion").remove();
                        $(".pm-bxCheckOPtionUrl").remove();
                        let str = null;
                        if (profile) {
                            str = showProfileAnswer(answer);
                        } else if (gender && gender == "male") {
                            str = showMaleAnswer(answer);
                        } else if (gender && gender == "female") {
                            str = showFemaleAnswer(answer);
                        } else {
                            str = showAnswer(answer);
                        }
                        scrollUp();
                        pushToChat(str);
                        let ans1 = prepareJSONRequest(answer);
                        sendMessage(ans1);
                    }
                });
                $('body').on('click', '#jubi-bottomClick', function () {
                    let answer = $("#jubi-answerBottom").val();

                    answer = answer.trim();
                    if (answer === "") {
                        $('#answerBottom').val('').empty();
                    }

                    if (answer != "") {
                        lastConversationSemaphore = true;
                        $("#jubi-answerBottom").val("");
                        $(".pm-bxCheckOPtion").remove();
                        $(".pm-bxCheckOPtionUrl").remove();
                        // $(".sec_slider").remove();
                        let str = null;
                        if (profile) {
                            str = showProfileAnswer(answer);
                        } else if (gender && gender == "male") {
                            str = showMaleAnswer(answer);
                        } else if (gender && gender == "female") {
                            str = showFemaleAnswer(answer);
                        } else {
                            str = showAnswer(answer);
                        }
                        scrollUp();
                        pushToChat(str);
                        let ans1 = prepareJSONRequest(answer);
                        sendMessage(ans1);
                    }
                });
                $("body").on('keypress', '#jubi-answerBottom', function (e) {

                    let answer = $("#jubi-answerBottom").val();
                    answer = answer.trim();
                    if (e.which == 13 && answer != "") {
                        lastConversationSemaphore = true;
                        $("#jubi-answerBottom").val("");
                        $(".pm-bxCheckOPtion").remove();
                        $(".pm-bxCheckOPtionUrl").remove();
                        let str = null;
                        if (profile) {
                            str = showProfileAnswer(answer);
                        } else if (gender && gender == "male") {
                            str = showMaleAnswer(answer);
                        } else if (gender && gender == "female") {
                            str = showFemaleAnswer(answer);
                        } else {
                            str = showAnswer(answer);
                        }
                        scrollUp();
                        pushToChat(str);
                        let ans1 = prepareJSONRequest(answer);
                        sendMessage(ans1);
                    }
                });

                $("#jubi-answerBottom").keydown(function (e) {

                    let answer = $("#jubi-answerBottom").val();
                    answer = answer.trim();
                    if (e.which == 13 && answer != "") {
                        lastConversationSemaphore = true;
                        $("#jubi-answerBottom").val("");
                        $(".pm-bxCheckOPtion").remove();
                        $(".pm-bxCheckOPtionUrl").remove();
                        let str = null;
                        if (profile) {
                            str = showProfileAnswer(answer);
                        } else if (gender && gender == "male") {
                            str = showMaleAnswer(answer);
                        } else if (gender && gender == "female") {
                            str = showFemaleAnswer(answer);
                        } else {
                            str = showAnswer(answer);
                        }
                        scrollUp();
                        pushToChat(str);
                        let ans1 = prepareJSONRequest(answer);
                        sendMessage(ans1);
                    }
                });
                $("#pm-answerBottom").click(scrollUp);
                $("#jubi-answerBottom").click(scrollUp);
                $(".pm-showmenubx").css("display", "none");
                $(".pm-showMenu").click(function () {
                    $(".pm-showmenubx").toggle(400);
                });
                $("#pm-bottomClick").click(function () {
                    setTimeout(function () {
                        $('#pm-answerBottom').val('').empty();
                    }, 500);
                });
                $("#pm-answerBottom").on('keyup', function (e) {
                    if (e.keyCode == 13) {
                        $('#pm-answerBottom').val('').empty();
                    }
                });
                $("#jubi-bottomClick").click(function () {
                    setTimeout(function () {
                        $('#jubi-answerBottom').val('').empty();
                    }, 500);
                });
                $("#jubi-answerBottom").on('keyup', function (e) {
                    if (e.keyCode == 13) {
                        $('#jubi-answerBottom').val('').empty();
                    }
                });
                $(".pm-btnClose").click(function () {
                    $(".pm-secCloseMsg").hide(200);
                });
                $(".pm-iconMenu").click(function () {
                    $("#pm-secMenucontent").toggle();
                });
                $("#pm-secMenucontent").click(function () {
                    $("#pm-secMenucontent").hide();
                });
                $('.pm-bxform').click(function () {
                    $("#pm-secMenucontent").hide();
                });
                $(".pm-bxChat").animate({ scrollTop: $(document).height() }, "slow");
                $(".pm-btnClose").click(function () {
                    $(".pm-secCloseMsg").hide();
                });
                $("#pm-secCloseview").click(function () {
                    $('#pm-chatOpenClose').toggleClass('doChatOpenClose');
                });

                $(".pm-sec_closeview").click(function () {
                    $(".pm-sec_closeview").hide();
                    $(".pm-sec_calliframe").fadeIn(500);
                    $(".pm-secHideChat").show(500);
                    $(".pm-secCloseMsg").hide();
                    booleanHideShow = true;
                    backendResponse = '0';
                });
                $(".pm-secHideChat").click(function () {
                    $(".pm-sec_calliframe").hide(500);
                    $(".pm-sec_closeview").show(800);
                    $(".pm-secHideChat").hide(500);
                    $('#pm-chatOpenClose').removeClass('doChatOpenClose');
                    booleanHideShow = false;
                });
                $("#pm-sec_closeviewMobile").click(function () {
                    $("#pm-sec_closeviewMobile").hide(500);
                    $(".pm-sec_calliframe").fadeIn(500);
                });
                $("#pm-secHideMobileChat").click(function () {
                    $(".pm-sec_calliframe").hide(500);
                    $("#pm-sec_closeviewMobile").show(500);
                });
                boot();
            }
            //Helper Functions
            // Clones an Object
            function clone(obj) {
                return JSON.parse(JSON.stringify(obj));
            }
            //Chooses random value
            function getRandom(max) {
                return Math.floor(Math.random() * Math.floor(max));
            }
            //Fetch Get Params
            function get(name) {
                if (name = new RegExp('[?&]' + encodeURIComponent(name) + '=([^&]*)').exec(location.search)) {
                    return decodeURIComponent(name[1]);
                }
            }
            //Generates random id
            function IDGenerator(length) {
                let timestamp = +new Date();
                let _getRandomInt = function (min, max) {
                    return Math.floor(Math.random() * (max - min + 1)) + min;
                };
                let ts = timestamp.toString();
                let parts = ts.split("").reverse();
                let id = "";

                for (let i = 0; i < length; ++i) {
                    let index = _getRandomInt(0, parts.length - 1);
                    id += parts[index];
                }
                return id;
            }
            // function doesConnectionExist() {
            //     return new Promise((resolve,reject)=>{
            //         let xhr = new XMLHttpRequest();
            //         let randomNum = Math.round(Math.random() * 10000);

            //         xhr.open('HEAD', window.location + "?rand=" + randomNum, true);
            //         xhr.send();

            //         xhr.addEventListener("readystatechange", processRequest, false);

            //         function processRequest(e) {
            //         if (xhr.readyState == 4) {
            //             if (xhr.status >= 200 && xhr.status < 304) {
            //                 return resolve(true);
            //             } else {
            //                 return resolve(false);
            //             }
            //         }
            //         }
            //     })
            // }
            //Invoking Chain of operations
            init();
        })();
    }, { "sentence-tokenizer": 8, "string-similarity": 12, "string-tokenizer": 14, "wink-bm25-text-search": 16, "wink-nlp-utils": 61 }], 3: [function (require, module, exports) {
        /*!
         * array-last <https://github.com/jonschlinkert/array-last>
         *
         * Copyright (c) 2014-2017, Jon Schlinkert.
         * Released under the MIT License.
         */

        var isNumber = require('is-number');

        module.exports = function last(arr, n) {
            if (!Array.isArray(arr)) {
                throw new Error('expected the first argument to be an array');
            }

            var len = arr.length;
            if (len === 0) {
                return null;
            }

            n = isNumber(n) ? +n : 1;
            if (n === 1) {
                return arr[len - 1];
            }

            var res = new Array(n);
            while (n--) {
                res[n] = arr[--len];
            }
            return res;
        };
    }, { "is-number": 4 }], 4: [function (require, module, exports) {
        /*!
         * is-number <https://github.com/jonschlinkert/is-number>
         *
         * Copyright (c) 2014-2017, Jon Schlinkert.
         * Released under the MIT License.
         */

        'use strict';

        module.exports = function isNumber(num) {
            var type = typeof num;

            if (type === 'string' || num instanceof String) {
                // an empty string would be coerced to true with the below logic
                if (!num.trim()) return false;
            } else if (type !== 'number' && !(num instanceof Number)) {
                return false;
            }

            return num - num + 1 >= 0;
        };
    }, {}], 5: [function (require, module, exports) {
        'use strict';

        // modified from https://github.com/es-shims/es5-shim

        var has = Object.prototype.hasOwnProperty;
        var toStr = Object.prototype.toString;
        var slice = Array.prototype.slice;
        var isArgs = require('./isArguments');
        var isEnumerable = Object.prototype.propertyIsEnumerable;
        var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
        var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
        var dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];
        var equalsConstructorPrototype = function (o) {
            var ctor = o.constructor;
            return ctor && ctor.prototype === o;
        };
        var excludedKeys = {
            $applicationCache: true,
            $console: true,
            $external: true,
            $frame: true,
            $frameElement: true,
            $frames: true,
            $innerHeight: true,
            $innerWidth: true,
            $outerHeight: true,
            $outerWidth: true,
            $pageXOffset: true,
            $pageYOffset: true,
            $parent: true,
            $scrollLeft: true,
            $scrollTop: true,
            $scrollX: true,
            $scrollY: true,
            $self: true,
            $webkitIndexedDB: true,
            $webkitStorageInfo: true,
            $window: true
        };
        var hasAutomationEqualityBug = function () {
            /* global window */
            if (typeof window === 'undefined') {
                return false;
            }
            for (var k in window) {
                try {
                    if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
                        try {
                            equalsConstructorPrototype(window[k]);
                        } catch (e) {
                            return true;
                        }
                    }
                } catch (e) {
                    return true;
                }
            }
            return false;
        }();
        var equalsConstructorPrototypeIfNotBuggy = function (o) {
            /* global window */
            if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
                return equalsConstructorPrototype(o);
            }
            try {
                return equalsConstructorPrototype(o);
            } catch (e) {
                return false;
            }
        };

        var keysShim = function keys(object) {
            var isObject = object !== null && typeof object === 'object';
            var isFunction = toStr.call(object) === '[object Function]';
            var isArguments = isArgs(object);
            var isString = isObject && toStr.call(object) === '[object String]';
            var theKeys = [];

            if (!isObject && !isFunction && !isArguments) {
                throw new TypeError('Object.keys called on a non-object');
            }

            var skipProto = hasProtoEnumBug && isFunction;
            if (isString && object.length > 0 && !has.call(object, 0)) {
                for (var i = 0; i < object.length; ++i) {
                    theKeys.push(String(i));
                }
            }

            if (isArguments && object.length > 0) {
                for (var j = 0; j < object.length; ++j) {
                    theKeys.push(String(j));
                }
            } else {
                for (var name in object) {
                    if (!(skipProto && name === 'prototype') && has.call(object, name)) {
                        theKeys.push(String(name));
                    }
                }
            }

            if (hasDontEnumBug) {
                var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

                for (var k = 0; k < dontEnums.length; ++k) {
                    if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
                        theKeys.push(dontEnums[k]);
                    }
                }
            }
            return theKeys;
        };

        keysShim.shim = function shimObjectKeys() {
            if (Object.keys) {
                var keysWorksWithArguments = function () {
                    // Safari 5.0 bug
                    return (Object.keys(arguments) || '').length === 2;
                }(1, 2);
                if (!keysWorksWithArguments) {
                    var originalKeys = Object.keys;
                    Object.keys = function keys(object) {
                        // eslint-disable-line func-name-matching
                        if (isArgs(object)) {
                            return originalKeys(slice.call(object));
                        } else {
                            return originalKeys(object);
                        }
                    };
                }
            } else {
                Object.keys = keysShim;
            }
            return Object.keys || keysShim;
        };

        module.exports = keysShim;
    }, { "./isArguments": 6 }], 6: [function (require, module, exports) {
        'use strict';

        var toStr = Object.prototype.toString;

        module.exports = function isArguments(value) {
            var str = toStr.call(value);
            var isArgs = str === '[object Arguments]';
            if (!isArgs) {
                isArgs = str !== '[object Array]' && value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && toStr.call(value.callee) === '[object Function]';
            }
            return isArgs;
        };
    }, {}], 7: [function (require, module, exports) {
        'use strict';

        module.exports = function (obj) {
            var keys = Object.keys(obj);
            var ret = [];

            for (var i = 0; i < keys.length; i++) {
                ret.push(obj[keys[i]]);
            }

            return ret;
        };
    }, {}], 8: [function (require, module, exports) {
        "use strict";

        // eslint-disable-next-line no-unused-vars

        var debug = require('debug')('tokenizer');

        function compact(str) {
            var res = str.trim();
            res = res.replace('  ', ' ');
            return res;
        }

        function Tokenizer(username, botname) {

            // // Maybe it is not useful
            // if (!(this instanceof Tokenizer)) {
            //   return new Tokenizer();
            // }

            this.username = username || 'Guy';
            this.entry = null;
            this.sentences = null;

            if (typeof botname == 'string') {
                this.botname = botname;
            } else {
                this.botname = 'ECTOR';
            }
        }

        Tokenizer.prototype = {
            setEntry: function (entry) {
                this.entry = compact(entry);
                this.sentences = null;
            },
            // Split the entry into sentences.
            getSentences: function () {
                // this.sentences = this.entry.split(/[\.!]\s/);
                if (!this.entry) return [];
                var words = this.entry.split(' ');
                var endingWords = words.filter(function (w) {
                    return w.endsWith('.') || w.endsWith('!') || w.endsWith('?');
                });

                var self = this;
                var botnameRegExp = new RegExp("\\W?" + self.botname.normalize() + "\\W?");
                var usernameRegExp = new RegExp("\\W?" + self.username.normalize() + "\\W?");
                var lastSentence = words[0];
                self.sentences = [];
                words.reduce(function (prev, cur) {
                    var curNormalized = cur.normalize();
                    var curReplaced = cur;
                    if (curNormalized.search(botnameRegExp) !== -1) {
                        curReplaced = cur.replace(self.botname, "{yourname}");
                    } else if (curNormalized.search(usernameRegExp) !== -1) {
                        curReplaced = cur.replace(self.username, "{myname}");
                    }

                    if (endingWords.indexOf(prev) != -1) {
                        self.sentences.push(compact(lastSentence));
                        lastSentence = "";
                    }
                    lastSentence = lastSentence + " " + curReplaced;
                    return cur;
                });
                self.sentences.push(compact(lastSentence));
                return this.sentences;
            },
            // Get the tokens of one sentence
            getTokens: function (sentenceIndex) {
                var s = 0;
                if (typeof sentenceIndex === 'number') s = sentenceIndex;
                return this.sentences[s].split(' ');
            }
        };

        module.exports = Tokenizer;
    }, { "debug": 9 }], 9: [function (require, module, exports) {
        (function (process) {
            /* eslint-env browser */

            /**
             * This is the web browser implementation of `debug()`.
             */

            exports.log = log;
            exports.formatArgs = formatArgs;
            exports.save = save;
            exports.load = load;
            exports.useColors = useColors;
            exports.storage = localstorage();

            /**
             * Colors.
             */

            exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];

            /**
             * Currently only WebKit-based Web Inspectors, Firefox >= v31,
             * and the Firebug extension (any Firefox version) are known
             * to support "%c" CSS customizations.
             *
             * TODO: add a `localStorage` variable to explicitly enable/disable colors
             */

            // eslint-disable-next-line complexity
            function useColors() {
                // NB: In an Electron preload script, document will be defined but not fully
                // initialized. Since we know we're in Chrome, we'll just detect this case
                // explicitly
                if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
                    return true;
                }

                // Internet Explorer and Edge do not support colors.
                if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
                    return false;
                }

                // Is webkit? http://stackoverflow.com/a/16459606/376773
                // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
                return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||
                // Is firebug? http://stackoverflow.com/a/398120/376773
                typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) ||
                // Is firefox >= v31?
                // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
                typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 ||
                // Double check webkit in userAgent just in case we are in a worker
                typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
            }

            /**
             * Colorize log arguments if enabled.
             *
             * @api public
             */

            function formatArgs(args) {
                args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

                if (!this.useColors) {
                    return;
                }

                const c = 'color: ' + this.color;
                args.splice(1, 0, c, 'color: inherit');

                // The final "%c" is somewhat tricky, because there could be other
                // arguments passed either before or after the %c, so we need to
                // figure out the correct index to insert the CSS into
                let index = 0;
                let lastC = 0;
                args[0].replace(/%[a-zA-Z%]/g, match => {
                    if (match === '%%') {
                        return;
                    }
                    index++;
                    if (match === '%c') {
                        // We only are interested in the *last* %c
                        // (the user may have provided their own)
                        lastC = index;
                    }
                });

                args.splice(lastC, 0, c);
            }

            /**
             * Invokes `console.log()` when available.
             * No-op when `console.log` is not a "function".
             *
             * @api public
             */
            function log(...args) {
                // This hackery is required for IE8/9, where
                // the `console.log` function doesn't have 'apply'
                return typeof console === 'object' && console.log && console.log(...args);
            }

            /**
             * Save `namespaces`.
             *
             * @param {String} namespaces
             * @api private
             */
            function save(namespaces) {
                try {
                    if (namespaces) {
                        exports.storage.setItem('debug', namespaces);
                    } else {
                        exports.storage.removeItem('debug');
                    }
                } catch (error) {
                    // Swallow
                    // XXX (@Qix-) should we be logging these?
                }
            }

            /**
             * Load `namespaces`.
             *
             * @return {String} returns the previously persisted debug modes
             * @api private
             */
            function load() {
                let r;
                try {
                    r = exports.storage.getItem('debug');
                } catch (error) {}
                // Swallow
                // XXX (@Qix-) should we be logging these?


                // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
                if (!r && typeof process !== 'undefined' && 'env' in process) {
                    r = process.env.DEBUG;
                }

                return r;
            }

            /**
             * Localstorage attempts to return the localstorage.
             *
             * This is necessary because safari throws
             * when a user disables cookies/localstorage
             * and you attempt to access it.
             *
             * @return {LocalStorage}
             * @api private
             */

            function localstorage() {
                try {
                    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
                    // The Browser also has localStorage in the global context.
                    return localStorage;
                } catch (error) {
                    // Swallow
                    // XXX (@Qix-) should we be logging these?
                }
            }

            module.exports = require('./common')(exports);

            const { formatters } = module.exports;

            /**
             * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
             */

            formatters.j = function (v) {
                try {
                    return JSON.stringify(v);
                } catch (error) {
                    return '[UnexpectedJSONParseError]: ' + error.message;
                }
            };
        }).call(this, require('_process'));
    }, { "./common": 10, "_process": 1 }], 10: [function (require, module, exports) {

        /**
         * This is the common logic for both the Node.js and web browser
         * implementations of `debug()`.
         */

        function setup(env) {
            createDebug.debug = createDebug;
            createDebug.default = createDebug;
            createDebug.coerce = coerce;
            createDebug.disable = disable;
            createDebug.enable = enable;
            createDebug.enabled = enabled;
            createDebug.humanize = require('ms');

            Object.keys(env).forEach(key => {
                createDebug[key] = env[key];
            });

            /**
            * Active `debug` instances.
            */
            createDebug.instances = [];

            /**
            * The currently active debug mode names, and names to skip.
            */

            createDebug.names = [];
            createDebug.skips = [];

            /**
            * Map of special "%n" handling functions, for the debug "format" argument.
            *
            * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
            */
            createDebug.formatters = {};

            /**
            * Selects a color for a debug namespace
            * @param {String} namespace The namespace string for the for the debug instance to be colored
            * @return {Number|String} An ANSI color code for the given namespace
            * @api private
            */
            function selectColor(namespace) {
                let hash = 0;

                for (let i = 0; i < namespace.length; i++) {
                    hash = (hash << 5) - hash + namespace.charCodeAt(i);
                    hash |= 0; // Convert to 32bit integer
                }

                return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
            }
            createDebug.selectColor = selectColor;

            /**
            * Create a debugger with the given `namespace`.
            *
            * @param {String} namespace
            * @return {Function}
            * @api public
            */
            function createDebug(namespace) {
                let prevTime;

                function debug(...args) {
                    // Disabled?
                    if (!debug.enabled) {
                        return;
                    }

                    const self = debug;

                    // Set `diff` timestamp
                    const curr = Number(new Date());
                    const ms = curr - (prevTime || curr);
                    self.diff = ms;
                    self.prev = prevTime;
                    self.curr = curr;
                    prevTime = curr;

                    args[0] = createDebug.coerce(args[0]);

                    if (typeof args[0] !== 'string') {
                        // Anything else let's inspect with %O
                        args.unshift('%O');
                    }

                    // Apply any `formatters` transformations
                    let index = 0;
                    args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
                        // If we encounter an escaped % then don't increase the array index
                        if (match === '%%') {
                            return match;
                        }
                        index++;
                        const formatter = createDebug.formatters[format];
                        if (typeof formatter === 'function') {
                            const val = args[index];
                            match = formatter.call(self, val);

                            // Now we need to remove `args[index]` since it's inlined in the `format`
                            args.splice(index, 1);
                            index--;
                        }
                        return match;
                    });

                    // Apply env-specific formatting (colors, etc.)
                    createDebug.formatArgs.call(self, args);

                    const logFn = self.log || createDebug.log;
                    logFn.apply(self, args);
                }

                debug.namespace = namespace;
                debug.enabled = createDebug.enabled(namespace);
                debug.useColors = createDebug.useColors();
                debug.color = selectColor(namespace);
                debug.destroy = destroy;
                debug.extend = extend;
                // Debug.formatArgs = formatArgs;
                // debug.rawLog = rawLog;

                // env-specific initialization logic for debug instances
                if (typeof createDebug.init === 'function') {
                    createDebug.init(debug);
                }

                createDebug.instances.push(debug);

                return debug;
            }

            function destroy() {
                const index = createDebug.instances.indexOf(this);
                if (index !== -1) {
                    createDebug.instances.splice(index, 1);
                    return true;
                }
                return false;
            }

            function extend(namespace, delimiter) {
                return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
            }

            /**
            * Enables a debug mode by namespaces. This can include modes
            * separated by a colon and wildcards.
            *
            * @param {String} namespaces
            * @api public
            */
            function enable(namespaces) {
                createDebug.save(namespaces);

                createDebug.names = [];
                createDebug.skips = [];

                let i;
                const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
                const len = split.length;

                for (i = 0; i < len; i++) {
                    if (!split[i]) {
                        // ignore empty strings
                        continue;
                    }

                    namespaces = split[i].replace(/\*/g, '.*?');

                    if (namespaces[0] === '-') {
                        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
                    } else {
                        createDebug.names.push(new RegExp('^' + namespaces + '$'));
                    }
                }

                for (i = 0; i < createDebug.instances.length; i++) {
                    const instance = createDebug.instances[i];
                    instance.enabled = createDebug.enabled(instance.namespace);
                }
            }

            /**
            * Disable debug output.
            *
            * @return {String} namespaces
            * @api public
            */
            function disable() {
                const namespaces = [...createDebug.names.map(toNamespace), ...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)].join(',');
                createDebug.enable('');
                return namespaces;
            }

            /**
            * Returns true if the given mode name is enabled, false otherwise.
            *
            * @param {String} name
            * @return {Boolean}
            * @api public
            */
            function enabled(name) {
                if (name[name.length - 1] === '*') {
                    return true;
                }

                let i;
                let len;

                for (i = 0, len = createDebug.skips.length; i < len; i++) {
                    if (createDebug.skips[i].test(name)) {
                        return false;
                    }
                }

                for (i = 0, len = createDebug.names.length; i < len; i++) {
                    if (createDebug.names[i].test(name)) {
                        return true;
                    }
                }

                return false;
            }

            /**
            * Convert regexp to namespace
            *
            * @param {RegExp} regxep
            * @return {String} namespace
            * @api private
            */
            function toNamespace(regexp) {
                return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
            }

            /**
            * Coerce `val`.
            *
            * @param {Mixed} val
            * @return {Mixed}
            * @api private
            */
            function coerce(val) {
                if (val instanceof Error) {
                    return val.stack || val.message;
                }
                return val;
            }

            createDebug.enable(createDebug.load());

            return createDebug;
        }

        module.exports = setup;
    }, { "ms": 11 }], 11: [function (require, module, exports) {
        /**
         * Helpers.
         */

        var s = 1000;
        var m = s * 60;
        var h = m * 60;
        var d = h * 24;
        var w = d * 7;
        var y = d * 365.25;

        /**
         * Parse or format the given `val`.
         *
         * Options:
         *
         *  - `long` verbose formatting [false]
         *
         * @param {String|Number} val
         * @param {Object} [options]
         * @throws {Error} throw an error if val is not a non-empty string or a number
         * @return {String|Number}
         * @api public
         */

        module.exports = function (val, options) {
            options = options || {};
            var type = typeof val;
            if (type === 'string' && val.length > 0) {
                return parse(val);
            } else if (type === 'number' && isNaN(val) === false) {
                return options.long ? fmtLong(val) : fmtShort(val);
            }
            throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
        };

        /**
         * Parse the given `str` and return milliseconds.
         *
         * @param {String} str
         * @return {Number}
         * @api private
         */

        function parse(str) {
            str = String(str);
            if (str.length > 100) {
                return;
            }
            var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
            if (!match) {
                return;
            }
            var n = parseFloat(match[1]);
            var type = (match[2] || 'ms').toLowerCase();
            switch (type) {
                case 'years':
                case 'year':
                case 'yrs':
                case 'yr':
                case 'y':
                    return n * y;
                case 'weeks':
                case 'week':
                case 'w':
                    return n * w;
                case 'days':
                case 'day':
                case 'd':
                    return n * d;
                case 'hours':
                case 'hour':
                case 'hrs':
                case 'hr':
                case 'h':
                    return n * h;
                case 'minutes':
                case 'minute':
                case 'mins':
                case 'min':
                case 'm':
                    return n * m;
                case 'seconds':
                case 'second':
                case 'secs':
                case 'sec':
                case 's':
                    return n * s;
                case 'milliseconds':
                case 'millisecond':
                case 'msecs':
                case 'msec':
                case 'ms':
                    return n;
                default:
                    return undefined;
            }
        }

        /**
         * Short format for `ms`.
         *
         * @param {Number} ms
         * @return {String}
         * @api private
         */

        function fmtShort(ms) {
            var msAbs = Math.abs(ms);
            if (msAbs >= d) {
                return Math.round(ms / d) + 'd';
            }
            if (msAbs >= h) {
                return Math.round(ms / h) + 'h';
            }
            if (msAbs >= m) {
                return Math.round(ms / m) + 'm';
            }
            if (msAbs >= s) {
                return Math.round(ms / s) + 's';
            }
            return ms + 'ms';
        }

        /**
         * Long format for `ms`.
         *
         * @param {Number} ms
         * @return {String}
         * @api private
         */

        function fmtLong(ms) {
            var msAbs = Math.abs(ms);
            if (msAbs >= d) {
                return plural(ms, msAbs, d, 'day');
            }
            if (msAbs >= h) {
                return plural(ms, msAbs, h, 'hour');
            }
            if (msAbs >= m) {
                return plural(ms, msAbs, m, 'minute');
            }
            if (msAbs >= s) {
                return plural(ms, msAbs, s, 'second');
            }
            return ms + ' ms';
        }

        /**
         * Pluralization helper.
         */

        function plural(ms, msAbs, n, name) {
            var isPlural = msAbs >= n * 1.5;
            return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
        }
    }, {}], 12: [function (require, module, exports) {
        module.exports = {
            compareTwoStrings,
            findBestMatch
        };

        function compareTwoStrings(str1, str2) {
            if (!str1.length && !str2.length) return 1; // if both are empty strings
            if (!str1.length || !str2.length) return 0; // if only one is empty string
            if (str1.toUpperCase() === str2.toUpperCase()) return 1; // identical
            if (str1.length === 1 && str2.length === 1) return 0; // both are 1-letter strings

            const pairs1 = wordLetterPairs(str1);
            const pairs2 = wordLetterPairs(str2);
            const union = pairs1.length + pairs2.length;
            let intersection = 0;
            pairs1.forEach(pair1 => {
                for (let i = 0, pair2; pair2 = pairs2[i]; i++) {
                    if (pair1 !== pair2) continue;
                    intersection++;
                    pairs2.splice(i, 1);
                    break;
                }
            });
            return intersection * 2 / union;
        }

        function findBestMatch(mainString, targetStrings) {
            if (!areArgsValid(mainString, targetStrings)) throw new Error('Bad arguments: First argument should be a string, second should be an array of strings');
            const ratings = targetStrings.map(target => ({ target, rating: compareTwoStrings(mainString, target) }));
            const bestMatch = Array.from(ratings).sort((a, b) => b.rating - a.rating)[0];
            return { ratings, bestMatch };
        }

        function flattenDeep(arr) {
            return Array.isArray(arr) ? arr.reduce((a, b) => a.concat(flattenDeep(b)), []) : [arr];
        }

        function areArgsValid(mainString, targetStrings) {
            if (typeof mainString !== 'string') return false;
            if (!Array.isArray(targetStrings)) return false;
            if (!targetStrings.length) return false;
            if (targetStrings.find(s => typeof s !== 'string')) return false;
            return true;
        }

        function letterPairs(str) {
            const pairs = [];
            for (let i = 0, max = str.length - 1; i < max; i++) pairs[i] = str.substring(i, i + 2);
            return pairs;
        }

        function wordLetterPairs(str) {
            const pairs = str.toUpperCase().split(' ').map(letterPairs);
            return flattenDeep(pairs);
        }
    }, {}], 13: [function (require, module, exports) {
        'use strict';

        function ToObject(val) {
            if (val == null) {
                throw new TypeError('Object.assign cannot be called with null or undefined');
            }

            return Object(val);
        }

        module.exports = Object.assign || function (target, source) {
            var from;
            var keys;
            var to = ToObject(target);

            for (var s = 1; s < arguments.length; s++) {
                from = arguments[s];
                keys = Object.keys(Object(from));

                for (var i = 0; i < keys.length; i++) {
                    to[keys[i]] = from[keys[i]];
                }
            }

            return to;
        };
    }, {}], 14: [function (require, module, exports) {
        var _ = {
            keys: require('object-keys'),
            values: require('object-values'),
            assign: require('object-assign'),
            uniq: require('uniq'),
            last: require('array-last'),
            compact: function (d) {
                return d.filter(function (d) {
                    return d;
                });
            }
        };

        module.exports = function (input) {
            var self = {},
                _tokens = {},
                _helpers = {},
                _input = input,
                _debug = false;

            self.input = function (input) {
                _input = input;
                return self;
            };

            self.token = function (token, pattern, helper) {
                var t = {};
                t[token] = pattern;
                addTokens(t);
                helper && self.helper(token, helper);
                return self;
            };

            self.helper = function (token, callback) {
                var m = {};
                m[token] = callback;
                addHelpers(m);
                return self;
            };

            self.debug = function () {
                return _debug = true, self;
            };

            self.tokens = addTokens;
            self.helpers = addHelpers;

            self.walk = walk;
            self.resolve = resolve;

            return self;

            function addTokens(token) {
                var names = _.keys(token),
                    expressions = _.values(token),
                    expression;

                expressions.forEach(function (d, i) {
                    expression = new RegExp('(' + getSource(d) + ')');
                    _tokens[expression.source] = names[i];
                });

                return self;

                function getSource(expression) {
                    if (is(expression, 'RegExp')) return expression.source;
                    return getSource(new RegExp(expression));
                }
            }

            function addHelpers(helpers) {
                for (var helper in helpers) _helpers[helper] = helpers[helper];
                return self;
            }

            function walk(onToken) {
                var cb = onToken || noop;

                var tokens = _.keys(_tokens) || [],
                    names = _.values(_tokens);

                if (tokens.length == 0) throw new Error('Define at least one token');

                runFrom(0);

                return self;

                //TODO: some house keeping needed ... ;)
                function runFrom(lastIndex, ignore) {

                    if (lastIndex > _input.length) return;

                    var expr,
                        _i = _input.substr(lastIndex),
                        idx = -1,
                        min = Infinity;

                    tokens.forEach(function (d, i) {
                        var _expr = new RegExp(d, 'g'),
                            _min;

                        _expr.lastIndex = lastIndex;
                        _min = ignore == i ? -1 : _i.search(_expr);

                        if (min > _min && _min > -1) {
                            expr = _expr;
                            min = _min;
                            idx = i;
                        }
                    });

                    if (idx == -1) return;

                    var part,
                        offset = (part = evalExpr()) && part.length > 0 ? part.lastIndex || part.index : -1,
                        match;

                    function evalExpr() {
                        var r = expr.exec(_input),
                            helper = _helpers[names[idx]];

                        if (helper && r) r.push(helper(r, _input, expr.source));
                        debug('tag %s, index %s, exec %s', names[idx], lastIndex, r);
                        return r;
                    }

                    match = part || [''];

                    offset += match[0].length;

                    var shouldSkip = cb(names[idx], topMatch(match), idx, lastIndex, _.uniq(_.compact(match)));
                    if (typeof shouldSkip != 'undefined' && !shouldSkip) return runFrom(offset - match[0].length, idx);

                    return runFrom(offset);
                }

                function topMatch(arr) {
                    return _.last(_.compact(arr));
                }
                function evaluateExpression(tokens) {
                    return new RegExp(tokens.join('|'), 'g');
                }
            }

            function resolve(postionInfo) {
                var r = {};

                walk(function (name, value, tokenIndex, position, rawExec) {
                    if (postionInfo) value = { value: value, position: position };

                    if (is(r[name], 'Array')) return r[name].push(value);
                    if (is(r[name], 'String')) return r[name] = [value].concat(r[name] || []).reverse();
                    if (is(r[name], 'Object')) return r[name] = _.assign(value, r[name]);

                    r[name] = r[name] || [];
                    r[name].push(value);
                });

                r._source = _input;

                return simplify(r);

                function simplify(r) {
                    for (var key in r) if (is(r[key], 'Array') && r[key].length == 1) r[key] = r[key][0];

                    return r;
                }
            }

            function noop() {}
            function is(expression, type) {
                return Object.prototype.toString.call(expression) == '[object ' + type + ']';
            }
            function debug() {
                if (_debug) console.log.apply(console, arguments);
            }
        };
    }, { "array-last": 3, "object-assign": 13, "object-keys": 5, "object-values": 7, "uniq": 15 }], 15: [function (require, module, exports) {
        "use strict";

        function unique_pred(list, compare) {
            var ptr = 1,
                len = list.length,
                a = list[0],
                b = list[0];
            for (var i = 1; i < len; ++i) {
                b = a;
                a = list[i];
                if (compare(a, b)) {
                    if (i === ptr) {
                        ptr++;
                        continue;
                    }
                    list[ptr++] = a;
                }
            }
            list.length = ptr;
            return list;
        }

        function unique_eq(list) {
            var ptr = 1,
                len = list.length,
                a = list[0],
                b = list[0];
            for (var i = 1; i < len; ++i, b = a) {
                b = a;
                a = list[i];
                if (a !== b) {
                    if (i === ptr) {
                        ptr++;
                        continue;
                    }
                    list[ptr++] = a;
                }
            }
            list.length = ptr;
            return list;
        }

        function unique(list, compare, sorted) {
            if (list.length === 0) {
                return list;
            }
            if (compare) {
                if (!sorted) {
                    list.sort(compare);
                }
                return unique_pred(list, compare);
            }
            if (!sorted) {
                list.sort();
            }
            return unique_eq(list);
        }

        module.exports = unique;
    }, {}], 16: [function (require, module, exports) {
        //     wink-bm25-text-search
        //     Fast Full Text Search based on BM25F
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-bm25-text-search”.
        //
        //     “wink-bm25-search” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-bm25-text-search” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-bm25-text-search”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var helpers = require('wink-helpers');

        /* eslint guard-for-in: 0 */
        /* eslint complexity: [ "error", 25 ] */

        // It is a BM25F In-memory Search engine for text and exposes following
        // methods:
        // 1. `definePrepTasks` allows to define field-wise (optional) pipeline of
        // functions that will be used to prepare each input prior to *search/predict*
        // and *addDoc/learn*.
        // 2. `defineConfig` sets up the configuration for *field-wise weights*,
        // *BM25F parameters*, and **field names whoes original value** needs to be retained.
        // 3. `addDoc/learn` adds a document using its unique id. The document is supplied
        // as an Javascript object, where each property is the field of the document
        // and its value is the text.
        // 4. `consolidate` learnings prior to search/predict.
        // 5. `search/predict` searches for the input text and returns the resultant
        // document ids, sorted by their relevance along with the score. The number of
        // results returned can be controlled via a limit argument that defaults to **10**.
        // The last optional argument is a filter function that must return a `boolean`
        // value, which is used to filter documents.
        // 6. `exportJSON` exports the learnings in JSON format.
        // 7. `importJSON` imports the learnings from JSON that may have been saved on disk.
        // 8. `reset` all the learnings except the preparatory tasks.
        var bm25fIMS = function () {
            // Preparatory tasks that are executed on the `addDoc` & `search` input.
            var pTasks = [];
            // And its count.
            var pTaskCount;
            // Field level prep tasks.
            var flds = Object.create(null);
            // Returned!
            var methods = Object.create(null);
            // Term Frequencies & length of each document.
            var documents = Object.create(null);
            // Inverted Index for faster search
            var invertedIdx = [];
            // IDF for each tokens, tokens are referenced via their numerical index.
            var idf = [];
            // Set true on first call to `addDoc/learn` to prevent changing config.
            var learned = false;
            // The `addDoc()predict()` function checks for this being true; set
            // in `consolidate()`.
            var consolidated = false;
            // Total documents added.
            var totalDocs = 0;
            // Total number of tokens across all documents added.
            var totalCorpusLength = 0;
            // Their average.
            var avgCorpusLength = 0;
            // BM25F Configuration; set up in `defineConfig()`.
            var config = null;
            // The `token: index` mapping; `index` is used everywhere instead
            // of the `token`
            var token2Index = Object.create(null);
            // Index's initial value, incremented with every new word.
            var currTokenIndex = 0;

            // ### Private functions

            // #### Perpare Input

            // Prepares the `input` by executing the pipeline of tasks defined in the
            // `field` specific `pTasks` set via `definePrepTasks()`.
            // If `field` is not specified then default `pTasks` are used.
            // If the `field` specific `pTasks` are not defined then it automatically
            // switches to default `pTasks`.
            var prepareInput = function (input, field) {
                var processedInput = input;
                var pt = flds[field] && flds[field].pTasks || pTasks;
                var ptc = flds[field] && flds[field].pTaskCount || pTaskCount;
                for (var i = 0; i < ptc; i += 1) {
                    processedInput = pt[i](processedInput);
                }
                return processedInput;
            }; // prepareInput()

            // #### Update Freq

            // Updates the `freq` of each term in the `text` after pre-processing it via
            // `prepareInput()`; while updating, it takes care of `field's` `weight`.
            var updateFreq = function (id, text, weight, freq, field) {
                // Tokenized `text`.
                var tkns = prepareInput(text, field);
                // Temp token holder.
                var t;
                for (var i = 0, imax = tkns.length; i < imax; i += 1) {
                    t = tkns[i];
                    // Build `token: index` mapping.
                    if (token2Index[t] === undefined) {
                        token2Index[t] = currTokenIndex;
                        currTokenIndex += 1;
                    }
                    t = token2Index[t];
                    if (freq[t] === undefined) {
                        freq[t] = weight;
                        invertedIdx[t] = invertedIdx[t] || [];
                        invertedIdx[t].push(id);
                    } else {
                        freq[t] += weight;
                    }
                }
                // Length can not be negative!
                return tkns.length * Math.abs(weight);
            }; // updateFreq()

            // ### Exposed Functions

            // #### Define Prep Tasks

            // Defines the `tasks` required to prepare the input for `addDoc` and `search()`
            // The `tasks` should be an array of functions; using these function a simple
            // pipeline is built to serially transform the input to the output.
            // It validates the `tasks` before updating the `pTasks`.
            // If validation fails it throws an appropriate error.
            // Tasks can be defined separately for each field. However if the field is not
            // specified (i.e. `null` or `undefined`), then the `tasks` become default.
            // Note, `field = 'search'` is reserved for prep tasks for search string; However
            // if the same is not specified, the default tasks are used for pre-processing.
            var definePrepTasks = function (tasks, field) {
                if (config === null) {
                    throw Error('winkBM25S: Config must be defined before defining prepTasks.');
                }
                if (!helpers.array.isArray(tasks)) {
                    throw Error('winkBM25S: Tasks should be an array, instead found: ' + JSON.stringify(tasks));
                }
                for (var i = 0, imax = tasks.length; i < imax; i += 1) {
                    if (typeof tasks[i] !== 'function') {
                        throw Error('winkBM25S: Tasks should contain function, instead found: ' + typeof tasks[i]);
                    }
                }
                var fldWeights = config.fldWeights;
                if (field === undefined || field === null) {
                    pTasks = tasks;
                    pTaskCount = tasks.length;
                } else {
                    if (!fldWeights[field] || typeof field !== 'string') {
                        throw Error('winkBM25S: Field name is missing or it is not a string: ' + JSON.stringify(field) + '/' + typeof field);
                    }
                    flds[field] = flds[field] || Object.create(null);
                    flds[field].pTasks = tasks;
                    flds[field].pTaskCount = tasks.length;
                }
                return tasks.length;
            }; // definePrepTasks()

            // #### Define Config

            // Defines the configuration for BM25F using `fldWeights` and `bm25Params`
            // properties of `cfg` object.</br>
            // The `fldWeights` defines the weight for each field of the document. This gives
            // a semantic nudge to search and are used as a mutiplier to the count
            // (frequency) of each token contained in that field of the document. It should
            // be a JS object containing `field-name/value` pairs. If a field's weight is
            // not defined, that field is **ignored**. The field weights must be defined before
            // attempting to add a document via `addDoc()`; they can only be defined once.
            // If any document's field is not defined here then that field is **ignored**.
            // </br>
            // The `k`, `b` and `k1` properties of `bm25Params` object define the smoothing
            // factor for IDF, degree of normalization for TF, and saturation control factor
            // respectively for the BM25F. Their default values are **1**, **0.75**, and
            // **1.2**.<br/>
            // The `ovFieldNames` is an array of field names whose original value needs to
            // be retained.
            var defineConfig = function (cfg) {
                if (learned) {
                    throw Error('winkBM25S: config must be defined before learning/addition starts!');
                }
                if (!helpers.object.isObject(cfg)) {
                    throw Error('winkBM25S: config must be a config object, instead found: ' + JSON.stringify(cfg));
                }
                // If `fldWeights` are absent throw error.
                if (!helpers.object.isObject(cfg.fldWeights)) {
                    throw Error('winkBM25S: fldWeights must be an object, instead found: ' + JSON.stringify(cfg.fldWeights));
                }
                // There should be at least one defined field!
                if (helpers.object.keys(cfg.fldWeights).length === 0) {
                    throw Error('winkBM25S: Field config has no field defined.');
                }
                // Setup configuration now.
                config = Object.create(null);
                // Field config for BM25**F**
                config.fldWeights = Object.create(null);
                config.bm25Params = Object.create(null);
                // **Controls TF part:**<br/>
                // `k1` controls saturation of token's frequency; higher value delays saturation
                // with increase in frequency.
                config.bm25Params.k1 = 1.2;
                // `b` controls the degree of normalization; **0** means no normalization and **1**
                // indicates complete normalization!
                config.bm25Params.b = 0.75;
                // **Controls IDF part:**<br/>
                // `k` controls impact of IDF; should be >= 0; a higher value means lower
                // the impact of IDF.
                config.bm25Params.k = 1;
                // Setup field weights.
                for (var field in cfg.fldWeights) {
                    // The `null` check is required as `isNaN( null )` returns `false`!!
                    // This first ensures non-`null/undefined/0` values before testing for NaN.
                    if (!cfg.fldWeights[field] || isNaN(cfg.fldWeights[field])) {
                        throw Error('winkBM25S: Field weight should be number >0, instead found: ' + JSON.stringify(cfg.fldWeights[field]));
                    }
                    // Update config parameters from `cfg`.
                    config.fldWeights[field] = +cfg.fldWeights[field];
                }
                // Setup BM25F params.
                // Create `bm25Params` if absent in `cfg`.
                if (!helpers.object.isObject(cfg.bm25Params)) cfg.bm25Params = Object.create(null);
                // Update config parameters from `cfg`.
                config.bm25Params.b = cfg.bm25Params.b === null || cfg.bm25Params.b === undefined || isNaN(cfg.bm25Params.b) || +cfg.bm25Params.b < 0 || +cfg.bm25Params.b > 1 ? 0.75 : +cfg.bm25Params.b;

                // Update config parameters from `cfg`.
                config.bm25Params.k1 = cfg.bm25Params.k1 === null || cfg.bm25Params.k1 === undefined || isNaN(cfg.bm25Params.k1) || +cfg.bm25Params.k1 < 0 ? 1.2 : +cfg.bm25Params.k1;

                // Update config parameters from `cfg`.
                config.bm25Params.k = cfg.bm25Params.k === null || cfg.bm25Params.k === undefined || isNaN(cfg.bm25Params.k) || +cfg.bm25Params.k < 0 ? 1 : +cfg.bm25Params.k;

                // Handle configuration for fields whose orginal values has to be retained
                // in the document.<br/>
                // Initialize the `ovFldNames` in the final `config` as an empty array
                config.ovFldNames = [];
                if (!cfg.ovFldNames) cfg.ovFldNames = [];
                if (!helpers.array.isArray(cfg.ovFldNames)) {
                    throw Error('winkBM25S: OV Field names should be an array, instead found: ' + JSON.stringify(typeof cfg.ovFldNames));
                }

                cfg.ovFldNames.forEach(function (f) {
                    if (typeof f !== 'string' || f.length === 0) {
                        throw Error('winkBM25S: OV Field name should be a non-empty string, instead found: ' + JSON.stringify(f));
                    }
                    config.ovFldNames.push(f);
                });
                return true;
            }; // defineConfig()


            // #### Add Doc

            // Adds a document to the model using `updateFreq()` function.
            var addDoc = function (doc, id) {
                if (config === null) {
                    throw Error('winkBM25S: Config must be defined before adding a document.');
                }
                var fldWeights = config.fldWeights;
                // No point in adding/learning further in absence of consolidated.
                if (consolidated) {
                    throw Error('winkBM25S: post consolidation adding/learning is not possible!');
                }
                // Set learning/addition started.
                learned = true;
                var length;
                if (documents[id] !== undefined) {
                    throw Error('winkBM25S: Duplicate document encountered: ' + JSON.stringify(id));
                }
                documents[id] = Object.create(null);
                documents[id].freq = Object.create(null);
                documents[id].fieldValues = Object.create(null);
                documents[id].length = 0;
                // Compute `freq` & `length` of the specified fields.
                for (var field in fldWeights) {
                    if (doc[field] === undefined) {
                        throw Error('winkBM25S: Missing field in the document: ' + JSON.stringify(field));
                    }
                    length = updateFreq(id, doc[field], fldWeights[field], documents[id].freq, field);
                    documents[id].length += length;
                    totalCorpusLength += length;
                }
                // Retain Original Field Values, if configured.
                config.ovFldNames.forEach(function (f) {
                    if (doc[f] === undefined) {
                        throw Error('winkBM25S: Missing field in the document: ' + JSON.stringify(f));
                    }
                    documents[id].fieldValues[f] = doc[f];
                });
                // Increment total documents indexed so far.
                totalDocs += 1;
                return totalDocs;
            }; // addDoc()

            // #### Consolidate

            // Consolidates the data structure of bm25 and computes the IDF. This must be
            // built before using the `search` function. The `fp` defines the precision at
            // which term frequency values are stored. The default value is **4**. In cause
            // of an invalid input, it default to 4. The maximum permitted value is 9; any
            // value larger than 9 is forced to 9.
            var consolidate = function (fp) {
                if (consolidated) {
                    throw Error('winkBM25S: consolidation can be carried out only once!');
                }
                if (totalDocs < 3) {
                    throw Error('winkBM25S: document collection is too small for consolidation; add more docs!');
                }
                var freqPrecision = parseInt(fp, 10);
                freqPrecision = isNaN(freqPrecision) ? 4 : freqPrecision < 4 ? 4 : freqPrecision > 9 ? 9 : freqPrecision;
                // Using the commonly used names but unfortunately they are very cryptic and
                // *short*. **Must not use these variable names elsewhere**.
                var b = config.bm25Params.b;
                var k1 = config.bm25Params.k1;
                var k = config.bm25Params.k;
                var freq, id, n, normalizationFactor, t;
                // Consolidate: compute idf; will multiply with freq to save multiplication
                // time during search. This happens in the next loop-block.
                for (var i = 0, imax = invertedIdx.length; i < imax; i += 1) {
                    n = invertedIdx[i].length;
                    idf[i] = Math.log((totalDocs - n + 0.5) / (n + 0.5) + k);
                    // To be uncommented to probe values!
                    // console.log( '%s, %d, %d, %d, %d', t, totalDocs, n, k, idf[ t ] );
                }
                avgCorpusLength = totalCorpusLength / totalDocs;
                // Consolidate: update document frequencies.
                for (id in documents) {
                    normalizationFactor = 1 - b + b * (documents[id].length / avgCorpusLength);
                    for (t in documents[id].freq) {
                        freq = documents[id].freq[t];
                        // Update frequency but ensure the sign is carefully preserved as the
                        // magnitude of `k1` can jeopardize the sign!
                        documents[id].freq[t] = Math.sign(freq) * (Math.abs(freq * (k1 + 1) / (k1 * normalizationFactor + freq)) * idf[t]).toFixed(freqPrecision);
                        // To be uncommented to probe values!
                        // console.log( '%s, %s, %d', id, t, documents[ id ].freq[ t ] );
                    }
                }
                // Set `consolidated` as `true`.
                consolidated = true;
                return true;
            }; // consolidate()

            // #### Search

            // Searches the `text` and return `limit` results. If `limit` is not sepcified
            // then it will return a maximum of **10** results. The `result` is an array of
            // containing `doc id` and `score` pairs array. If the `text` is not found, an
            // empty array is returned. The `text` must be a string. The argurment `filter`
            // is like `filter` of JS Array; it receive an object containing document's
            // retained field name/value pairs along with the `params` (which is passed as
            // the second argument). It is useful in limiting the search space or making the
            // search more focussed.
            var search = function (text, limit, filter, params) {
                // Predict/Search only if learnings have been consolidated!
                if (!consolidated) {
                    throw Error('winkBM25S: search is not possible unless learnings are consolidated!');
                }
                if (typeof text !== 'string') {
                    throw Error('winkBM25S: search text should be a string, instead found: ' + typeof text);
                }
                // Setup filter function
                var f = typeof filter === 'function' ? filter : function () {
                    return true;
                };
                // Tokenized `text`. Use search specific weights.
                var tkns = prepareInput(text, 'search')
                // Filter out tokens that do not exists in the vocabulary.
                .filter(function (t) {
                    return token2Index[t] !== undefined;
                })
                // Now map them to their respective indexes using `token2Index`.
                .map(function (t) {
                    return token2Index[t];
                });
                // Search results go here as doc id/score pairs.
                var results = Object.create(null);
                // Helper variables.
                var id, ids, t;
                var i, imax, j, jmax;
                // Iterate for every token in the preapred text.
                for (j = 0, jmax = tkns.length; j < jmax; j += 1) {
                    t = tkns[j];
                    // Use Inverted Idx to look up - accelerates search!<br/>
                    // Note, `ids` can never be `undefined` as **unknown** tokens have already
                    // been filtered.
                    ids = invertedIdx[t];
                    // Means the token exists in the vocabulary!
                    // Compute scores for every document.
                    for (i = 0, imax = ids.length; i < imax; i += 1) {
                        id = ids[i];
                        if (f(documents[id].fieldValues, params)) {
                            results[id] = documents[id].freq[t] + (results[id] || 0);
                        }
                        // To be uncommented to probe values!
                        /* console.log( '%s, %d, %d, %d', t, documents[ id ].freq[ t ], idf[ t ], results[ id ] ); */
                    }
                }
                // Convert to a table in `[ id, score ]` format; sort and slice required number
                // of resultant documents.
                return helpers.object.table(results).sort(helpers.array.descendingOnValue).slice(0, Math.max(limit || 10, 1));
            }; // search()

            // #### Reset

            // Resets the BM25F completely by re-initializing all the learning
            // related variables, except the preparatory tasks.
            var reset = function () {
                // Reset values of variables that are associated with learning; Therefore
                // `pTasks` & `pTaskCount` are not re-initialized.
                // Term Frequencies & length of each document.
                documents = Object.create(null);
                // Inverted Index for faster search
                invertedIdx = [];
                // IDF for each tokens
                idf = [];
                // Set true on first call to `addDoc/learn` to prevent changing config.
                learned = false;
                // The `addDoc()predict()` function checks for this being true; set
                // in `consolidate()`.
                consolidated = false;
                // Total documents added.
                totalDocs = 0;
                // Total number of tokens across all documents added.
                totalCorpusLength = 0;
                // Their average.
                avgCorpusLength = 0;
                // BM25F Configuration; set up in `defineConfig()`.
                config = null;
                // The `token: index` mapping; `index` is used everywhere instead
                // of the `token`
                token2Index = Object.create(null);
                // Index's initial value, incremented with every new word.
                currTokenIndex = 0;
                return true;
            }; // reset()

            // #### Export JSON

            // Returns the learnings, along with `consolidated` flag, in JSON format.
            var exportJSON = function () {
                var docStats = Object.create(null);
                docStats.totalCorpusLength = totalCorpusLength;
                docStats.totalDocs = totalDocs;
                docStats.consolidated = consolidated;
                return JSON.stringify([config, docStats, documents, invertedIdx, currTokenIndex, token2Index,
                // For future expansion but the import will have to have intelligence to
                // set the default values and still ensure nothing breaks! Hopefully!!
                {}, [], []]);
            }; // exportJSON()

            // #### Import JSON

            // Imports the `json` in to index after validating the format of input JSON.
            // If validation fails then throws error; otherwise on success import it
            // returns `true`. Note, importing leads to resetting the search engine.
            var importJSON = function (json) {
                if (!json) {
                    throw Error('winkBM25S: undefined or null JSON encountered, import failed!');
                }
                // Validate json format
                var isOK = [helpers.object.isObject, helpers.object.isObject, helpers.object.isObject, helpers.array.isArray, Number.isInteger, helpers.object.isObject, helpers.object.isObject, helpers.array.isArray, helpers.array.isArray];
                var parsedJSON = JSON.parse(json);
                if (!helpers.array.isArray(parsedJSON) || parsedJSON.length !== isOK.length) {
                    throw Error('winkBM25S: invalid JSON encountered, can not import.');
                }
                for (var i = 0; i < isOK.length; i += 1) {
                    if (!isOK[i](parsedJSON[i])) {
                        throw Error('winkBM25S: invalid JSON encountered, can not import.');
                    }
                }
                // All good, setup variable values.
                // First reset everything.
                reset();
                // To prevent config change.
                learned = true;
                // Load variable values.
                config = parsedJSON[0];
                totalCorpusLength = parsedJSON[1].totalCorpusLength;
                totalDocs = parsedJSON[1].totalDocs;
                consolidated = parsedJSON[1].consolidated;
                documents = parsedJSON[2];
                invertedIdx = parsedJSON[3];
                currTokenIndex = parsedJSON[4];
                token2Index = parsedJSON[5];
                // Return success.
                return true;
            }; // importJSON()

            methods.definePrepTasks = definePrepTasks;
            methods.defineConfig = defineConfig;
            methods.addDoc = addDoc;
            methods.consolidate = consolidate;
            methods.search = search;
            methods.exportJSON = exportJSON;
            methods.importJSON = importJSON;
            methods.reset = reset;
            // Aliases to keep APIs uniform across.
            methods.learn = addDoc;
            methods.predict = search;

            return methods;
        }; // bm25fIMS()

        module.exports = bm25fIMS;
    }, { "wink-helpers": 17 }], 17: [function (require, module, exports) {
        //     wink-helpers
        //     Low level helper functions for Javascript
        //     array, object, and string.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-helpers”.
        //
        //     “wink-helpers” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-helpers” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-helpers”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var helpers = Object.create(null);

        // ### Private Functions

        // #### Product Reducer (Callback)

        // Callback function used by `reduce` inside the `product()` function.
        // Follows the standard guidelines of `reduce()` callback function.
        var productReducer = function (prev, curr) {
            var c,
                cmax = curr.length;
            var p,
                pmax = prev.length;
            var result = [];

            for (p = 0; p < pmax; p += 1) {
                for (c = 0; c < cmax; c += 1) {
                    result.push(prev[p].concat(curr[c]));
                }
            }
            return result;
        }; // productReducer()

        // ### Public Function

        // ### Array Helpers

        helpers.array = Object.create(null);

        // #### is Array

        // Tests if argument `v` is a JS array; returns `true` if it is, otherwise returns `false`.
        helpers.array.isArray = function (v) {
            return v !== undefined && v !== null && Object.prototype.toString.call(v) === '[object Array]';
        }; // isArray()


        // #### sorting helpers

        // Set of helpers to sort either numbers or strings. For key/value pairs,
        // the format for each element must be `[ key, value ]`.
        // Sort helper to sort an array in ascending order.
        helpers.array.ascending = function (a, b) {
            return a > b ? 1 : a === b ? 0 : -1;
        }; // ascending()

        // Sort helper to sort an array in descending order.
        helpers.array.descending = function (a, b) {
            return b > a ? 1 : b === a ? 0 : -1;
        }; // descending()

        // Sort helper to sort an array of `[ key, value ]` in ascending order by **key**.
        helpers.array.ascendingOnKey = function (a, b) {
            return a[0] > b[0] ? 1 : a[0] === b[0] ? 0 : -1;
        }; // ascendingOnKey()

        // Sort helper to sort an array of `[ key, value ]` in descending order by **key**.
        helpers.array.descendingOnKey = function (a, b) {
            return b[0] > a[0] ? 1 : b[0] === a[0] ? 0 : -1;
        }; // descendingOnKey()

        // Sort helper to sort an array of `[ key, value ]` in ascending order by **value**.
        helpers.array.ascendingOnValue = function (a, b) {
            return a[1] > b[1] ? 1 : a[1] === b[1] ? 0 : -1;
        }; // ascendingOnValue()

        // Sort helper to sort an array of `[ key, value ]` in descending order by **value**.
        helpers.array.descendingOnValue = function (a, b) {
            return b[1] > a[1] ? 1 : b[1] === a[1] ? 0 : -1;
        }; // descendingOnValue()

        // The following two functions generate a suitable function for sorting on a single
        // key or on a composite keys (max 2 only). Just a remider, the generated function
        // does not sort on two keys; instead it will sort on a key composed of the two
        // accessors.
        // Sorts in ascending order on `accessor1` & `accessor2` (optional).
        helpers.array.ascendingOn = function (accessor1, accessor2) {
            if (accessor2) {
                return function (a, b) {
                    return a[accessor1][accessor2] > b[accessor1][accessor2] ? 1 : a[accessor1][accessor2] === b[accessor1][accessor2] ? 0 : -1;
                };
            }
            return function (a, b) {
                return a[accessor1] > b[accessor1] ? 1 : a[accessor1] === b[accessor1] ? 0 : -1;
            };
        }; // ascendingOn()

        // Sorts in descending order on `accessor1` & `accessor2` (optional).
        helpers.array.descendingOn = function (accessor1, accessor2) {
            if (accessor2) {
                return function (a, b) {
                    return b[accessor1][accessor2] > a[accessor1][accessor2] ? 1 : b[accessor1][accessor2] === a[accessor1][accessor2] ? 0 : -1;
                };
            }
            return function (a, b) {
                return b[accessor1] > a[accessor1] ? 1 : b[accessor1] === a[accessor1] ? 0 : -1;
            };
        }; // descendingOn()

        // #### pluck

        // Plucks specified element from each element of an **array of array**, and
        // returns the resultant array. The element is specified by `i` (default `0`) and
        // number of elements to pluck are defined by `limit` (default `a.length`).
        helpers.array.pluck = function (a, key, limit) {
            var k, plucked;
            k = a.length;
            var i = key || 0;
            var lim = limit || k;
            if (lim > k) lim = k;
            plucked = new Array(lim);
            for (k = 0; k < lim; k += 1) plucked[k] = a[k][i];
            return plucked;
        }; // pluck()

        // #### product

        // Finds the Cartesian Product of arrays present inside the array `a`. Therefore
        // the array `a` must be an array of 1-dimensional arrays. For example,
        // `product( [ [ 9, 8 ], [ 1, 2 ] ] )`
        // will produce `[ [ 9, 1 ], [ 9, 2 ], [ 8, 1 ], [ 8, 2 ] ]`.
        helpers.array.product = function (a) {
            return a.reduce(productReducer, [[]]);
        };

        // #### shuffle

        // Randomly shuffles the elements of an array and returns the same.
        // Reference: Chapter on Random Numbers/Shuffling in Seminumerical algorithms.
        // The Art of Computer Programming Volume II by Donald E Kunth
        helpers.array.shuffle = function (array) {
            var a = array;
            var balance = a.length;
            var candidate;
            var temp;

            while (balance) {
                candidate = Math.floor(Math.random() * balance);
                balance -= 1;

                temp = a[balance];
                a[balance] = a[candidate];
                a[candidate] = temp;
            }

            return a;
        };

        // ### Object Helpers

        var objectKeys = Object.keys;
        var objectCreate = Object.create;

        helpers.object = Object.create(null);

        // #### is Object

        // Tests if argument `v` is a JS object; returns `true` if it is, otherwise returns `false`.
        helpers.object.isObject = function (v) {
            return v && Object.prototype.toString.call(v) === '[object Object]' ? true : false; // eslint-disable-line no-unneeded-ternary
        }; // isObject()

        // #### keys

        // Returns keys of the `obj` in an array.
        helpers.object.keys = function (obj) {
            return objectKeys(obj);
        }; // keys()

        // #### size

        // Returns the number of keys of the `obj`.
        helpers.object.size = function (obj) {
            return objectKeys(obj).length;
        }; // size()

        // #### values

        // Returns all values from each key/value pair of the `obj` in an array.
        helpers.object.values = function (obj) {
            var keys = helpers.object.keys(obj);
            var length = keys.length;
            var values = new Array(length);
            for (var i = 0; i < length; i += 1) {
                values[i] = obj[keys[i]];
            }
            return values;
        }; // values()

        // #### value Freq

        // Returns the frequency of each unique value present in the `obj`, where the
        // **key** is the *value* and **value** is the *frequency*.
        helpers.object.valueFreq = function (obj) {
            var keys = helpers.object.keys(obj);
            var length = keys.length;
            var val;
            var vf = objectCreate(null);
            for (var i = 0; i < length; i += 1) {
                val = obj[keys[i]];
                vf[val] = 1 + (vf[val] || 0);
            }
            return vf;
        }; // valueFreq()

        // #### table

        // Converts the `obj` in to an array of `[ key, value ]` pairs in form of a table.
        // Second argument - `f` is optional and it is a function, which is called with
        // each `value`.
        helpers.object.table = function (obj, f) {
            var keys = helpers.object.keys(obj);
            var length = keys.length;
            var pairs = new Array(length);
            var ak, av;
            for (var i = 0; i < length; i += 1) {
                ak = keys[i];
                av = obj[ak];
                if (typeof f === 'function') f(av);
                pairs[i] = [ak, av];
            }
            return pairs;
        }; // table()

        // ### Validation Helpers

        helpers.validate = Object.create(null);

        // Create aliases for isObject and isArray.
        helpers.validate.isObject = helpers.object.isObject;
        helpers.validate.isArray = helpers.array.isArray;

        // #### isFiniteInteger

        // Validates if `n` is a finite integer.
        helpers.validate.isFiniteInteger = function (n) {
            return typeof n === 'number' && !isNaN(n) && isFinite(n) && n === Math.round(n);
        }; // isFiniteInteger()

        // #### isFiniteNumber

        // Validates if `n` is a valid number.
        helpers.validate.isFiniteNumber = function (n) {
            return typeof n === 'number' && !isNaN(n) && isFinite(n);
        }; // isFiniteNumber()

        // ### cross validation
        /**
         *
         * Creates an instance of cross validator useful for machine learning tasks.
         *
         * @param {string[]} classLabels - array containing all the class labels.
         * @return {methods} object conatining set of API methods for tasks like evalutaion,
         * reset and metrics generation.
        */
        helpers.validate.cross = function (classLabels) {
            // wink's const for unknown predictions!
            const unknown = 'unknown';
            // To ensure that metrics is not computed prior to evaluation.
            var evaluated = false;
            // The confusion matrix.
            var cm;
            var precision;
            var recall;
            var fmeasure;

            // The class labels is assigned to this variable.
            var labels;
            // The length of `labels` array.
            var labelCount;
            var labelsObj = Object.create(null);

            // Returned!
            var methods = Object.create(null);

            /**
             *
             * Resets the current instance for another round of evaluation; the class
             * labels defined at instance creation time are not touched.
             *
             * @return {undefined} nothing!
            */
            var reset = function () {
                evaluated = false;
                cm = Object.create(null);
                precision = Object.create(null);
                recall = Object.create(null);
                fmeasure = Object.create(null);

                // Initialize confusion matrix and metrics.
                for (let i = 0; i < labelCount; i += 1) {
                    const row = labels[i];
                    labelsObj[row] = true;
                    cm[row] = Object.create(null);
                    precision[row] = 0;
                    recall[row] = 0;
                    fmeasure[row] = 0;
                    for (let j = 0; j < labelCount; j += 1) {
                        const col = labels[j];
                        cm[row][col] = 0;
                    }
                }
            }; // reset()

            /**
             *
             * Creates an instance of cross validator useful for machine learning tasks.
             *
             * @param {string} truth - the actual class label.
             * @param {string} guess - the predicted class label.
             * @return {boolean} returns true if the evaluation is successful. The evaluation
             * may fail if `truth` or `guess` is not in the array `classLabels` provided at
             * instance creation time; or if guess is equal to `unknown`.
            */
            var evaluate = function (truth, guess) {
                // If prediction failed then return false!
                if (guess === unknown || !labelsObj[truth] || !labelsObj[guess]) return false;
                // Update confusion matrix.
                if (guess === truth) {
                    cm[truth][guess] += 1;
                } else {
                    cm[guess][truth] += 1;
                }
                evaluated = true;
                return true;
            }; // evaluate()

            /**
             *
             * It computes a detailed metrics consisting of macro-averaged precision,
             * recall and f-measure along with their label-wise values and the confusion
             * matrix.
             *
             * @return {object} object containing macro-averaged `avgPrecision`, `avgRecall`,
             * `avgFMeasure` values along with other details such as label-wise values
             * and the confusion matrix. A value of `null` is returned if no evaluate()
             * has been called before.
            */
            var metrics = function () {
                if (!evaluated) return null;
                // Numerators for every label; they are same for precision & recall both.
                var n = Object.create(null);
                // Only denominators differs for precision & recall
                var pd = Object.create(null);
                var rd = Object.create(null);
                // `row` and `col` of confusion matrix.
                var col, row;
                var i, j;
                // Macro average values for metrics.
                var avgPrecision = 0;
                var avgRecall = 0;
                var avgFMeasure = 0;

                // Compute label-wise numerators & denominators!
                for (i = 0; i < labelCount; i += 1) {
                    row = labels[i];
                    for (j = 0; j < labelCount; j += 1) {
                        col = labels[j];
                        if (row === col) {
                            n[row] = cm[row][col];
                        }
                        pd[row] = cm[row][col] + (pd[row] || 0);
                        rd[row] = cm[col][row] + (rd[row] || 0);
                    }
                }
                // Ready to compute metrics.
                for (i = 0; i < labelCount; i += 1) {
                    row = labels[i];
                    precision[row] = +(n[row] / pd[row]).toFixed(4);
                    // NaN can occur if a label has not been encountered.
                    if (isNaN(precision[row])) precision[row] = 0;

                    recall[row] = +(n[row] / rd[row]).toFixed(4);
                    if (isNaN(recall[row])) recall[row] = 0;

                    fmeasure[row] = +(2 * precision[row] * recall[row] / (precision[row] + recall[row])).toFixed(4);
                    if (isNaN(fmeasure[row])) fmeasure[row] = 0;
                }
                // Compute thier averages, note they will be macro avegages.
                for (i = 0; i < labelCount; i += 1) {
                    avgPrecision += precision[labels[i]] / labelCount;
                    avgRecall += recall[labels[i]] / labelCount;
                    avgFMeasure += fmeasure[labels[i]] / labelCount;
                }
                // Return metrics.
                return {
                    // Macro-averaged metrics.
                    avgPrecision: +avgPrecision.toFixed(4),
                    avgRecall: +avgRecall.toFixed(4),
                    avgFMeasure: +avgFMeasure.toFixed(4),
                    details: {
                        // Confusion Matrix.
                        confusionMatrix: cm,
                        // Label wise metrics details, from those averages were computed.
                        precision: precision,
                        recall: recall,
                        fmeasure: fmeasure
                    }
                };
            }; // metrics()

            if (!helpers.validate.isArray(classLabels)) {
                throw Error('cross validate: class labels must be an array.');
            }
            if (classLabels.length < 2) {
                throw Error('cross validate: at least 2 class labels are required.');
            }
            labels = classLabels;
            labelCount = labels.length;

            reset();

            methods.reset = reset;
            methods.evaluate = evaluate;
            methods.metrics = metrics;

            return methods;
        }; // cross()

        // ### Object Helpers

        helpers.string = Object.create(null);

        // Regex for [diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) removal.
        var rgxDiacritical = /[\u0300-\u036f]/g;

        /**
         *
         * Normalizes the token's value by converting it to lower case and stripping
         * the diacritical marks (if any).
         *
         * @param {string} str — that needs to be normalized.
         * @return {string} the normalized value.
         * @example
         * normalize( 'Nestlé' );
         * // -> nestle
        */
        helpers.string.normalize = function (str) {
            return str.toLowerCase().normalize('NFD').replace(rgxDiacritical, '');
        }; // normalize()

        module.exports = helpers;
    }, {}], 18: [function (require, module, exports) {
        //     wink-tokenizer
        //     Multilingual tokenizer that automatically tags each token with its type.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-tokenizer”.
        //
        //     “wink-tokenizer” is free software: you can redistribute
        //     it and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-tokenizer” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-tokenizer”.
        //     If not, see <http://www.gnu.org/licenses/>.

        var contractions = Object.create(null);

        // Tag - word.
        var word = 'word';
        // Verbs.
        contractions['can\'t'] = [{ value: 'ca', tag: word }, { value: 'n\'t', tag: word }];
        contractions['CAN\'T'] = [{ value: 'CA', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Can\'t'] = [{ value: 'Ca', tag: word }, { value: 'n\'t', tag: word }];

        contractions['Couldn\'t'] = [{ value: 'could', tag: word }, { value: 'n\'t', tag: word }];
        contractions['COULDN\'T'] = [{ value: 'COULD', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Couldn\'t'] = [{ value: 'Could', tag: word }, { value: 'n\'t', tag: word }];

        contractions['don\'t'] = [{ value: 'do', tag: word }, { value: 'n\'t', tag: word }];
        contractions['DON\'T'] = [{ value: 'DO', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Don\'t'] = [{ value: 'Do', tag: word }, { value: 'n\'t', tag: word }];

        contractions['doesn\'t'] = [{ value: 'does', tag: word }, { value: 'n\'t', tag: word }];
        contractions['DOESN\'T'] = [{ value: 'DOES', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Doesn\'t'] = [{ value: 'Does', tag: word }, { value: 'n\'t', tag: word }];

        contractions['didn\'t'] = [{ value: 'did', tag: word }, { value: 'n\'t', tag: word }];
        contractions['DIDN\'T'] = [{ value: 'DID', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Didn\'t'] = [{ value: 'Did', tag: word }, { value: 'n\'t', tag: word }];

        contractions['hadn\'t'] = [{ value: 'had', tag: word }, { value: 'n\'t', tag: word }];
        contractions['HADN\'T'] = [{ value: 'HAD', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Hadn\'t'] = [{ value: 'Had', tag: word }, { value: 'n\'t', tag: word }];

        contractions['mayn\'t'] = [{ value: 'may', tag: word }, { value: 'n\'t', tag: word }];
        contractions['MAYN\'T'] = [{ value: 'MAY', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Mayn\'t'] = [{ value: 'May', tag: word }, { value: 'n\'t', tag: word }];

        contractions['mightn\'t'] = [{ value: 'might', tag: word }, { value: 'n\'t', tag: word }];
        contractions['MIGHTN\'T'] = [{ value: 'MIGHT', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Mightn\'t'] = [{ value: 'Might', tag: word }, { value: 'n\'t', tag: word }];

        contractions['mustn\'t'] = [{ value: 'must', tag: word }, { value: 'n\'t', tag: word }];
        contractions['MUSTN\'T'] = [{ value: 'MUST', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Mustn\'t'] = [{ value: 'Must', tag: word }, { value: 'n\'t', tag: word }];

        contractions['needn\'t'] = [{ value: 'need', tag: word }, { value: 'n\'t', tag: word }];
        contractions['NEEDN\'T'] = [{ value: 'NEED', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Needn\'t'] = [{ value: 'Need', tag: word }, { value: 'n\'t', tag: word }];

        contractions['oughtn\'t'] = [{ value: 'ought', tag: word }, { value: 'n\'t', tag: word }];
        contractions['OUGHTN\'T'] = [{ value: 'OUGHT', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Oughtn\'t'] = [{ value: 'Ought', tag: word }, { value: 'n\'t', tag: word }];

        contractions['shan\'t'] = [{ value: 'sha', tag: word }, { value: 'n\'t', tag: word }];
        contractions['SHAN\'T'] = [{ value: 'SHA', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Shan\'t'] = [{ value: 'Sha', tag: word }, { value: 'n\'t', tag: word }];

        contractions['shouldn\'t'] = [{ value: 'should', tag: word }, { value: 'n\'t', tag: word }];
        contractions['SHOULDN\'T'] = [{ value: 'SHOULD', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Shouldn\'t'] = [{ value: 'Should', tag: word }, { value: 'n\'t', tag: word }];

        contractions['won\'t'] = [{ value: 'wo', tag: word }, { value: 'n\'t', tag: word }];
        contractions['WON\'T'] = [{ value: 'WO', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Won\'t'] = [{ value: 'Wo', tag: word }, { value: 'n\'t', tag: word }];

        contractions['wouldn\'t'] = [{ value: 'would', tag: word }, { value: 'n\'t', tag: word }];
        contractions['WOULDN\'T'] = [{ value: 'WOULD', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Wouldn\'t'] = [{ value: 'Would', tag: word }, { value: 'n\'t', tag: word }];

        contractions['ain\'t'] = [{ value: 'ai', tag: word }, { value: 'n\'t', tag: word }];
        contractions['AIN\'T'] = [{ value: 'AI', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Ain\'t'] = [{ value: 'Ai', tag: word }, { value: 'n\'t', tag: word }];

        contractions['aren\'t'] = [{ value: 'are', tag: word }, { value: 'n\'t', tag: word }];
        contractions['AREN\'T'] = [{ value: 'ARE', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Aren\'t'] = [{ value: 'Are', tag: word }, { value: 'n\'t', tag: word }];

        contractions['isn\'t'] = [{ value: 'is', tag: word }, { value: 'n\'t', tag: word }];
        contractions['ISN\'T'] = [{ value: 'IS', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Isn\'t'] = [{ value: 'Is', tag: word }, { value: 'n\'t', tag: word }];

        contractions['wasn\'t'] = [{ value: 'was', tag: word }, { value: 'n\'t', tag: word }];
        contractions['WASN\'T'] = [{ value: 'WAS', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Wasn\'t'] = [{ value: 'Was', tag: word }, { value: 'n\'t', tag: word }];

        contractions['weren\'t'] = [{ value: 'were', tag: word }, { value: 'n\'t', tag: word }];
        contractions['WEREN\'T'] = [{ value: 'WERE', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Weren\'t'] = [{ value: 'Were', tag: word }, { value: 'n\'t', tag: word }];

        contractions['haven\'t'] = [{ value: 'have', tag: word }, { value: 'n\'t', tag: word }];
        contractions['HAVEN\'T'] = [{ value: 'HAVE', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Haven\'t'] = [{ value: 'Have', tag: word }, { value: 'n\'t', tag: word }];

        contractions['hasn\'t'] = [{ value: 'has', tag: word }, { value: 'n\'t', tag: word }];
        contractions['HASN\'T'] = [{ value: 'HAS', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Hasn\'t'] = [{ value: 'Has', tag: word }, { value: 'n\'t', tag: word }];

        contractions['daren\'t'] = [{ value: 'dare', tag: word }, { value: 'n\'t', tag: word }];
        contractions['DAREN\'T'] = [{ value: 'DARE', tag: word }, { value: 'N\'T', tag: word }];
        contractions['Daren\'t'] = [{ value: 'Dare', tag: word }, { value: 'n\'t', tag: word }];

        // Pronouns like I, you, they, we, she, and he.
        contractions['i\'m'] = [{ value: 'i', tag: word }, { value: '\'m', tag: word }];
        contractions['I\'M'] = [{ value: 'I', tag: word }, { value: '\'M', tag: word }];
        contractions['I\'m'] = [{ value: 'I', tag: word }, { value: '\'m', tag: word }];

        contractions['i\'ve'] = [{ value: 'i', tag: word }, { value: '\'ve', tag: word }];
        contractions['I\'VE'] = [{ value: 'I', tag: word }, { value: '\'VE', tag: word }];
        contractions['I\'ve'] = [{ value: 'I', tag: word }, { value: '\'ve', tag: word }];

        contractions['i\'d'] = [{ value: 'i', tag: word }, { value: '\'d', tag: word }];
        contractions['I\'D'] = [{ value: 'I', tag: word }, { value: '\'D', tag: word }];
        contractions['I\'d'] = [{ value: 'I', tag: word }, { value: '\'d', tag: word }];

        contractions['i\'ll'] = [{ value: 'i', tag: word }, { value: '\'ll', tag: word }];
        contractions['I\'LL'] = [{ value: 'I', tag: word }, { value: '\'LL', tag: word }];
        contractions['I\'ll'] = [{ value: 'I', tag: word }, { value: '\'ll', tag: word }];

        contractions['you\'ve'] = [{ value: 'you', tag: word }, { value: '\'ve', tag: word }];
        contractions['YOU\'VE'] = [{ value: 'YOU', tag: word }, { value: '\'VE', tag: word }];
        contractions['You\'ve'] = [{ value: 'You', tag: word }, { value: '\'ve', tag: word }];

        contractions['you\'d'] = [{ value: 'you', tag: word }, { value: '\'d', tag: word }];
        contractions['YOU\'D'] = [{ value: 'YOU', tag: word }, { value: '\'D', tag: word }];
        contractions['You\'d'] = [{ value: 'You', tag: word }, { value: '\'d', tag: word }];

        contractions['you\'ll'] = [{ value: 'you', tag: word }, { value: '\'ll', tag: word }];
        contractions['YOU\'LL'] = [{ value: 'YOU', tag: word }, { value: '\'LL', tag: word }];
        contractions['You\'ll'] = [{ value: 'You', tag: word }, { value: '\'ll', tag: word }];

        // they - 've, 'd, 'll, 're
        contractions['they\'ve'] = [{ value: 'they', tag: word }, { value: '\'ve', tag: word }];
        contractions['THEY\'VE'] = [{ value: 'THEY', tag: word }, { value: '\'VE', tag: word }];
        contractions['They\'ve'] = [{ value: 'They', tag: word }, { value: '\'ve', tag: word }];

        contractions['they\'d'] = [{ value: 'they', tag: word }, { value: '\'d', tag: word }];
        contractions['THEY\'D'] = [{ value: 'THEY', tag: word }, { value: '\'D', tag: word }];
        contractions['They\'d'] = [{ value: 'They', tag: word }, { value: '\'d', tag: word }];

        contractions['they\'ll'] = [{ value: 'they', tag: word }, { value: '\'ll', tag: word }];
        contractions['THEY\'LL'] = [{ value: 'THEY', tag: word }, { value: '\'LL', tag: word }];
        contractions['They\'ll'] = [{ value: 'They', tag: word }, { value: '\'ll', tag: word }];

        contractions['they\'re'] = [{ value: 'they', tag: word }, { value: '\'re', tag: word }];
        contractions['THEY\'RE'] = [{ value: 'THEY', tag: word }, { value: '\'RE', tag: word }];
        contractions['They\'re'] = [{ value: 'They', tag: word }, { value: '\'re', tag: word }];

        contractions['we\'ve'] = [{ value: 'we', tag: word }, { value: '\'ve', tag: word }];
        contractions['WE\'VE'] = [{ value: 'WE', tag: word }, { value: '\'VE', tag: word }];
        contractions['We\'ve'] = [{ value: 'We', tag: word }, { value: '\'ve', tag: word }];

        contractions['we\'d'] = [{ value: 'we', tag: word }, { value: '\'d', tag: word }];
        contractions['WE\'D'] = [{ value: 'WE', tag: word }, { value: '\'D', tag: word }];
        contractions['We\'d'] = [{ value: 'We', tag: word }, { value: '\'d', tag: word }];

        contractions['we\'ll'] = [{ value: 'we', tag: word }, { value: '\'ll', tag: word }];
        contractions['WE\'LL'] = [{ value: 'WE', tag: word }, { value: '\'LL', tag: word }];
        contractions['We\'ll'] = [{ value: 'We', tag: word }, { value: '\'ll', tag: word }];

        contractions['we\'re'] = [{ value: 'we', tag: word }, { value: '\'re', tag: word }];
        contractions['WE\'RE'] = [{ value: 'WE', tag: word }, { value: '\'RE', tag: word }];
        contractions['We\'re'] = [{ value: 'We', tag: word }, { value: '\'re', tag: word }];

        contractions['she\'d'] = [{ value: 'she', tag: word }, { value: '\'d', tag: word }];
        contractions['SHE\'D'] = [{ value: 'SHE', tag: word }, { value: '\'D', tag: word }];
        contractions['She\'d'] = [{ value: 'She', tag: word }, { value: '\'d', tag: word }];

        contractions['she\'ll'] = [{ value: 'she', tag: word }, { value: '\'ll', tag: word }];
        contractions['SHE\'LL'] = [{ value: 'SHE', tag: word }, { value: '\'LL', tag: word }];
        contractions['She\'ll'] = [{ value: 'She', tag: word }, { value: '\'ll', tag: word }];

        contractions['she\'s'] = [{ value: 'she', tag: word }, { value: '\'s', tag: word }];
        contractions['SHE\'S'] = [{ value: 'SHE', tag: word }, { value: '\'S', tag: word }];
        contractions['She\'s'] = [{ value: 'She', tag: word }, { value: '\'s', tag: word }];

        contractions['he\'d'] = [{ value: 'he', tag: word }, { value: '\'d', tag: word }];
        contractions['HE\'D'] = [{ value: 'HE', tag: word }, { value: '\'D', tag: word }];
        contractions['He\'d'] = [{ value: 'He', tag: word }, { value: '\'d', tag: word }];

        contractions['he\'ll'] = [{ value: 'he', tag: word }, { value: '\'ll', tag: word }];
        contractions['HE\'LL'] = [{ value: 'HE', tag: word }, { value: '\'LL', tag: word }];
        contractions['He\'ll'] = [{ value: 'He', tag: word }, { value: '\'ll', tag: word }];

        contractions['he\'s'] = [{ value: 'he', tag: word }, { value: '\'s', tag: word }];
        contractions['HE\'S'] = [{ value: 'HE', tag: word }, { value: '\'S', tag: word }];
        contractions['He\'s'] = [{ value: 'He', tag: word }, { value: '\'s', tag: word }];

        contractions['it\'d'] = [{ value: 'it', tag: word }, { value: '\'d', tag: word }];
        contractions['IT\'D'] = [{ value: 'IT', tag: word }, { value: '\'D', tag: word }];
        contractions['It\'d'] = [{ value: 'It', tag: word }, { value: '\'d', tag: word }];

        contractions['it\'ll'] = [{ value: 'it', tag: word }, { value: '\'ll', tag: word }];
        contractions['IT\'LL'] = [{ value: 'IT', tag: word }, { value: '\'LL', tag: word }];
        contractions['It\'ll'] = [{ value: 'It', tag: word }, { value: '\'ll', tag: word }];

        contractions['it\'s'] = [{ value: 'it', tag: word }, { value: '\'s', tag: word }];
        contractions['IT\'S'] = [{ value: 'IT', tag: word }, { value: '\'S', tag: word }];
        contractions['It\'s'] = [{ value: 'It', tag: word }, { value: '\'s', tag: word }];

        // Wh Pronouns - what, who, when, where, why, how, there, that
        contractions['what\'ve'] = [{ value: 'what', tag: word }, { value: '\'ve', tag: word }];
        contractions['WHAT\'VE'] = [{ value: 'WHAT', tag: word }, { value: '\'VE', tag: word }];
        contractions['What\'ve'] = [{ value: 'What', tag: word }, { value: '\'ve', tag: word }];

        contractions['what\'d'] = [{ value: 'what', tag: word }, { value: '\'d', tag: word }];
        contractions['WHAT\'D'] = [{ value: 'WHAT', tag: word }, { value: '\'D', tag: word }];
        contractions['What\'d'] = [{ value: 'What', tag: word }, { value: '\'d', tag: word }];

        contractions['what\'ll'] = [{ value: 'what', tag: word }, { value: '\'ll', tag: word }];
        contractions['WHAT\'LL'] = [{ value: 'WHAT', tag: word }, { value: '\'LL', tag: word }];
        contractions['What\'ll'] = [{ value: 'What', tag: word }, { value: '\'ll', tag: word }];

        contractions['what\'re'] = [{ value: 'what', tag: word }, { value: '\'re', tag: word }];
        contractions['WHAT\'RE'] = [{ value: 'WHAT', tag: word }, { value: '\'RE', tag: word }];
        contractions['What\'re'] = [{ value: 'What', tag: word }, { value: '\'re', tag: word }];

        contractions['who\'ve'] = [{ value: 'who', tag: word }, { value: '\'ve', tag: word }];
        contractions['WHO\'VE'] = [{ value: 'WHO', tag: word }, { value: '\'VE', tag: word }];
        contractions['Who\'ve'] = [{ value: 'Who', tag: word }, { value: '\'ve', tag: word }];

        contractions['who\'d'] = [{ value: 'who', tag: word }, { value: '\'d', tag: word }];
        contractions['WHO\'D'] = [{ value: 'WHO', tag: word }, { value: '\'D', tag: word }];
        contractions['Who\'d'] = [{ value: 'Who', tag: word }, { value: '\'d', tag: word }];

        contractions['who\'ll'] = [{ value: 'who', tag: word }, { value: '\'ll', tag: word }];
        contractions['WHO\'LL'] = [{ value: 'WHO', tag: word }, { value: '\'LL', tag: word }];
        contractions['Who\'ll'] = [{ value: 'Who', tag: word }, { value: '\'ll', tag: word }];

        contractions['who\'re'] = [{ value: 'who', tag: word }, { value: '\'re', tag: word }];
        contractions['WHO\'RE'] = [{ value: 'WHO', tag: word }, { value: '\'RE', tag: word }];
        contractions['Who\'re'] = [{ value: 'Who', tag: word }, { value: '\'re', tag: word }];

        contractions['when\'ve'] = [{ value: 'when', tag: word }, { value: '\'ve', tag: word }];
        contractions['WHEN\'VE'] = [{ value: 'WHEN', tag: word }, { value: '\'VE', tag: word }];
        contractions['When\'ve'] = [{ value: 'When', tag: word }, { value: '\'ve', tag: word }];

        contractions['when\'d'] = [{ value: 'when', tag: word }, { value: '\'d', tag: word }];
        contractions['WHEN\'D'] = [{ value: 'WHEN', tag: word }, { value: '\'D', tag: word }];
        contractions['When\'d'] = [{ value: 'When', tag: word }, { value: '\'d', tag: word }];

        contractions['when\'ll'] = [{ value: 'when', tag: word }, { value: '\'ll', tag: word }];
        contractions['WHEN\'LL'] = [{ value: 'WHEN', tag: word }, { value: '\'LL', tag: word }];
        contractions['When\'ll'] = [{ value: 'When', tag: word }, { value: '\'ll', tag: word }];

        contractions['when\'re'] = [{ value: 'when', tag: word }, { value: '\'re', tag: word }];
        contractions['WHEN\'RE'] = [{ value: 'WHEN', tag: word }, { value: '\'RE', tag: word }];
        contractions['When\'re'] = [{ value: 'When', tag: word }, { value: '\'re', tag: word }];

        contractions['where\'ve'] = [{ value: 'where', tag: word }, { value: '\'ve', tag: word }];
        contractions['WHERE\'VE'] = [{ value: 'WHERE', tag: word }, { value: '\'VE', tag: word }];
        contractions['Where\'ve'] = [{ value: 'Where', tag: word }, { value: '\'ve', tag: word }];

        contractions['where\'d'] = [{ value: 'where', tag: word }, { value: '\'d', tag: word }];
        contractions['WHERE\'D'] = [{ value: 'WHERE', tag: word }, { value: '\'D', tag: word }];
        contractions['Where\'d'] = [{ value: 'Where', tag: word }, { value: '\'d', tag: word }];

        contractions['where\'ll'] = [{ value: 'where', tag: word }, { value: '\'ll', tag: word }];
        contractions['WHERE\'LL'] = [{ value: 'WHERE', tag: word }, { value: '\'LL', tag: word }];
        contractions['Where\'ll'] = [{ value: 'Where', tag: word }, { value: '\'ll', tag: word }];

        contractions['where\'re'] = [{ value: 'where', tag: word }, { value: '\'re', tag: word }];
        contractions['WHERE\'RE'] = [{ value: 'WHERE', tag: word }, { value: '\'RE', tag: word }];
        contractions['Where\'re'] = [{ value: 'Where', tag: word }, { value: '\'re', tag: word }];

        contractions['why\'ve'] = [{ value: 'why', tag: word }, { value: '\'ve', tag: word }];
        contractions['WHY\'VE'] = [{ value: 'WHY', tag: word }, { value: '\'VE', tag: word }];
        contractions['Why\'ve'] = [{ value: 'Why', tag: word }, { value: '\'ve', tag: word }];

        contractions['why\'d'] = [{ value: 'why', tag: word }, { value: '\'d', tag: word }];
        contractions['WHY\'D'] = [{ value: 'WHY', tag: word }, { value: '\'D', tag: word }];
        contractions['Why\'d'] = [{ value: 'Why', tag: word }, { value: '\'d', tag: word }];

        contractions['why\'ll'] = [{ value: 'why', tag: word }, { value: '\'ll', tag: word }];
        contractions['WHY\'LL'] = [{ value: 'WHY', tag: word }, { value: '\'LL', tag: word }];
        contractions['Why\'ll'] = [{ value: 'Why', tag: word }, { value: '\'ll', tag: word }];

        contractions['why\'re'] = [{ value: 'why', tag: word }, { value: '\'re', tag: word }];
        contractions['WHY\'RE'] = [{ value: 'WHY', tag: word }, { value: '\'RE', tag: word }];
        contractions['Why\'re'] = [{ value: 'Why', tag: word }, { value: '\'re', tag: word }];

        contractions['how\'ve'] = [{ value: 'how', tag: word }, { value: '\'ve', tag: word }];
        contractions['HOW\'VE'] = [{ value: 'HOW', tag: word }, { value: '\'VE', tag: word }];
        contractions['How\'ve'] = [{ value: 'How', tag: word }, { value: '\'ve', tag: word }];

        contractions['how\'d'] = [{ value: 'how', tag: word }, { value: '\'d', tag: word }];
        contractions['HOW\'D'] = [{ value: 'HOW', tag: word }, { value: '\'D', tag: word }];
        contractions['How\'d'] = [{ value: 'How', tag: word }, { value: '\'d', tag: word }];

        contractions['how\'ll'] = [{ value: 'how', tag: word }, { value: '\'ll', tag: word }];
        contractions['HOW\'LL'] = [{ value: 'HOW', tag: word }, { value: '\'LL', tag: word }];
        contractions['How\'ll'] = [{ value: 'How', tag: word }, { value: '\'ll', tag: word }];

        contractions['how\'re'] = [{ value: 'how', tag: word }, { value: '\'re', tag: word }];
        contractions['HOW\'RE'] = [{ value: 'HOW', tag: word }, { value: '\'RE', tag: word }];
        contractions['How\'re'] = [{ value: 'How', tag: word }, { value: '\'re', tag: word }];

        contractions['there\'ve'] = [{ value: 'there', tag: word }, { value: '\'ve', tag: word }];
        contractions['THERE\'VE'] = [{ value: 'THERE', tag: word }, { value: '\'VE', tag: word }];
        contractions['There\'ve'] = [{ value: 'There', tag: word }, { value: '\'ve', tag: word }];

        contractions['there\'d'] = [{ value: 'there', tag: word }, { value: '\'d', tag: word }];
        contractions['THERE\'D'] = [{ value: 'THERE', tag: word }, { value: '\'D', tag: word }];
        contractions['There\'d'] = [{ value: 'There', tag: word }, { value: '\'d', tag: word }];

        contractions['there\'ll'] = [{ value: 'there', tag: word }, { value: '\'ll', tag: word }];
        contractions['THERE\'LL'] = [{ value: 'THERE', tag: word }, { value: '\'LL', tag: word }];
        contractions['There\'ll'] = [{ value: 'There', tag: word }, { value: '\'ll', tag: word }];

        contractions['there\'re'] = [{ value: 'there', tag: word }, { value: '\'re', tag: word }];
        contractions['THERE\'RE'] = [{ value: 'THERE', tag: word }, { value: '\'RE', tag: word }];
        contractions['There\'re'] = [{ value: 'There', tag: word }, { value: '\'re', tag: word }];

        contractions['that\'ve'] = [{ value: 'that', tag: word }, { value: '\'ve', tag: word }];
        contractions['THAT\'VE'] = [{ value: 'THAT', tag: word }, { value: '\'VE', tag: word }];
        contractions['That\'ve'] = [{ value: 'That', tag: word }, { value: '\'ve', tag: word }];

        contractions['that\'d'] = [{ value: 'that', tag: word }, { value: '\'d', tag: word }];
        contractions['THAT\'D'] = [{ value: 'THAT', tag: word }, { value: '\'D', tag: word }];
        contractions['That\'d'] = [{ value: 'That', tag: word }, { value: '\'d', tag: word }];

        contractions['that\'ll'] = [{ value: 'that', tag: word }, { value: '\'ll', tag: word }];
        contractions['THAT\'LL'] = [{ value: 'THAT', tag: word }, { value: '\'LL', tag: word }];
        contractions['That\'ll'] = [{ value: 'That', tag: word }, { value: '\'ll', tag: word }];

        contractions['that\'re'] = [{ value: 'that', tag: word }, { value: '\'re', tag: word }];
        contractions['THAT\'RE'] = [{ value: 'THAT', tag: word }, { value: '\'RE', tag: word }];
        contractions['That\'re'] = [{ value: 'That', tag: word }, { value: '\'re', tag: word }];

        // Let us!
        contractions['let\'s'] = [{ value: 'let', tag: word }, { value: '\'s', tag: word }];
        contractions['LET\'S'] = [{ value: 'THAT', tag: word }, { value: '\'S', tag: word }];
        contractions['Let\'s'] = [{ value: 'Let', tag: word }, { value: '\'s', lemma: 'us' }];

        module.exports = contractions;
    }, {}], 19: [function (require, module, exports) {
        //     wink-tokenizer
        //     Multilingual tokenizer that automatically tags each token with its type.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-tokenizer”.
        //
        //     “wink-tokenizer” is free software: you can redistribute
        //     it and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-tokenizer” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-tokenizer”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var contractions = require('./eng-contractions.js');
        var rgxSpaces = /\s+/g;
        // Ordinals only for Latin like 1st, 2nd or 12th or 33rd.
        var rgxOrdinalL1 = /1\dth|[04-9]th|1st|2nd|3rd|[02-9]1st|[02-9]2nd|[02-9]3rd|[02-9][04-9]th|\d+\d[04-9]th|\d+\d1st|\d+\d2nd|\d+\d3rd/g;
        // Apart from detecting pure integers or decimals, also detect numbers containing
        // `. - / ,` so that dates, ip address, fractions and things like codes or part
        // numbers are also detected as numbers only. These regex will therefore detected
        // 8.8.8.8 or 12-12-1924 or 1,1,1,1.00 or 1/4 or 1/4/66/777 as numbers.
        // Latin-1 Numbers.
        var rgxNumberL1 = /\d+\/\d+|\d(?:[\.\,\-\/]?\d)*(?:\.\d+)?/g;
        // Devanagari Numbers.
        var rgxNumberDV = /[\u0966-\u096F]+\/[\u0966-\u096F]+|[\u0966-\u096F](?:[\.\,\-\/]?[\u0966-\u096F])*(?:\.[\u0966-\u096F]+)?/g;
        var rgxMention = /\@\w+/g;
        // Latin-1 Hashtags.
        var rgxHashtagL1 = /\#[a-z][a-z0-9]*/gi;
        // Devanagari Hashtags; include Latin-1 as well.
        var rgxHashtagDV = /\#[\u0900-\u0963\u0970-\u097F][\u0900-\u0963\u0970-\u097F\u0966-\u096F0-9]*/gi;
        // EMail is EN character set.
        var rgxEmail = /[-!#$%&'*+\/=?^\w{|}~](?:\.?[-!#$%&'*+\/=?^\w`{|}~])*@[a-z0-9](?:-?\.?[a-z0-9])*(?:\.[a-z](?:-?[a-z0-9])*)+/gi;
        // Bitcoin, Ruble, Indian Rupee, Other Rupee, Dollar, Pound, Yen, Euro, Wong.
        var rgxCurrency = /[\₿\₽\₹\₨\$\£\¥\€\₩]/g;
        // These include both the punctuations: Latin-1 & Devanagari.
        var rgxPunctuation = /[\’\'\‘\’\`\“\”\"\[\]\(\)\{\}\…\,\.\!\;\?\/\-\:\u0964\u0965]/g;
        var rgxQuotedPhrase = /\"[^\"]*\"/g;
        // NOTE: URL will support only EN character set for now.
        var rgxURL = /(?:https?:\/\/)(?:[\da-z\.-]+)\.(?:[a-z\.]{2,6})(?:[\/\w\.\-\?#=]*)*\/?/gi;
        var rgxEmoji = /[\uD800-\uDBFF][\uDC00-\uDFFF]|[\u2600-\u26FF]|[\u2700-\u27BF]/g;
        var rgxEmoticon = /:-?[dps\*\/\[\]\{\}\(\)]|;-?[/(/)d]|<3/gi;
        var rgxTime = /(?:\d|[01]\d|2[0-3]):?(?:[0-5][0-9])?\s?(?:[ap]\.?m\.?|hours|hrs)/gi;
        // Inlcude [Latin-1 Supplement Unicode Block](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block))
        var rgxWordL1 = /[a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF][a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF\']*/gi;
        // Define [Devanagari Unicode Block](https://unicode.org/charts/PDF/U0900.pdf)
        var rgxWordDV = /[\u0900-\u094F\u0951-\u0963\u0970-\u097F]+/gi;
        // Symbols go here; including Om.
        var rgxSymbol = /[\u0950\~\@\#\%\^\+\=\*\|<>&]/g;
        // For detecting if the word is a potential contraction.
        var rgxContraction = /\'/;
        // Singular & Plural possessive
        var rgxPosSingular = /([a-z]+)(\'s)$/i;
        var rgxPosPlural = /([a-z]+s)(\')$/i;
        // Regexes and their categories; used for tokenizing via match/split. The
        // sequence is *critical* for correct tokenization.
        var rgxsMaster = [{ regex: rgxQuotedPhrase, category: 'quoted_phrase' }, { regex: rgxURL, category: 'url' }, { regex: rgxEmail, category: 'email' }, { regex: rgxMention, category: 'mention' }, { regex: rgxHashtagL1, category: 'hashtag' }, { regex: rgxHashtagDV, category: 'hashtag' }, { regex: rgxEmoji, category: 'emoji' }, { regex: rgxEmoticon, category: 'emoticon' }, { regex: rgxTime, category: 'time' }, { regex: rgxOrdinalL1, category: 'ordinal' }, { regex: rgxNumberL1, category: 'number' }, { regex: rgxNumberDV, category: 'number' }, { regex: rgxCurrency, category: 'currency' }, { regex: rgxWordL1, category: 'word' }, { regex: rgxWordDV, category: 'word' }, { regex: rgxPunctuation, category: 'punctuation' }, { regex: rgxSymbol, category: 'symbol' }];

        // Used to generate finger print from the tokens.
        // NOTE: this variable is being reset in `defineConfig()`.
        var fingerPrintCodes = {
            emoticon: 'c',
            email: 'e',
            emoji: 'j',
            hashtag: 'h',
            mention: 'm',
            number: 'n',
            ordinal: 'o',
            quoted_phrase: 'q', // eslint-disable-line camelcase
            currency: 'r',
            // symbol: 's',
            time: 't',
            url: 'u',
            word: 'w',
            alien: 'z'
        };

        // ### tokenizer
        /**
         *
         * Creates an instance of **`wink-tokenizer`**.
         *
         * @return {methods} object conatining set of API methods for tokenizing a sentence
         * and defining configuration, plugin etc.
         * @example
         * // Load wink tokenizer.
         * var tokenizer = require( 'wink-tokenizer' );
         * // Create your instance of wink tokenizer.
         * var myTokenizer = tokenizer();
        */
        var tokenizer = function () {
            // Default configuration: most comprehensive tokenization. Make deep copy!
            var rgxs = rgxsMaster.slice(0);
            // The result of last call to `tokenize()` is retained here.
            var finalTokens = [];
            // Returned!
            var methods = Object.create(null);

            // ### manageContraction
            /**
             *
             * Splits a contractions into words by first trying a lookup in strandard
             * `contractions`; if the lookup fails, it checks for possessive in `'s` or
             * `s'` forms and separates the possesive part from the word. Otherwise the
             * contraction is treated as a normal word and no splitting occurs.
             *
             * @param {string} word — that could be a potential conraction.
             * @param {object[]} tokens — where the outcome is pushed.
             * @return {object[]} updated tokens according to the `word.`
             * @private
            */
            var manageContraction = function (word, tokens) {
                var ct = contractions[word];
                var matches;
                if (ct === undefined) {
                    // Try possesive of sigular & plural forms
                    matches = word.match(rgxPosSingular);
                    if (matches) {
                        tokens.push({ value: matches[1], tag: 'word' });
                        tokens.push({ value: matches[2], tag: 'word' });
                    } else {
                        matches = word.match(rgxPosPlural);
                        if (matches) {
                            tokens.push({ value: matches[1], tag: 'word' });
                            tokens.push({ value: matches[2], tag: 'word' });
                        } else tokens.push({ value: word, tag: 'word' });
                    }
                } else {
                    // Manage via lookup; ensure cloning!
                    tokens.push(Object.assign({}, ct[0]));
                    tokens.push(Object.assign({}, ct[1]));
                }
                return tokens;
            }; // manageContraction()

            // ### tokenizeTextUnit
            /**
             *
             * Attempts to tokenize the input `text` using the `rgxSplit`. The tokenization
             * is carried out by combining the regex matches and splits in the right sequence.
             * The matches are the *real tokens*, whereas splits are text units that are
             * tokenized in later rounds! The real tokens (i.e. matches) are pushed as
             * `object` and splits as `string`.
             *
             * @param {string} text — unit that is to be tokenized.
             * @param {object} rgxSplit — object containing the regex and it's category.
             * @return {array} of tokens.
             * @private
            */
            var tokenizeTextUnit = function (text, rgxSplit) {
                // Regex matches go here; note each match is a token and has the same tag
                // as of regex's category.
                var matches = text.match(rgxSplit.regex);
                // Balance is "what needs to be tokenized".
                var balance = text.split(rgxSplit.regex);
                // The result, in form of combination of tokens & matches, is captured here.
                var tokens = [];
                // The tag;
                var tag = rgxSplit.category;
                // Helper variables.
                var aword,
                    i,
                    imax,
                    k = 0,
                    t;

                // Combine tokens & matches in the following pattern [ b0 m0 b1 m1 ... ]
                matches = matches ? matches : [];
                for (i = 0, imax = balance.length; i < imax; i += 1) {
                    t = balance[i];
                    t = t.trim();
                    if (t) tokens.push(t);
                    if (k < matches.length) {
                        if (tag === 'word') {
                            // Tag type `word` token may have a contraction.
                            aword = matches[k];
                            if (rgxContraction.test(aword)) {
                                tokens = manageContraction(aword, tokens);
                            } else {
                                // Means there is no contraction.
                                tokens.push({ value: aword, tag: tag });
                            }
                        } else tokens.push({ value: matches[k], tag: tag });
                    }
                    k += 1;
                }

                return tokens;
            }; // tokenizeTextUnit()

            // ### tokenizeTextRecursively
            /**
             *
             * Tokenizes the input text recursively using the array of `regexes` and then
             * the `tokenizeTextUnit()` function. If (or whenever) the `regexes` becomes
             * empty, it simply splits the text on non-word characters instead of using
             * the `tokenizeTextUnit()` function.
             *
             * @param {string} text — unit that is to be tokenized.
             * @param {object} regexes — object containing the regex and it's category.
             * @return {undefined} nothing!
             * @private
            */
            var tokenizeTextRecursively = function (text, regexes) {
                var sentence = text.trim();
                var tokens = [];
                var i, imax;

                if (!regexes.length) {
                    // No regex left, split on `spaces` and tag every token as **alien**.
                    text.split(rgxSpaces).forEach(function (tkn) {
                        finalTokens.push({ value: tkn.trim(), tag: 'alien' });
                    });
                    return;
                }

                var rgx = regexes[0];
                tokens = tokenizeTextUnit(sentence, rgx);

                for (i = 0, imax = tokens.length; i < imax; i += 1) {
                    if (typeof tokens[i] === 'string') {
                        // Strings become candidates for further tokenization.
                        tokenizeTextRecursively(tokens[i], regexes.slice(1));
                    } else {
                        finalTokens.push(tokens[i]);
                    }
                }
            }; // tokenizeTextRecursively()

            // ### defineConfig
            /**
             *
             * Defines the configuration in terms of the types of token that will be
             * extracted by [`tokenize()`](#tokenize) method. Note by default, all types
             * of tokens will be detected and tagged automatically.
             *
             * @param {object} config — It defines 0 or more properties from the list of
             * **14** properties. A true value for a property ensures tokenization
             * for that type of text; whereas false value will mean that the tokenization of that
             * type of text will not be attempted. It also **resets** the effect of any previous
             * call(s) to the [`addRegex()`](#addregex) API.
             *
             * *An empty config object is equivalent to splitting on spaces. Whatever tokens
             * are created like this are tagged as **alien** and **`z`** is the
             * [finger print](#gettokensfp) code of this token type.*
             *
             * The table below gives the name of each property and it's description including
             * examples. The character with in paranthesis is the [finger print](#gettokensfp) code for the
             * token of that type.
             * @param {boolean} [config.currency=true] such as **$** or **£** symbols (**`r`**)
             * @param {boolean} [config.email=true] for example **john@acme.com** or **superman1@gmail.com** (**`e`**)
             * @param {boolean} [config.emoji=true] any standard unicode emojis e.g. 😊 or 😂 or 🎉 (**`j`**)
             * @param {boolean} [config.emoticon=true] common emoticons such as **`:-)`** or **`:D`** (**`c`**)
             * @param {boolean} [config.hashtag=true] hash tags such as **`#happy`** or **`#followme`** (**`h`**)
             * @param {boolean} [config.number=true] any integer, decimal number, fractions such as **19**, **2.718**
             * or **1/4** and numerals containing "**`, - / .`**", for example 12-12-1924 (**`n`**)
             * @param {boolean} [config.ordinal=true] ordinals like **1st**, **2nd**, **3rd**, **4th** or **12th** or **91st** (**`o`**)
             * @param {boolean} [config.punctuation=true] common punctuation such as **`?`** or **`,`**
             * ( token becomes fingerprint )
             * @param {boolean} [config.quoted_phrase=true] any **"quoted text"** in the sentence. (**`q`**)
             * @param {boolean} [config.symbol=true] for example **`~`** or **`+`** or **`&`** or **`%`** ( token becomes fingerprint )
             * @param {boolean} [config.time=true] common representation of time such as **4pm** or **16:00 hours** (**`t`**)
             * @param {boolean} [config.mention=true] **@mention**  as in github or twitter (**`m`**)
             * @param {boolean} [config.url=true] URL such as **https://github.com** (**`u`**)
             * @param {boolean} [config.word=true] word such as **faster** or **résumé** or **prévenir** (**`w`**)
             * @return {number} number of properties set to true from the list of above 13.
             * @example
             * // Do not tokenize & tag @mentions.
             * var myTokenizer.defineConfig( { mention: false } );
             * // -> 13
             * // Only tokenize words as defined above.
             * var myTokenizer.defineConfig( {} );
             * // -> 0
            */
            var defineConfig = function (config) {
                if (typeof config === 'object' && Object.keys(config).length) {
                    rgxs = rgxsMaster.filter(function (rgx) {
                        // Config for the Category of `rgx`.
                        var cc = config[rgx.category];
                        // Means `undefined` & `null` values are taken as true; otherwise
                        // standard **truthy** and **falsy** interpretation applies!!
                        return cc === undefined || cc === null || !!cc;
                    });
                } else rgxs = [];
                // Count normalized length i.e. ignore multi-script entries.
                const uniqueCats = Object.create(null);
                rgxs.forEach(function (rgx) {
                    uniqueCats[rgx.category] = true;
                });
                // Reset the `fingerPrintCodes` variable.
                fingerPrintCodes = {
                    emoticon: 'c',
                    email: 'e',
                    emoji: 'j',
                    hashtag: 'h',
                    mention: 'm',
                    number: 'n',
                    ordinal: 'o',
                    quoted_phrase: 'q', // eslint-disable-line camelcase
                    currency: 'r',
                    // symbol: 's',
                    time: 't',
                    url: 'u',
                    word: 'w',
                    alien: 'z'
                };
                return Object.keys(uniqueCats).length;
            }; // defineConfig()

            // ### tokenize
            /**
             *
             * Tokenizes the input `sentence` using the configuration specified via
             * [`defineConfig()`](#defineconfig).
             * Common contractions and possessive nouns are split into 2 separate tokens;
             * for example **I'll** splits as `'I'` and `'\'ll'` or **won't** splits as
             * `'wo'` and `'n\'t'`.
             *
             * @param {string} sentence — the input sentence.
             * @return {object[]} of tokens; each one of them is an object with 2-keys viz.
             * `value` and its `tag` identifying the type of the token.
             * @example
             * var s = 'For detailed API docs, check out http://winkjs.org/wink-regression-tree/ URL!';
             * myTokenizer.tokenize( s );
             * // -> [ { value: 'For', tag: 'word' },
             * //      { value: 'detailed', tag: 'word' },
             * //      { value: 'API', tag: 'word' },
             * //      { value: 'docs', tag: 'word' },
             * //      { value: ',', tag: 'punctuation' },
             * //      { value: 'check', tag: 'word' },
             * //      { value: 'out', tag: 'word' },
             * //      { value: 'http://winkjs.org/wink-regression-tree/', tag: 'url' },
             * //      { value: 'URL', tag: 'word' },
             * //      { value: '!', tag: 'punctuation' } ]
            */
            var tokenize = function (sentence) {
                finalTokens = [];
                tokenizeTextRecursively(sentence, rgxs);
                return finalTokens;
            }; // tokenize()

            // ### getTokensFP
            /**
             *
             * Returns the finger print of the tokens generated by the last call to
             * [`tokenize()`](#tokenize). A finger print is a string created by sequentially
             * joining the unique code of each token's type. Refer to table given under
             * [`defineConfig()`](#defineconfig) for values of these codes.
             *
             * A finger print is extremely useful in spotting patterns present in the sentence
             * using `regexes`, which is otherwise a complex and time consuming task.
             *
             * @return {string} finger print of tokens generated by the last call to `tokenize()`.
             * @example
             * // Generate finger print of sentence given in the previous example
             * // under tokenize().
             * myTokenizer.getTokensFP();
             * // -> 'wwww,wwuw!'
            */
            var getTokensFP = function () {
                var fp = [];
                finalTokens.forEach(function (t) {
                    fp.push(fingerPrintCodes[t.tag] ? fingerPrintCodes[t.tag] : t.value);
                });
                return fp.join('');
            }; // getFingerprint()

            // ### addTag
            var addTag = function (name, fingerprintCode) {
                if (fingerPrintCodes[name]) {
                    throw new Error('Tag ' + name + ' already exists');
                }

                fingerPrintCodes[name] = fingerprintCode;
            }; // addTag()

            // ### addRegex
            /**
             * Adds a regex for parsing a new type of token. This regex can either be mapped
             * to an existing tag or it allows creation of a new tag along with its finger print.
             * The uniqueness of the [finger prints](#defineconfig) have to ensured by the user.
             *
             * *The added regex(s) will supersede the internal parsing.*
             *
             * @param {RegExp} regex — the new regular expression.
             * @param {string} tag — tokens matching the `regex` will be assigned this tag.
             * @param {string} [fingerprintCode=undefined] — required if adding a new
             * tag; ignored if using an existing tag.
             * @return {void} nothing!
             * @example
             * // Adding a regex for an existing tag
             * myTokenizer.addRegex( /\(oo\)/gi, 'emoticon' );
             * myTokenizer.tokenize( '(oo) Hi!' )
             * // -> [ { value: '(oo)', tag: 'emoticon' },
             * //      { value: 'Hi', tag: 'word' },
             * //      { value: '!', tag: 'punctuation' } ]
             *
             * // Adding a regex to parse a new token type
             * myTokenizer.addRegex( /hello/gi, 'greeting', 'g' );
             * myTokenizer.tokenize( 'hello, how are you?' );
             * // -> [ { value: 'hello', tag: 'greeting' },
             * //      { value: ',', tag: 'punctuation' },
             * //      { value: 'how', tag: 'word' },
             * //      { value: 'are', tag: 'word' },
             * //      { value: 'you', tag: 'word' },
             * //      { value: '?', tag: 'punctuation' } ]
             * // Notice how "hello" is now tagged as "greeting" and not as "word".
             *
             * // Using definConfig will reset the above!
             * myTokenizer.defineConfig( { word: true } );
             * myTokenizer.tokenize( 'hello, how are you?' );
             * // -> [ { value: 'hello', tag: 'word' },
             * //      { value: ',', tag: 'punctuation' },
             * //      { value: 'how', tag: 'word' },
             * //      { value: 'are', tag: 'word' },
             * //      { value: 'you', tag: 'word' },
             * //      { value: '?', tag: 'punctuation' } ]
            */

            var addRegex = function (regex, tag, fingerprintCode) {
                if (!fingerPrintCodes[tag] && !fingerprintCode) {
                    throw new Error('Tag ' + tag + ' doesn\'t exist; Provide a \'fingerprintCode\' to add it as a tag.');
                } else if (!fingerPrintCodes[tag]) {
                    addTag(tag, fingerprintCode);
                }

                rgxs.unshift({ regex: regex, category: tag });
            }; // addRegex()

            methods.defineConfig = defineConfig;
            methods.tokenize = tokenize;
            methods.getTokensFP = getTokensFP;
            methods.addTag = addTag;
            methods.addRegex = addRegex;
            return methods;
        };

        module.exports = tokenizer;
    }, { "./eng-contractions.js": 18 }], 20: [function (require, module, exports) {
        module.exports = ["i", "me", "my", "myself", "we", "our", "ours", "ourselves", "you", "your", "yours", "yourself", "yourselves", "he", "him", "his", "himself", "she", "her", "hers", "herself", "it", "its", "itself", "they", "them", "their", "theirs", "themselves", "what", "which", "who", "whom", "this", "that", "these", "those", "am", "is", "are", "was", "were", "be", "been", "being", "have", "has", "had", "having", "do", "does", "did", "doing", "would", "should", "could", "ought", "i'm", "you're", "he's", "she's", "it's", "we're", "they're", "i've", "you've", "we've", "they've", "i'd", "you'd", "he'd", "she'd", "we'd", "they'd", "i'll", "you'll", "he'll", "she'll", "we'll", "they'll", "let's", "that's", "who's", "what's", "here's", "there's", "when's", "where's", "why's", "how's", "a", "an", "the", "and", "but", "if", "or", "because", "as", "until", "while", "of", "at", "by", "for", "with", "about", "against", "between", "into", "through", "during", "before", "after", "above", "below", "to", "from", "up", "down", "in", "out", "on", "off", "over", "under", "again", "further", "then", "once", "here", "there", "when", "where", "why", "how", "all", "any", "both", "each", "few", "more", "most", "other", "some", "such", "only", "own", "same", "so", "than", "too", "very"];
    }, {}], 21: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //

        // ## string

        // ### returnIndexer

        /**
         *
         * Returns an Indexer object that contains two functions. The first function `build()`
         * incrementally builds an index for each `element` using `itsIndex` — both passed as
         * parameters to it. The second function — `result()` allows accessing the index anytime.
         *
         * It is typically used with [string.soc](#stringsoc), [string.bong](#stringbong),
         * [string.song](#stringsong), and [tokens.sow](#tokenssow).
         *
         * @name helper.returnIndexer
         * @return {indexer} used to build and access the index.
         * @example
         * var indexer = returnIndexer();
         * // -> { build: [function], result: [function] }
         */
        var returnIndexer = function () {
            var theIndex = Object.create(null);
            var methods = Object.create(null);

            // Builds index by adding the `element` and `itsIndex`. The `itsIndex` should
            // be a valid JS array index; no validation checks are performed while building
            // index.
            var build = function (element, itsIndex) {
                theIndex[element] = theIndex[element] || [];
                theIndex[element].push(itsIndex);
                return true;
            }; // build()

            // Returns the index built so far.
            var result = function () {
                return theIndex;
            }; // result()

            methods.build = build;
            methods.result = result;

            return methods;
        }; // index()

        module.exports = returnIndexer;
    }, {}], 22: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //

        // ## string

        // ### returnQuotedTextExtractor

        /**
         *
         * Returns a function that extracts all occurrences of every quoted text
         * between the `lq` and the `rq` characters from its argument. This argument
         * must be of type string.
         *
         * @name helper.returnQuotedTextExtractor
         * @param {string} [lq='"'] — the left quote character.
         * @param {string} [rq='"'] — the right quote character.
         * @return {function} that will accept an input string argument and return an
         * array of all substrings that are quoted between `lq` and `rq`.
         * @example
         * var extractQuotedText = returnQuotedTextExtractor();
         * extractQuotedText( 'Raise 2 issues - "fix a bug" & "run tests"' );
         * // -> [ 'fix a bug', 'run tests' ]
         */
        var returnQuotedTextExtractor = function (lq, rq) {
            var // Index variable for *for-loop*
            i,

            // Set defaults for left quote, if required.
            lq1 = lq && typeof lq === 'string' ? lq : '"',

            // Extracts its length
            lqLen = lq1.length,

            // The regular expression is created here.
            regex = null,

            // The string containing the regular expression builds here.
            rgxStr = '',

            // Set defaults for right quote, if required.
            rq1 = rq && typeof rq === 'string' ? rq : lq1,

            // Extract its length.
            rqLen = rq1.length;

            // Build `rgxStr`
            for (i = 0; i < lqLen; i += 1) rgxStr += '\\' + lq1.charAt(i);
            rgxStr += '.*?';
            for (i = 0; i < rqLen; i += 1) rgxStr += '\\' + rq1.charAt(i);
            // Create regular expression.
            regex = new RegExp(rgxStr, 'g');
            // Return the extractor function.
            return function (s) {
                if (!s || typeof s !== 'string') return null;
                var // Extracted elements are captured here.
                elements = [],

                // Extract matches with quotes
                matches = s.match(regex);
                if (!matches || matches.length === 0) return null;
                // Collect elements after removing the quotes.
                for (var k = 0, kmax = matches.length; k < kmax; k += 1) {
                    elements.push(matches[k].substr(lqLen, matches[k].length - (rqLen + lqLen)));
                }
                return elements;
            };
        }; // returnQuotedTextExtractor()

        module.exports = returnQuotedTextExtractor;
    }, {}], 23: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //

        // ## string

        // ### returnWordsFilter

        /**
         *
         * Returns an object containing the following functions: (a) `set()`, which returns
         * a set of mapped words given in the input array `words`. (b) `exclude()` that
         * is suitable for array filtering operations.
         *
         * If the second argument `mappers` is provided as an array of maping functions
         * then these are applied on the input array before converting into a set. A
         * mapper function must accept a string as argument and return a string as the result.
         * Examples of mapper functions are typically **string** functionss of **`wink-nlp-utils`**
         * such as `string.lowerCase()`, `string.stem()` and
         * `string.soundex()`.
         *
         * @name helper.returnWordsFilter
         * @param {string[]} words — that can be filtered using the returned wordsFilter.
         * @param {function[]} [mappers=undefined] — optionally used to map each word before creating
         * the wordsFilter.
         * @return {wordsFilter} object containg `set()` and `exclude()` functions for `words`.
         * @example
         * var stopWords = [ 'This', 'That', 'Are', 'Is', 'Was', 'Will', 'a' ];
         * var myFilter = returnWordsFilter( stopWords, [ string.lowerCase ] );
         * [ 'this', 'is', 'a', 'cat' ].filter( myFilter.exclude );
         * // -> [ 'cat' ]
         */
        var returnWordsFilter = function (words, mappers) {
            var mappedWords = words;
            var givenMappers = mappers || [];
            givenMappers.forEach(function (m) {
                mappedWords = mappedWords.map(m);
            });

            mappedWords = new Set(mappedWords);

            var exclude = function (t) {
                return !mappedWords.has(t);
            }; // exclude()

            var set = function () {
                return mappedWords;
            }; // set()

            return {
                set: set,
                exclude: exclude
            };
        }; // returnWordsFilter()

        module.exports = returnWordsFilter;
    }, {}], 24: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var degrees = [/\bm\.?\s*a\b/i, /\bb\.?\s*a\b/i, /\bb\.?\s*tech\b/i, /\bm\.?\s*tech\b/i, /\bb\.?\s*des\b/i, /\bm\.?\s*des\b/i, /\bm\.?\s*b\.?\s*a\b/i, /\bm\.?\s*c\.?\s*a\b/i, /\bb\.?\s*c\.?\s*a\b/i, /\bl\.?\s*l\.?\s*b\b/i, /\bl\.?\s*l\.?\s*m\b/i, /\bm\.?\s*b\.?\s*b\.?\s*s\b/i, /\bm\.?\s*d\b/i, /\bd\.?\s*m\b/i, /\bm\.?\s*s\b/i, /\bd\.?\s*n\.?\s*b\b/i, /\bd\.?\s*g\.?\s*o\b/i, /\bd\.?\s*l\.?\s*o\b/i, /\bb\.?\s*d\.?\s*s\b/i, /\bb\.?\s*h\.?\s*m\.?\s*s\b/i, /\bb\.?\s*a\.?\s*m\.?\s*s\b/i, /\bf\.?\s*i\.?\s*c\.?\s*s\b/i, /\bm\.?\s*n\.?\s*a\.?\s*m\.?\s*s\b/i, /\bb\.?\s*e\.?\s*m\.?\s*s\b/i, /\bd\.?\s*c\.?\s*h\b/i, /\bm\.?\s*c\.?\s*h\b/i, /\bf\.?\s*r\.?\s*c\.?\s*s\b/i, /\bm\.?\s*r\.?\s*c\.?\s*p\b/i, /\bf\.?\s*i\.?\s*a\.?\s*c\.?\s*m\b/i, /\bf\.?\s*i\.?\s*m\.?\s*s\.?\s*a\b/i, /\bp\.?\s*h\.?\s*d\b/i];

        var titleNames = ['mr', 'mrs', 'miss', 'ms', 'master', 'er', 'dr', 'shri', 'shrimati', 'sir'];

        var titles = new RegExp('^(?:' + titleNames.join('|') + ')$', 'i');

        module.exports = {
            degrees: degrees,
            titles: titles
        };
    }, {}], 25: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        /* eslint no-underscore-dangle: "off" */
        var rgx = Object.create(null);
        // Remove repeating characters.
        rgx.repeatingChars = /([^c])\1/g;
        // Drop first character from character pairs, if found in the beginning.
        rgx.kngnPairs = /^(kn|gn|pn|ae|wr)/;
        // Drop vowels that are not found in the beginning.
        rgx.__vowels = /(?!^)[aeiou]/g;
        // Replaces `ough` in the end by 'f'
        rgx.ough = /ough$/;
        // Replace following 3 instances of `dg` by `j`.
        rgx.dge = /dge/g;
        rgx.dgi = /dgi/g;
        rgx.dgy = /dgy/g;
        // Replace `sch` by `sk`.
        rgx.sch = /sch/g;
        // Drop `c` in `sci, sce, scy`.
        rgx.sci = /sci/g;
        rgx.sce = /sce/g;
        rgx.scy = /scy/g;
        // Make 'sh' out of `tio & tia`.
        rgx.tio = /tio/g;
        rgx.tia = /tia/g;
        // `t` is silent in `tch`.
        rgx.tch = /tch/g;
        // Drop `b` in the end if preceeded by `m`.
        rgx.mb_ = /mb$/;
        // These are pronounced as `k`.
        rgx.cq = /cq/g;
        rgx.ck = /ck/g;
        // Here `c` sounds like `s`
        rgx.ce = /ce/g;
        rgx.ci = /ci/g;
        rgx.cy = /cy/g;
        // And this `f`.
        rgx.ph = /ph/g;
        // The `sh` finally replaced by `x`.
        rgx.sh = /sh|sio|sia/g;
        // This is open rgx - TODO: need to finalize.
        rgx.vrnotvy = /([aeiou])(r)([^aeiouy])/g;
        // `th` sounds like theta - make it 0.
        rgx.th = /th/g;
        // `c` sounds like `k` except when it is followed by `h`.
        rgx.cnoth = /(c)([^h])/g;
        // Even `q` sounds like `k`.
        rgx.q = /q/g;
        // The first `x` sounds like `s`.
        rgx._x = /^x/;
        // Otherwise `x` is more like `ks`.
        rgx.x = /x/g;
        // Drop `y` if not followed by a vowel or appears in the end.
        rgx.ynotv = /(y)([^aeiou])/g;
        rgx.y_ = /y$/;
        // `z` is `s`.
        rgx.z = /z/g;

        // Export rgx.
        module.exports = rgx;
    }, {}], 26: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var rgx = require('./util_regexes.js');

        // ## string

        // ### amplifyNotElision
        /**
         *
         * Amplifies the not elision by converting it into not; for example `isn't`
         * becomes `is not`.
         *
         * @name string.amplifyNotElision
         * @param {string} str — the input string.
         * @return {string} input string after not elision amplification.
         * @example
         * amplifyNotElision( "someone's wallet, isn't it?" );
         * // -> "someone's wallet, is not it?"
         */
        var amplifyNotElision = function (str) {
            return str.replace(rgx.notElision, '$1 not');
        }; // amplifyNotElision()

        module.exports = amplifyNotElision;
    }, { "./util_regexes.js": 60 }], 27: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //

        // ## string

        // ### bong
        /**
         *
         * Generates the bag of ngrams of `size` from the input string. The
         * default size is 2, which means it will generate bag of bigrams by default. It
         * also has an alias **`bong()`**.
         *
         * @name string.bagOfNGrams
         * @param {string} str — the input string.
         * @param {number} [size=2] — ngram size.
         * @param {function} [ifn=undefined] — a function to build index; it is called for
         * every **unique occurrence of ngram** of `str`; and it receives the ngram and the `idx`
         * as input arguments. The `build()` function of [helper.returnIndexer](#helperreturnindexer)
         * may be used as `ifn`. If `undefined` then index is not built.
         * @param {number} [idx=undefined] — the index; passed as the second argument to the `ifn`
         * function.
         * @return {object} bag of ngrams of `size` from `str`.
         * @example
         * bagOfNGrams( 'mama' );
         * // -> { ma: 2, am: 1 }
         * bong( 'mamma' );
         * // -> { ma: 2, am: 1, mm: 1 }
         */
        var bong = function (str, size, ifn, idx) {
            var ng = size || 2,
                ngBOW = Object.create(null),
                tg;
            for (var i = 0, imax = str.length; i < imax; i += 1) {
                tg = str.slice(i, i + ng);
                if (tg.length === ng) {
                    // Call `ifn` iff its defined and `tg` is appearing for the first time;
                    // this avoids multiple calls to `ifn`. Strategy applies to `song()`,
                    // and `bow()`.
                    if (typeof ifn === 'function' && !ngBOW[tg]) {
                        ifn(tg, idx);
                    }
                    // Now define, if required and then update counts.
                    ngBOW[tg] = 1 + (ngBOW[tg] || 0);
                }
            }
            return ngBOW;
        }; // bong()

        module.exports = bong;
    }, {}], 28: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var helpers = require('wink-helpers');
        var returnQuotedTextExtractor = require('./helper-return-quoted-text-extractor.js');
        var extractQuotedText = returnQuotedTextExtractor('[', ']');
        // ## string

        // ### composeCorpus
        /**
         *
         * Generates all possible sentences from the input argument string.
         * The string s must follow a special syntax as illustrated in the
         * example below:<br/>
         * `'[I] [am having|have] [a] [problem|question]'`<br/>
         *
         * Each phrase must be quoted between `[ ]` and each possible option of phrases
         * (if any) must be separated by a `|` character. The corpus is composed by
         * computing the cartesian product of all the phrases.
         *
         * @name string.composeCorpus
         * @param {string} str — the input string.
         * @return {string[]} of all possible sentences.
         * @example
         * composeCorpus( '[I] [am having|have] [a] [problem|question]' );
         * // -> [ 'I am having a problem',
         * //      'I am having a question',
         * //      'I have a problem',
         * //      'I have a question' ]
         */
        var composeCorpus = function (str) {
            if (!str || typeof str !== 'string') return [];

            var quotedTextElems = extractQuotedText(str);
            var corpus = [];
            var finalCorpus = [];

            if (!quotedTextElems) return [];
            quotedTextElems.forEach(function (e) {
                corpus.push(e.split('|'));
            });

            helpers.array.product(corpus).forEach(function (e) {
                finalCorpus.push(e.join(' '));
            });
            return finalCorpus;
        }; // composeCorpus()

        module.exports = composeCorpus;
    }, { "./helper-return-quoted-text-extractor.js": 22, "wink-helpers": 17 }], 29: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //

        // ## string

        // ### edgeNGrams
        /**
         *
         * Generates the edge ngrams from the input string.
         *
         * @name string.edgeNGrams
         * @param {string} str — the input string.
         * @param {number} [min=2] — size of ngram generated.
         * @param {number} [max=8] — size of ngram is generated.
         * @param {number} [delta=2] — edge ngrams are generated in increments of this value.
         * @param {function} [ifn=undefined] — a function to build index; it is called for
         * every edge ngram of `str`; and it receives the edge ngram and the `idx`
         * as input arguments. The `build()` function of [helper.returnIndexer](#helperreturnindexer)
         * may be used as `ifn`. If `undefined` then index is not built.
         * @param {number} [idx=undefined] — the index; passed as the second argument to the `ifn`
         * function.
         * @return {string[]} of edge ngrams.
         * @example
         * edgeNGrams( 'decisively' );
         * // -> [ 'de', 'deci', 'decisi', 'decisive' ]
         * edgeNGrams( 'decisively', 8, 10, 1 );
         * // -> [ 'decisive', 'decisivel', 'decisively' ]
         */
        var edgeNGrams = function (str, min, max, delta, ifn, idx) {
            var dlta = delta || 2,
                eg,
                egs = [],
                imax = Math.min(max || 8, str.length) + 1,
                start = min || 2;

            // Generate edge ngrams
            for (var i = start; i < imax; i += dlta) {
                eg = str.slice(0, i);
                egs.push(eg);
                if (typeof ifn === 'function') {
                    ifn(eg, idx);
                }
            }
            return egs;
        }; // edgeNGrams()

        module.exports = edgeNGrams;
    }, {}], 30: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var rgx = require('./util_regexes.js');
        var ncrgx = require('./name_cleaner_regexes.js');

        // ## string

        // ### extractPersonsName
        /**
         *
         * Attempts to extract person's name from input string.
         * It assmues the following name format:<br/>
         * `[<salutations>] <name part as FN [MN] [LN]> [<degrees>]`<br/>
         * Entities in square brackets are optional.
         *
         * @name string.extractPersonsName
         * @param {string} str — the input string.
         * @return {string} extracted name.
         * @example
         * extractPersonsName( 'Dr. Sarah Connor M. Tech., PhD. - AI' );
         * // -> 'Sarah Connor'
         */
        var extractPersonsName = function (str) {
            // Remove Degrees by making the list of indexes of each degree and subsequently
            // finding the minimum and slicing from there!
            var indexes = ncrgx.degrees.map(function (r) {
                var m = r.exec(str);
                return m ? m.index : 999999;
            });
            var sp = Math.min.apply(null, indexes);

            // Generate an Array of Every Elelemnt of Name (e.g. title, first name,
            // sir name, honours, etc)
            var aeen = str.slice(0, sp).replace(rgx.notAlpha, ' ').replace(rgx.spaces, ' ').trim().split(' ');
            // Remove titles from the beginning.
            while (aeen.length && ncrgx.titles.test(aeen[0])) aeen.shift();
            return aeen.join(' ');
        }; // extractPersonsName()

        module.exports = extractPersonsName;
    }, { "./name_cleaner_regexes.js": 24, "./util_regexes.js": 60 }], 31: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var rgx = require('./util_regexes.js');
        var trim = require('./string-trim.js');
        // ## string

        // ### extractRunOfCapitalWords
        /**
         *
         * Extracts the array of text appearing as Title Case or in ALL CAPS from the
         * input string.
         *
         * @name string.extractRunOfCapitalWords
         * @param {string} str — the input string.
         * @return {string[]} of text appearing in Title Case or in ALL CAPS; if no such
         * text is found then `null` is returned.
         * @example
         * extractRunOfCapitalWords( 'In The Terminator, Sarah Connor is in Los Angeles' );
         * // -> [ 'In The Terminator', 'Sarah Connor', 'Los Angeles' ]
         */
        var extractRunOfCapitalWords = function (str) {
            var m = str.match(rgx.rocWords);
            return m ? m.map(trim) : m;
        }; // extractRunOfCapitalWords()

        module.exports = extractRunOfCapitalWords;
    }, { "./string-trim.js": 49, "./util_regexes.js": 60 }], 32: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //

        // ## string

        // ### lowerCase
        /**
         *
         * Converts the input string to lower case.
         *
         * @name string.lowerCase
         * @param {string} str — the input string.
         * @return {string} input string in lower case.
         * @example
         * lowerCase( 'Lower Case' );
         * // -> 'lower case'
         */
        var lowerCase = function (str) {
            return str.toLowerCase();
        }; // lowerCase()

        module.exports = lowerCase;
    }, {}], 33: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //

        // ## string

        // ### marker
        /**
         *
         * Generates `marker` of the input string; it is defined as 1-gram, sorted
         * and joined back as a string again. Marker is a quick and aggressive way
         * to detect similarity between short strings. Its aggression may lead to more
         * false positives such as `Meter` and `Metre` or `no melon` and `no lemon`.
         *
         * @name string.marker
         * @param {string} str — the input string.
         * @return {string} the marker.
         * @example
         * marker( 'the quick brown fox jumps over the lazy dog' );
         * // -> ' abcdefghijklmnopqrstuvwxyz'
         */
        var marker = function (str) {
            var uniqChars = Object.create(null);
            for (var i = 0, imax = str.length; i < imax; i += 1) {
                uniqChars[str[i]] = true;
            }
            return Object.keys(uniqChars).sort().join('');
        }; // marker()

        module.exports = marker;
    }, {}], 34: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //

        // ## string

        // ### ngram
        /**
         *
         * Generates an array of ngrams of a specified size from the input string. The
         * default size is 2, which means it will generate bigrams by default.
         *
         * @name string.ngram
         * @param {string} str — the input string.
         * @param {number} [size=2] — ngram's size.
         * @return {string[]} ngrams of `size` from `str`.
         * @example
         * ngram( 'FRANCE' );
         * // -> [ 'FR', 'RA', 'AN', 'NC', 'CE' ]
         * ngram( 'FRENCH' );
         * // -> [ 'FR', 'RE', 'EN', 'NC', 'CH' ]
         * ngram( 'FRANCE', 3 );
         * // -> [ 'FRA', 'RAN', 'ANC', 'NCE' ]
         */
        var ngram = function (str, size) {
            var ng = size || 2,
                ngramz = [],
                tg;
            for (var i = 0, imax = str.length; i < imax; i += 1) {
                tg = str.slice(i, i + ng);
                if (tg.length === ng) ngramz.push(tg);
            }
            return ngramz;
        }; // ngram()

        module.exports = ngram;
    }, {}], 35: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var phnrgx = require('./phonetize_regexes.js');
        /* eslint no-underscore-dangle: "off" */

        // ## string

        // ### phonetize
        /**
         *
         * Phonetizes the input string using an algorithmic adaptation of Metaphone; It
         * is not an exact implementation of Metaphone.
         *
         * @name string.phonetize
         * @param {string} word — the input word.
         * @return {string} phonetic code of `word`.
         * @example
         * phonetize( 'perspective' );
         * // -> 'prspktv'
         * phonetize( 'phenomenon' );
         * // -> 'fnmnn'
         */
        var phonetize = function (word) {
            var p = word.toLowerCase();
            // Remove repeating letters.
            p = p.replace(phnrgx.repeatingChars, '$1');
            // Drop first character of `kgknPairs`.
            if (phnrgx.kngnPairs.test(p)) {
                p = p.substr(1, p.length - 1);
            }
            // Run Regex Express now!
            p = p
            // Change `ough` in the end as `f`,
            .replace(phnrgx.ough, 'f')
            // Change `dg` to `j`, in `dge, dgi, dgy`.
            .replace(phnrgx.dge, 'je').replace(phnrgx.dgi, 'ji').replace(phnrgx.dgy, 'jy')
            // Change `c` to `k` in `sch`
            .replace(phnrgx.sch, 'sk')
            // Drop `c` in `sci, sce, scy`.
            .replace(phnrgx.sci, 'si').replace(phnrgx.sce, 'se').replace(phnrgx.scy, 'sy')
            // Drop `t` if it appears as `tch`.
            .replace(phnrgx.tch, 'ch')
            // Replace `tio & tia` by `sh`.
            .replace(phnrgx.tio, 'sh').replace(phnrgx.tia, 'sh')
            // Drop `b` if it appears as `mb` in the end.
            .replace(phnrgx.mb_, 'm')
            // Drop `r` if it preceeds a vowel and not followed by a vowel or `y`
            // .replace( rgx.vrnotvy, '$1$3' )
            // Replace `c` by `s` in `ce, ci, cy`.
            .replace(phnrgx.ce, 'se').replace(phnrgx.ci, 'si').replace(phnrgx.cy, 'sy')
            // Replace `cq` by `q`.
            .replace(phnrgx.cq, 'q')
            // Replace `ck` by `k`.
            .replace(phnrgx.ck, 'k')
            // Replace `ph` by `f`.
            .replace(phnrgx.ph, 'f')
            // Replace `th` by `0` (theta look alike!).
            .replace(phnrgx.th, '0')
            // Replace `c` by `k` if it is not followed by `h`.
            .replace(phnrgx.cnoth, 'k$2')
            // Replace `q` by `k`.
            .replace(phnrgx.q, 'k')
            // Replace `x` by `s` if it appears in the beginning.
            .replace(phnrgx._x, 's')
            // Other wise replace `x` by `ks`.
            .replace(phnrgx.x, 'ks')
            // Replace `sh, sia, sio` by `x`. Needs to be done post `x` processing!
            .replace(phnrgx.sh, 'x')
            // Drop `y` if it is now followed by a **vowel**.
            .replace(phnrgx.ynotv, '$2').replace(phnrgx.y_, '')
            // Replace `z` by `s`.
            .replace(phnrgx.z, 's')
            // Drop all **vowels** excluding the first one.
            .replace(phnrgx.__vowels, '');

            return p;
        }; // phonetize()

        module.exports = phonetize;
    }, { "./phonetize_regexes.js": 25 }], 36: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var rgx = require('./util_regexes.js');

        // ## string

        // ### removeElisions
        /**
         *
         * Removes basic elisions found in the input string. Typical example of elisions
         * are `it's, let's, where's, I'd, I'm, I'll, I've, and Isn't` etc. Note it retains
         * apostrophe used to indicate possession.
         *
         * @name string.removeElisions
         * @param {string} str — the input string.
         * @return {string} input string after removal of elisions.
         * @example
         * removeElisions( "someone's wallet, isn't it?" );
         * // -> "someone's wallet, is it?"
         */
        var removeElisions = function (str) {
            return str.replace(rgx.elisionsSpl, '$2').replace(rgx.elisions1, '$1').replace(rgx.elisions2, '$1');
        }; // removeElisions()

        module.exports = removeElisions;
    }, { "./util_regexes.js": 60 }], 37: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var rgx = require('./util_regexes.js');

        // ## string

        // ### removeExtraSpaces
        /**
         *
         * Removes leading, trailing and any extra in-between whitespaces from the input
         * string.
         *
         * @name string.removeExtraSpaces
         * @param {string} str — the input string.
         * @return {string} input string after removal of leading, trailing and extra
         * whitespaces.
         * @example
         * removeExtraSpaces( '   Padded   Text    ' );
         * // -> 'Padded Text'
         */
        var removeExtraSpaces = function (str) {
            return str.trim().replace(rgx.spaces, ' ');
        }; // removeExtraSpaces()

        module.exports = removeExtraSpaces;
    }, { "./util_regexes.js": 60 }], 38: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var rgx = require('./util_regexes.js');

        // ## string

        // ### removeHTMLTags
        /**
         *
         * Removes each HTML tag by replacing it with a whitespace.
         *
         * Extra spaces, if required, may be removed using [string.removeExtraSpaces](#stringremoveextraspaces)
         * function.
         *
         * @name string.removeHTMLTags
         * @param {string} str — the input string.
         * @return {string} input string after removal of HTML tags.
         * @example
         * removeHTMLTags( '<p>Vive la France&nbsp;&#160;!</p>' );
         * // -> ' Vive la France  ! '
         */
        var removeHTMLTags = function (str) {
            return str.replace(rgx.htmlTags, ' ').replace(rgx.htmlEscSeq1, ' ').replace(rgx.htmlEscSeq2, ' ');
        }; // removeHTMLTags()

        module.exports = removeHTMLTags;
    }, { "./util_regexes.js": 60 }], 39: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var rgx = require('./util_regexes.js');

        // ## string

        // ### removePunctuations
        /**
         *
         * Removes each punctuation mark by replacing it with a whitespace. It looks for
         * the following punctuations — `.,;!?:"!'... - () [] {}`.
         *
         * Extra spaces, if required, may be removed using [string.removeExtraSpaces](#stringremoveextraspaces)
         * function.
         *
         * @name string.removePunctuations
         * @param {string} str — the input string.
         * @return {string} input string after removal of punctuations.
         * @example
         * removePunctuations( 'Punctuations like "\'\',;!?:"!... are removed' );
         * // -> 'Punctuations like               are removed'
         */
        var removePunctuations = function (str) {
            return str.replace(rgx.punctuations, ' ');
        }; // removePunctuations()

        module.exports = removePunctuations;
    }, { "./util_regexes.js": 60 }], 40: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var rgx = require('./util_regexes.js');

        // ## string

        // ### removeSplChars
        /**
         *
         * Removes each special character by replacing it with a whitespace. It looks for
         * the following special characters — `~@#%^*+=`.
         *
         * Extra spaces, if required, may be removed using [string.removeExtraSpaces](#stringremoveextraspaces)
         * function.
         *
         * @name string.removeSplChars
         * @param {string} str — the input string.
         * @return {string} input string after removal of special characters.
         * @example
         * removeSplChars( '4 + 4*2 = 12' );
         * // -> '4   4 2   12'
         */
        var removeSplChars = function (str) {
            return str.replace(rgx.splChars, ' ');
        }; // removeSplChars()

        module.exports = removeSplChars;
    }, { "./util_regexes.js": 60 }], 41: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var rgx = require('./util_regexes.js');

        // ## string

        // ### retainAlphaNums
        /**
         *
         * Retains only apha, numerals, and removes all other characters from
         * the input string, including leading, trailing and extra in-between
         * whitespaces.
         *
         * @name string.retainAlphaNums
         * @param {string} str — the input string.
         * @return {string} input string after removal of non-alphanumeric characters,
         * leading, trailing and extra whitespaces.
         * @example
         * retainAlphaNums( ' This, text here, has  (other) chars_! ' );
         * // -> 'This text here has other chars'
         */
        var retainAlphaNums = function (str) {
            return str.replace(rgx.notAlphaNumeric, ' ').replace(rgx.spaces, ' ').trim();
        }; // retainAlphaNums()

        module.exports = retainAlphaNums;
    }, { "./util_regexes.js": 60 }], 42: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        // Abbreviations with `.` but are never are EOS.
        const abbrvNoEOS = Object.create(null);
        abbrvNoEOS['mr.'] = true;
        abbrvNoEOS['mrs.'] = true;
        abbrvNoEOS['ms.'] = true;
        abbrvNoEOS['er.'] = true;
        abbrvNoEOS['dr.'] = true;
        abbrvNoEOS['miss.'] = true;
        abbrvNoEOS['shri.'] = true;
        abbrvNoEOS['smt.'] = true;
        abbrvNoEOS['i.e.'] = true;
        abbrvNoEOS['ie.'] = true;
        abbrvNoEOS['e.g.'] = true;
        abbrvNoEOS['eg.'] = true;
        abbrvNoEOS['viz.'] = true;
        abbrvNoEOS['pvt.'] = true;
        // et al.
        abbrvNoEOS['et.'] = true;
        abbrvNoEOS['al.'] = true;
        // Mount Kailash!
        abbrvNoEOS['mt.'] = true;
        // Pages!
        abbrvNoEOS['pp.'] = true;

        const abbrvMayBeEOS = Object.create(null);
        abbrvMayBeEOS['inc.'] = true;
        abbrvMayBeEOS['ltd.'] = true;
        abbrvMayBeEOS['al.'] = true;
        // Regex to test potential End-Of-Sentence.
        const rgxPotentialEOS = /\.$|\!$|\?$/;
        // Regex to test special cases of "I" at eos.
        const rgxSplI = /i\?$|i\!$/;
        // Regex to test first char as alpha only
        const rgxAlphaAt0 = /^[^a-z]/i;

        // ## string

        // ### sentences
        /**
         *
         * Detects the sentence boundaries in the input `paragraph` and splits it into
         * an array of sentence(s).
         *
         * @name string.sentences
         * @param {string} paragraph — the input string.
         * @return {string[]} of sentences.
         * @example
         * sentences( 'AI Inc. is focussing on AI. I work for AI Inc. My mail is r2d2@yahoo.com' );
         * // -> [ 'AI Inc. is focussing on AI.',
         * //      'I work for AI Inc.',
         * //      'My mail is r2d2@yahoo.com' ]
         *
         * sentences( 'U.S.A is my birth place. I was born on 06.12.1924. I climbed Mt. Everest.' );
         * // -> [ 'U.S.A is my birth place.',
         * //      'I was born on 06.12.1924.',
         * //      'I climbed Mt. Everest.' ]
         */
        var punkt = function (paragraph) {
            // The basic idea is to split the paragraph on `spaces` and thereafter
            // examine each word ending with an EOS punctuation for a possible EOS.

            // Split on **space** to obtain all the `tokens` in the `para`.
            const paraTokens = paragraph.split(' ');
            var sentenceTokens = [];
            var sentences = [];

            for (let k = 0; k < paraTokens.length; k += 1) {
                // A para token.
                const pt = paraTokens[k];
                // A lower cased para token.
                const lcpt = pt.toLowerCase();
                if (rgxPotentialEOS.test(pt) && !abbrvNoEOS[lcpt] && (pt.length !== 2 || rgxAlphaAt0.test(pt) || rgxSplI.test(lcpt))) {
                    // Next para token that is non-blank.
                    let nextpt;
                    // Append this token to the current sentence tokens.
                    sentenceTokens.push(pt);
                    // If the current token is one of the abbreviations that may also mean EOS.
                    if (abbrvMayBeEOS[lcpt]) {
                        for (let j = k + 1; j < paraTokens.length && !nextpt; j += 1) {
                            nextpt = paraTokens[j];
                        }
                    }
                    // If no next para token or if present then starts from a Cap Letter then
                    // only complete sentence and start a new one!
                    if (nextpt === undefined || /^[A-Z]/.test(nextpt)) {
                        sentences.push(sentenceTokens.join(' '));
                        sentenceTokens = [];
                    }
                } else sentenceTokens.push(pt);
            }

            if (sentenceTokens.length > 0) sentences.push(sentenceTokens.join(' '));

            return sentences;
        }; // punkt()

        module.exports = punkt;
    }, {}], 43: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //

        // ## string

        // ### soc
        /**
         *
         * Creates a set of chars from the input string `s`. This is useful
         * in even more aggressive string matching using Jaccard or Tversky compared to
         * `marker()`. It also has an alias **`soc()`**.
         *
         * @name string.setOfChars
         * @param {string} str — the input string.
         * @param {function} [ifn=undefined] — a function to build index; it receives the first
         * character of `str` and the `idx` as input arguments. The `build()` function of
         * [helper.returnIndexer](#helperreturnindexer) may be used as `ifn`. If `undefined`
         * then index is not built.
         * @param {number} [idx=undefined] — the index; passed as the second argument to the `ifn`
         * function.
         * @return {string} the soc.
         * @example
         * setOfChars( 'the quick brown fox jumps over the lazy dog' );
         * // -> ' abcdefghijklmnopqrstuvwxyz'
         */
        var soc = function (str, ifn, idx) {
            var cset = new Set(str);
            if (typeof ifn === 'function') {
                ifn(str[0], idx);
            }
            return cset;
        }; // soc()

        module.exports = soc;
    }, {}], 44: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //

        // ## string

        // ### song
        /**
         *
         * Generates the set of ngrams of `size` from the input string. The
         * default size is 2, which means it will generate set of bigrams by default.
         * It also has an alias **`song()`**.
         *
         * @name string.setOfNGrams
         * @param {string} str — the input string.
         * @param {number} [size=2] — ngram size.
         * @param {function} [ifn=undefined] — a function to build index; it is called for
         * every **unique occurrence of ngram** of `str`; and it receives the ngram and the `idx`
         * as input arguments. The `build()` function of [helper.returnIndexer](#helperreturnindexer)
         * may be used as `ifn`. If `undefined` then index is not built.
         * @param {number} [idx=undefined] — the index; passed as the second argument to the `ifn`
         * function.
         * @return {set} of ngrams of `size` of `str`.
         * @example
         * setOfNGrams( 'mama' );
         * // -> Set { 'ma', 'am' }
         * song( 'mamma' );
         * // -> Set { 'ma', 'am', 'mm' }
         */
        var song = function (str, size, ifn, idx) {
            var ng = size || 2,
                ngSet = new Set(),
                tg;
            for (var i = 0, imax = str.length; i < imax; i += 1) {
                tg = str.slice(i, i + ng);
                if (tg.length === ng) {
                    if (typeof ifn === 'function' && !ngSet.has(tg)) {
                        ifn(tg, idx);
                    }
                    ngSet.add(tg);
                }
            }
            return ngSet;
        }; // song()

        module.exports = song;
    }, {}], 45: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        // Soundex Code for alphabets.
        /* eslint-disable object-property-newline */
        var soundexMap = {
            A: 0, E: 0, I: 0, O: 0, U: 0, Y: 0,
            B: 1, F: 1, P: 1, V: 1,
            C: 2, G: 2, J: 2, K: 2, Q: 2, S: 2, X: 2, Z: 2,
            D: 3, T: 3,
            L: 4,
            M: 5, N: 5,
            R: 6
        };

        // ## string

        // ### soundex
        /**
         *
         * Produces the soundex code from the input `word`.
         *
         * @name string.soundex
         * @param {string} word — the input word.
         * @param {number} [maxLength=4] — of soundex code to be returned.
         * @return {string} soundex code of `word`.
         * @example
         * soundex( 'Burroughs' );
         * // -> 'B620'
         * soundex( 'Burrows' );
         * // -> 'B620'
         */
        var soundex = function (word, maxLength) {
            // Upper case right in the begining.
            var s = word.length ? word.toUpperCase() : '?';
            var i,
                imax = s.length;
            // Soundex code builds here.
            var sound = [];
            // Helpers - `ch` is a char from `s` and `code/prevCode` are sondex codes
            // for consonants.
            var ch,
                code,
                prevCode = 9;
            // Use default of 4.
            var maxLen = maxLength || 4;
            // Iterate through every character.
            for (i = 0; i < imax; i += 1) {
                ch = s[i];
                code = soundexMap[ch];
                if (i) {
                    // Means i is > 0.
                    // `code` is either (a) `undefined` if an unknown character is
                    // encountered including `h & w`, or (b) `0` if it is vowel, or
                    // (c) the soundex code for a consonant.
                    if (code && code !== prevCode) {
                        // Consonant and not adjecant duplicates!
                        sound.push(code);
                    } else if (code !== 0) {
                        // Means `h or w` or an unknown character: ensure `prevCode` is
                        // remembered so that adjecant duplicates can be handled!
                        code = prevCode;
                    }
                } else {
                    // Retain the first letter
                    sound.push(ch);
                }
                prevCode = code;
            }
            s = sound.join('');
            // Always ensure minimum length of 4 characters for maxLength > 4.
            if (s.length < 4) s += '000';
            // Return the required length.
            return s.substr(0, maxLen);
        }; // soundex()

        module.exports = soundex;
    }, {}], 46: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var rgx = require('./util_regexes.js');

        // ## string

        // ### splitElisions
        /**
         *
         * Splits basic elisions found in the input string. Typical example of elisions
         * are `it's, let's, where's, I'd, I'm, I'll, I've, and Isn't` etc. Note it does
         * not touch apostrophe used to indicate possession.
         *
         * @name string.splitElisions
         * @param {string} str — the input string.
         * @return {string} input string after splitting of elisions.
         * @example
         * splitElisions( "someone's wallet, isn't it?" );
         * // -> "someone's wallet, is n't it?"
         */
        var splitElisions = function (str) {
            return str.replace(rgx.elisionsSpl, '$2 $3').replace(rgx.elisions1, '$1 $2').replace(rgx.elisions2, '$1 $2');
        }; // splitElisions()

        module.exports = splitElisions;
    }, { "./util_regexes.js": 60 }], 47: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var winkTokenize = require('wink-tokenizer')().tokenize;

        // ## string

        // ### tokenize
        /**
         *
         * Tokenizes the input `sentence` according to the value of `detailed` flag.
         * Any occurance of `...` in the `sentence` is
         * converted to ellipses. In `detailed = true` mode, it
         * tags every token with its type; the supported tags are currency, email,
         * emoji, emoticon, hashtag, number, ordinal, punctuation, quoted_phrase, symbol,
         * time, mention, url, and word.
         *
         * @name string.tokenize
         * @param {string} sentence — the input string.
         * @param {boolean} [detailed=false] — if true, each token is a object cotaining
         * `value` and `tag` of each token; otherwise each token is a string. It's default
         * value of **false** ensures compatibility with previous version.
         * @return {(string[]|object[])} an array of strings if `detailed` is false otherwise
         * an array of objects.
         * @example
         * tokenize( "someone's wallet, isn't it? I'll return!" );
         * // -> [ 'someone', '\'s', 'wallet', ',', 'is', 'n\'t', 'it', '?',
         * //      'I', '\'ll', 'return', '!' ]
         *
         * tokenize( 'For details on wink, check out http://winkjs.org/ URL!', true );
         * // -> [ { value: 'For', tag: 'word' },
         * //      { value: 'details', tag: 'word' },
         * //      { value: 'on', tag: 'word' },
         * //      { value: 'wink', tag: 'word' },
         * //      { value: ',', tag: 'punctuation' },
         * //      { value: 'check', tag: 'word' },
         * //      { value: 'out', tag: 'word' },
         * //      { value: 'http://winkjs.org/', tag: 'url' },
         * //      { value: 'URL', tag: 'word' },
         * //      { value: '!', tag: 'punctuation' } ]
         */
        var tokenize = function (sentence, detailed) {
            var tokens = winkTokenize(sentence.replace('...', '…'));
            var i;
            if (!detailed) {
                for (i = 0; i < tokens.length; i += 1) tokens[i] = tokens[i].value;
            }

            return tokens;
        }; // tokenize()

        module.exports = tokenize;
    }, { "wink-tokenizer": 19 }], 48: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var removeElisions = require('./string-remove-elisions.js');
        var amplifyNotElision = require('./string-amplify-not-elision.js');
        var rgx = require('./util_regexes.js');

        // ## string

        // ### tokenize0
        /**
         *
         * Tokenizes by splitting the input string on **non-words**. This means tokens would
         * consists of only alphas, numerals and underscores; all other characters will
         * be stripped as they are treated as separators. It also removes all elisions;
         * however negations are retained and amplified.
         *
         * @name string.tokenize0
         * @param {string} str — the input string.
         * @return {string[]} of tokens.
         * @example
         * tokenize0( "someone's wallet, isn't it?" );
         * // -> [ 'someone', 's', 'wallet', 'is', 'not', 'it' ]
         */
        var tokenize0 = function (str) {
            var tokens = removeElisions(amplifyNotElision(str)).replace(rgx.cannot, '$1 $2').split(rgx.nonWords);
            // Check the 0th and last element of array for empty string because if
            // fisrt/last characters are non-words then these will be empty stings!
            if (tokens[0] === '') tokens.shift();
            if (tokens[tokens.length - 1] === '') tokens.pop();
            return tokens;
        }; // tokenize0()

        module.exports = tokenize0;
    }, { "./string-amplify-not-elision.js": 26, "./string-remove-elisions.js": 36, "./util_regexes.js": 60 }], 49: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //

        // ## string

        // ### trim
        /**
         *
         * Trims leading and trailing whitespaces from the input string.
         *
         * @name string.trim
         * @param {string} str — the input string.
         * @return {string} input string with leading & trailing whitespaces removed.
         * @example
         * trim( '  Padded   ' );
         * // -> 'Padded'
         */
        var trim = function (str) {
            return str.trim();
        }; // trim()

        module.exports = trim;
    }, {}], 50: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //

        // ## string

        // ### upperCase
        /**
         *
         * Converts the input string to upper case.
         *
         * @name string.upperCase
         * @param {string} str — the input string.
         * @return {string} input string in upper case.
         * @example
         * upperCase( 'Upper Case' );
         * // -> 'UPPER CASE'
         */
        var upperCase = function (str) {
            return str.toUpperCase();
        }; // upperCase()

        module.exports = upperCase;
    }, {}], 51: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE SyappendBigramss Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //

        // ## tokens

        // ### appendBigrams
        /**
         *
         * Generates bigrams from the input tokens and appends them to the input tokens.
         *
         * @name tokens.appendBigrams
         * @param {string[]} tokens — the input tokens.
         * @return {string[]} the input tokens appended with their bigrams.
         * @example
         * appendBigrams( [ 'he', 'acted', 'decisively', 'today' ] );
         * // -> [ 'he',
         * //      'acted',
         * //      'decisively',
         * //      'today',
         * //      'he_acted',
         * //      'acted_decisively',
         * //      'decisively_today' ]
         */
        var appendBigrams = function (tokens) {
            var i, imax;
            for (i = 0, imax = tokens.length - 1; i < imax; i += 1) {
                tokens.push(tokens[i] + '_' + tokens[i + 1]);
            }
            return tokens;
        }; // appendBigrams()

        module.exports = appendBigrams;
    }, {}], 52: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Sybigramss Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //

        // ## tokens

        // ### bigrams
        /**
         *
         * Generates bigrams from the input tokens.
         *
         * @name tokens.bigrams
         * @param {string[]} tokens — the input tokens.
         * @return {string[]} the bigrams.
         * @example
         * bigrams( [ 'he', 'acted', 'decisively', 'today' ] );
         * // -> [ [ 'he', 'acted' ],
         * //      [ 'acted', 'decisively' ],
         * //      [ 'decisively', 'today' ] ]
         */
        var bigrams = function (tokens) {
            // Bigrams will be stored here.
            var bgs = [];
            // Helper variables.
            var i, imax;
            // Create bigrams.
            for (i = 0, imax = tokens.length - 1; i < imax; i += 1) {
                bgs.push([tokens[i], tokens[i + 1]]);
            }
            return bgs;
        }; // bigrams()

        module.exports = bigrams;
    }, {}], 53: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //

        // ## string

        // ### bow
        /**
         *
         * Generates the bag of words from the input string. By default it
         * uses `word count` as it's frequency; but if `logCounts` parameter is set to true then
         * it will use `log2( word counts + 1 )` as it's frequency. It also has an alias **`bow()`**.
         *
         * @name tokens.bagOfWords
         * @param {string[]} tokens — the input tokens.
         * @param {number} [logCounts=false] — a true value flags the use of `log2( word count + 1 )`
         * instead of just `word count` as frequency.
         * @param {function} [ifn=undefined] — a function to build index; it is called for
         * every **unique occurrence of word** in `tokens`; and it receives the word and the `idx`
         * as input arguments. The `build()` function of [helper.returnIndexer](#helperreturnindexer)
         * may be used as `ifn`. If `undefined` then index is not built.
         * @param {number} [idx=undefined] — the index; passed as the second argument to the `ifn`
         * function.
         * @return {object} bag of words from tokens.
         * @example
         * bagOfWords( [ 'rain', 'rain', 'go', 'away' ] );
         * // -> { rain: 2, go: 1, away: 1 }
         * bow( [ 'rain', 'rain', 'go', 'away' ], true );
         * // -> { rain: 1.584962500721156, go: 1, away: 1 }
         */
        var bow = function (tokens, logCounts, ifn, idx) {
            var bow1 = Object.create(null),
                i,
                imax,
                token,
                words;
            for (i = 0, imax = tokens.length; i < imax; i += 1) {
                token = tokens[i];
                if (typeof ifn === 'function' && !bow1[token]) {
                    ifn(token, idx);
                }
                bow1[token] = 1 + (bow1[token] || 0);
            }
            if (!logCounts) return bow1;
            words = Object.keys(bow1);
            for (i = 0, imax = words.length; i < imax; i += 1) {
                // Add `1` to ensure non-zero count! (Note: log2(1) is 0)
                bow1[words[i]] = Math.log2(bow1[words[i]] + 1);
            }
            return bow1;
        }; // bow()

        module.exports = bow;
    }, {}], 54: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Syphonetizes Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var stringPhonetize = require('./string-phonetize.js');

        // ## tokens

        // ### phonetize
        /**
         *
         * Phonetizes input tokens using using an algorithmic adaptation of Metaphone.
         *
         * @name tokens.phonetize
         * @param {string[]} tokens — the input tokens.
         * @return {string[]} phonetized tokens.
         * @example
         * phonetize( [ 'he', 'acted', 'decisively', 'today' ] );
         * // -> [ 'h', 'aktd', 'dssvl', 'td' ]
         */
        var phonetize = function (tokens) {
            return tokens.map(stringPhonetize);
        }; // phonetize()

        module.exports = phonetize;
    }, { "./string-phonetize.js": 35 }], 55: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var rgx = require('./util_regexes.js');

        // ## string

        // ### propagateNegations
        /**
         *
         * It looks for negation tokens in the input array of tokens and propagates
         * negation to subsequent `upto` tokens by prefixing them by a `!`. It is useful
         * in handling text containing negations during tasks like similarity detection,
         * classification or search.
         *
         * @name tokens.propagateNegations
         * @param {string[]} tokens — the input tokens.
         * @param {number} [upto=2] — number of tokens to be negated after the negation
         * token. Note, tokens are only negated either `upto` tokens or up to the token
         * preceeding the **`, . ; : ! ?`** punctuations.
         * @return {string[]} tokens with negation propagated.
         * @example
         * propagateNegations( [ 'mary', 'is', 'not', 'feeling', 'good', 'today' ] );
         * // -> [ 'mary', 'is', 'not', '!feeling', '!good', 'today' ]
         */
        var propagateNegations = function (tokens, upto) {
            var i, imax, j, jmax;
            var tkns = tokens;
            var limit = upto || 2;
            for (i = 0, imax = tkns.length; i < imax; i += 1) {
                if (rgx.negations.test(tkns[i])) {
                    for (j = i + 1, jmax = Math.min(imax, i + limit + 1); j < jmax; j += 1) {
                        // Hit a punctuation mark, break out of the loop otherwise go *upto the limit*.
                        // > TODO: promote to utilities regex, after test cases have been added.
                        if (/[\,\.\;\:\!\?]/.test(tkns[j])) break;
                        // Propoage negation: invert the token by prefixing a `!` to it.
                        tkns[j] = '!' + tkns[j];
                    }
                    i = j;
                }
            }
            return tkns;
        }; // propagateNegations()

        module.exports = propagateNegations;
    }, { "./util_regexes.js": 60 }], 56: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Syphonetizes Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //

        var defaultStopWords = require('./dictionaries/stop_words.json');
        var words = require('./helper-return-words-filter.js');
        defaultStopWords = words(defaultStopWords);

        // ## tokens

        // ### removeWords
        /**
         *
         * Removes the stop words from the input array of tokens.
         *
         * @name tokens.removeWords
         * @param {string[]} tokens — the input tokens.
         * @param {wordsFilter} [stopWords=defaultStopWords] — default stop words are
         * loaded from `stop_words.json` located under the `src/dictionaries/` directory.
         * Custom stop words can be created using [helper.returnWordsFilter ](#helperreturnwordsfilter).
         * @return {string[]} balance tokens.
         * @example
         * removeWords( [ 'this', 'is', 'a', 'cat' ] );
         * // -> [ 'cat' ]
         */
        var removeWords = function (tokens, stopWords) {
            var givenStopWords = stopWords || defaultStopWords;
            return tokens.filter(givenStopWords.exclude);
        }; // removeWords()

        module.exports = removeWords;
    }, { "./dictionaries/stop_words.json": 20, "./helper-return-words-filter.js": 23 }], 57: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Syphonetizes Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var stringSoundex = require('./string-soundex.js');

        // ## tokens

        // ### soundex
        /**
         *
         * Generates the soundex coded tokens from the input tokens.
         *
         * @name tokens.soundex
         * @param {string[]} tokens — the input tokens.
         * @return {string[]} soundex coded tokens.
         * @example
         * soundex( [ 'he', 'acted', 'decisively', 'today' ] );
         * // -> [ 'H000', 'A233', 'D221', 'T300' ]
         */
        var soundex = function (tokens) {
            // Need to send `maxLength` as `undefined`.
            return tokens.map(t => stringSoundex(t));
        }; // soundex()

        module.exports = soundex;
    }, { "./string-soundex.js": 45 }], 58: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //

        // ## string

        // ### bow
        /**
         *
         * Generates the set of words from the input string. It also has an alias **`setOfWords()`**.
         *
         * @name tokens.setOfWords
         * @param {string[]} tokens — the input tokens.
         * @param {function} [ifn=undefined] — a function to build index; it is called for
         * every **member word of the set **; and it receives the word and the `idx`
         * as input arguments. The `build()` function of [helper.returnIndexer](#helperreturnindexer)
         * may be used as `ifn`. If `undefined` then index is not built.
         * @param {number} [idx=undefined] — the index; passed as the second argument to the `ifn`
         * function.
         * @return {set} of words from tokens.
         * @example
         * setOfWords( [ 'rain', 'rain', 'go', 'away' ] );
         * // -> Set { 'rain', 'go', 'away' }
         */
        var sow = function (tokens, ifn, idx) {
            var tset = new Set(tokens);
            if (typeof ifn === 'function') {
                tset.forEach(function (m) {
                    ifn(m, idx);
                });
            }
            return tset;
        }; // bow()

        module.exports = sow;
    }, {}], 59: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var porter2Stemmer = require('wink-porter2-stemmer');

        // ## tokens

        // ### stem
        /**
         *
         * Stems input tokens using Porter Stemming Algorithm Version 2.
         *
         * @name tokens.stem
         * @param {string[]} tokens — the input tokens.
         * @return {string[]} stemmed tokens.
         * @example
         * stem( [ 'he', 'acted', 'decisively', 'today' ] );
         * // -> [ 'he', 'act', 'decis', 'today' ]
         */
        var stem = function (tokens) {
            return tokens.map(porter2Stemmer);
        }; // stem()

        module.exports = stem;
    }, { "wink-porter2-stemmer": 62 }], 60: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var rgx = Object.create(null);

        // Matches standard english punctuations in a text.
        rgx.punctuations = /[\’\'\‘\’\`\“\”\"\[\]\(\)\{\}\…\,\.\!\;\?\/\-\:]/ig;
        // End Of Sentence Punctuations - useful for splitting text into sentences.
        rgx.eosPunctuations = /([\.\?\!])\s*(?=[a-z]|\s+\d)/gi;

        // Matches special characters: `* + % # @ ^ = ~ | \` in a text.
        rgx.splChars = /[\*\+\%\#\@\^\=\~\|\\]/ig;

        // Matches common english elisions including n't.
        // These are special ones as 's otherwise may be apostrophe!
        rgx.elisionsSpl = /(\b)(it|let|that|who|what|here|there|when|where|why|how)(\'s)\b/gi;
        // Single (1) character elisions.
        rgx.elisions1 = /([a-z])(\'d|\'m)\b/gi;
        // Two (2) character elisions.
        rgx.elisions2 = /([a-z])(\'ll|\'ve|\'re|n\'t)\b/gi;
        // Sperate not elision 'nt.
        rgx.notElision = /([a-z])(n\'t)\b/gi;
        // Specially handle cannot
        rgx.cannot = /\b(can)(not)\b/gi;

        // Matches space, tab, or new line characters in text.
        rgx.spaces = /\s+/ig;
        // Matches anything other than space, tab, or new line characters.
        rgx.notSpace = /\S/g;
        // Matches alpha and space characters in a text.
        rgx.alphaSpace = /[a-z\s]/ig;
        // Matches alphanumerals and space characters in a text.
        rgx.alphaNumericSpace = /[a-z0-9\s]/ig;
        // Matches non alpha characters in a text.
        rgx.notAlpha = /[^a-z]/ig;
        // Matches non alphanumerals in a text.
        rgx.notAlphaNumeric = /[^a-z0-9]/ig;
        // Matches one or more non-words characters.
        rgx.nonWords = /\W+/ig;
        // Matches complete negation token
        rgx.negations = /^(never|none|not|no)$/ig;

        // Matches run of capital words in a text.
        rgx.rocWords = /(?:\b[A-Z][A-Za-z]*\s*){2,}/g;

        // Matches integer, decimal, JS floating point numbers in a text.
        rgx.number = /[0-9]*\.[0-9]+e[\+\-]{1}[0-9]+|[0-9]*\.[0-9]+|[0-9]+/ig;

        // Matches time in 12 hour am/pm format in a text.
        rgx.timeIn12HrAMPM = /(?:[0-9]|0[0-9]|1[0-2])((:?:[0-5][0-9])){0,1}\s?(?:[aApP][mM])/ig;

        // Matches HTML tags - in fact any thing enclosed in angular brackets including
        // the brackets.
        rgx.htmlTags = /(?:<[^>]*>)/g;
        // Matches the HTML Esc Sequences
        // Esc Seq of type `&lt;` or `&nbsp;`
        rgx.htmlEscSeq1 = /(?:&[a-z]{2,6};)/gi;
        // Esc Seq of type `&#32;`
        rgx.htmlEscSeq2 = /(?:&#[0-9]{2,4};)/gi;

        // Tests if a given string is possibly in the Indian mobile telephone number format.
        rgx.mobileIndian = /^(0|\+91)?[789]\d{9}$/;
        // Tests if a given string is in the valid email format.
        rgx.email = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

        // Extracts any number and text from a <number><text> format text.
        // Useful in extracting value and UoM from strings like `2.7 Kgs`.
        rgx.separateNumAndText = /([0-9]*\.[0-9]+e[\+\-]{1}[0-9]+|[0-9]*\.[0-9]+|[0-9]+)[\s]*(.*)/i;

        // Crude date parser for a string containg date in a valid format.
        // > TODO: Need to improve this one!
        rgx.date = /(\d+)/ig;

        // Following 3 regexes are specially coded for `tokenize()` in prepare_text.
        // Matches punctuations that are not a part of a number.
        rgx.nonNumPunctuations = /[\.\,\-](?=\D)/gi;
        rgx.otherPunctuations = /[\’\'\‘\’\`\“\”\"\[\]\(\)\{\}\…\!\;\?\/\:]/ig;
        // > TODO: Add more currency symbols here.
        rgx.currency = /[\$\£\¥\€]/ig;

        //
        module.exports = rgx;
    }, {}], 61: [function (require, module, exports) {
        //     wink-nlp-utils
        //     NLP Functions for amplifying negations, managing elisions,
        //     creating ngrams, stems, phonetic codes to tokens and more.
        //
        //     Copyright (C) 2017-18  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-nlp-utils”.
        //
        //     “wink-nlp-utils” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-nlp-utils” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-nlp-utils”.
        //     If not, see <http://www.gnu.org/licenses/>.

        //
        var porter2Stemmer = require('wink-porter2-stemmer');

        // ### Prepare Name Space

        // Create prepare name space.
        var prepare = Object.create(null);

        // ### Prepare.Helper name space

        // Create prepare.helper name space.
        prepare.helper = Object.create(null);

        // Words
        prepare.helper.words = require('./helper-return-words-filter.js');
        // Make better **alias** name for the `word()` function.
        prepare.helper.returnWordsFilter = prepare.helper.words;
        // Index
        prepare.helper.index = require('./helper-return-indexer.js');
        // Make better **alias** name for the `index()` function.
        prepare.helper.returnIndexer = prepare.helper.index;

        // Return Quoted Text Extractor
        prepare.helper.returnQuotedTextExtractor = require('./helper-return-quoted-text-extractor.js');

        // ### Prepare.String Name Space

        // Create prepare.string name space.
        prepare.string = Object.create(null);

        // Lower Case
        prepare.string.lowerCase = require('./string-lower-case.js');
        // Upper Case
        prepare.string.upperCase = require('./string-upper-case.js');
        // Trim
        prepare.string.trim = require('./string-trim.js');
        // Remove Extra Spaces
        prepare.string.removeExtraSpaces = require('./string-remove-extra-spaces.js');
        // Retain Alpha-numerics
        prepare.string.retainAlphaNums = require('./string-retain-alpha-nums.js');
        // Extract Person's Name
        prepare.string.extractPersonsName = require('./string-extract-persons-name.js');
        // Extract Run of Capital Words
        prepare.string.extractRunOfCapitalWords = require('./string-extract-run-of-capital-words.js');
        // Remove Punctuations
        prepare.string.removePunctuations = require('./string-remove-punctuations.js');
        // Remove Special Chars
        prepare.string.removeSplChars = require('./string-remove-spl-chars.js');
        // Remove HTML Tags
        prepare.string.removeHTMLTags = require('./string-remove-html-tags.js');
        // Remove Elisions
        prepare.string.removeElisions = require('./string-remove-elisions.js');
        // Split Elisions
        prepare.string.splitElisions = require('./string-split-elisions.js');
        // Amplify Not Elision
        prepare.string.amplifyNotElision = require('./string-amplify-not-elision');
        // Marker
        prepare.string.marker = require('./string-marker.js');
        // SOC
        prepare.string.soc = require('./string-soc.js');
        prepare.string.setOfChars = require('./string-soc.js');
        // NGrams
        prepare.string.ngrams = require('./string-ngram.js');
        // Edge NGrams
        prepare.string.edgeNGrams = require('./string-edge-ngrams.js');
        // BONG
        prepare.string.bong = require('./string-bong.js');
        prepare.string.bagOfNGrams = require('./string-bong.js');
        // SONG
        prepare.string.song = require('./string-song.js');
        prepare.string.setOfNGrams = require('./string-song.js');
        // Sentences
        prepare.string.sentences = require('./string-sentences.js');
        // Compose Corpus
        prepare.string.composeCorpus = require('./string-compose-corpus.js');
        // Tokenize0
        prepare.string.tokenize0 = require('./string-tokenize0.js');
        // Tokenize
        prepare.string.tokenize = require('./string-tokenize.js');
        // #### Stem
        prepare.string.stem = porter2Stemmer;
        // Phonetize
        prepare.string.phonetize = require('./string-phonetize.js');
        // Soundex
        prepare.string.soundex = require('./string-soundex.js');

        // ### Prepare.Tokens Name Space

        // Create prepare.tokens name space.
        prepare.tokens = Object.create(null);

        // Stem
        prepare.tokens.stem = require('./tokens-stem.js');
        // Phonetize
        prepare.tokens.phonetize = require('./tokens-phonetize.js');
        // Soundex
        prepare.tokens.soundex = require('./tokens-soundex.js');
        // Remove Words
        prepare.tokens.removeWords = require('./tokens-remove-words.js');
        // BOW
        prepare.tokens.bow = require('./tokens-bow.js');
        prepare.tokens.bagOfWords = require('./tokens-bow.js');
        // SOW
        prepare.tokens.sow = require('./tokens-sow.js');
        prepare.tokens.setOfWords = require('./tokens-sow.js');
        // Propagate Negations
        prepare.tokens.propagateNegations = require('./tokens-propagate-negations.js');
        // Bigrams
        prepare.tokens.bigrams = require('./tokens-bigrams.js');
        // Append Bigrams
        prepare.tokens.appendBigrams = require('./tokens-append-bigrams.js');

        // Export prepare.
        module.exports = prepare;
    }, { "./helper-return-indexer.js": 21, "./helper-return-quoted-text-extractor.js": 22, "./helper-return-words-filter.js": 23, "./string-amplify-not-elision": 26, "./string-bong.js": 27, "./string-compose-corpus.js": 28, "./string-edge-ngrams.js": 29, "./string-extract-persons-name.js": 30, "./string-extract-run-of-capital-words.js": 31, "./string-lower-case.js": 32, "./string-marker.js": 33, "./string-ngram.js": 34, "./string-phonetize.js": 35, "./string-remove-elisions.js": 36, "./string-remove-extra-spaces.js": 37, "./string-remove-html-tags.js": 38, "./string-remove-punctuations.js": 39, "./string-remove-spl-chars.js": 40, "./string-retain-alpha-nums.js": 41, "./string-sentences.js": 42, "./string-soc.js": 43, "./string-song.js": 44, "./string-soundex.js": 45, "./string-split-elisions.js": 46, "./string-tokenize.js": 47, "./string-tokenize0.js": 48, "./string-trim.js": 49, "./string-upper-case.js": 50, "./tokens-append-bigrams.js": 51, "./tokens-bigrams.js": 52, "./tokens-bow.js": 53, "./tokens-phonetize.js": 54, "./tokens-propagate-negations.js": 55, "./tokens-remove-words.js": 56, "./tokens-soundex.js": 57, "./tokens-sow.js": 58, "./tokens-stem.js": 59, "wink-porter2-stemmer": 62 }], 62: [function (require, module, exports) {
        //     wink-porter2-stemmer
        //     Implementation of Porter Stemmer Algorithm V2 by Dr Martin F Porter
        //
        //     Copyright (C) 2017  GRAYPE Systems Private Limited
        //
        //     This file is part of “wink-porter2-stemmer”.
        //
        //     “wink-porter2-stemmer” is free software: you can redistribute it
        //     and/or modify it under the terms of the GNU Affero
        //     General Public License as published by the Free
        //     Software Foundation, version 3 of the License.
        //
        //     “wink-porter2-stemmer” is distributed in the hope that it will
        //     be useful, but WITHOUT ANY WARRANTY; without even
        //     the implied warranty of MERCHANTABILITY or FITNESS
        //     FOR A PARTICULAR PURPOSE.  See the GNU Affero General
        //     Public License for more details.
        //
        //     You should have received a copy of the GNU Affero
        //     General Public License along with “wink-porter2-stemmer”.
        //     If not, see <http://www.gnu.org/licenses/>.

        // Implements the Porter Stemmer Algorithm V2 by Dr Martin F Porter.
        // Reference: https://snowballstem.org/algorithms/english/stemmer.html

        // ## Regex Definitions

        // Regex definition of `double`.
        var rgxDouble = /(bb|dd|ff|gg|mm|nn|pp|rr|tt)$/;
        // Definition for Step Ia suffixes.
        var rgxSFXsses = /(.+)(sses)$/;
        var rgxSFXiedORies2 = /(.{2,})(ied|ies)$/;
        var rgxSFXiedORies1 = /(.{1})(ied|ies)$/;
        var rgxSFXusORss = /(.+)(us|ss)$/;
        var rgxSFXs = /(.+)(s)$/;
        // Definition for Step Ib suffixes.
        var rgxSFXeedlyOReed = /(.*)(eedly|eed)$/;
        var rgxSFXedORedlyORinglyORing = /([aeiouy].*)(ed|edly|ingly|ing)$/;
        var rgxSFXatORblORiz = /(at|bl|iz)$/;
        // Definition for Step Ic suffixes.
        var rgxSFXyOR3 = /(.+[^aeiouy])([y3])$/;
        // Definition for Step II suffixes; note we have spot the longest suffix.
        var rgxSFXstep2 = /(ization|ational|fulness|ousness|iveness|tional|biliti|lessli|entli|ation|alism|aliti|ousli|iviti|fulli|enci|anci|abli|izer|ator|alli|bli|ogi|li)$/;
        var rgxSFXstep2WithReplacements = [
        // Length 7.
        { rgx: /ational$/, replacement: 'ate' }, { rgx: /ization$/, replacement: 'ize' }, { rgx: /fulness$/, replacement: 'ful' }, { rgx: /ousness$/, replacement: 'ous' }, { rgx: /iveness$/, replacement: 'ive' },
        // Length 6.
        { rgx: /tional$/, replacement: 'tion' }, { rgx: /biliti$/, replacement: 'ble' }, { rgx: /lessli$/, replacement: 'less' },
        // Length 5.
        { rgx: /iviti$/, replacement: 'ive' }, { rgx: /ousli$/, replacement: 'ous' }, { rgx: /ation$/, replacement: 'ate' }, { rgx: /entli$/, replacement: 'ent' }, { rgx: /(.*)(alism|aliti)$/, replacement: '$1al' }, { rgx: /fulli$/, replacement: 'ful' },
        // Length 4.
        { rgx: /alli$/, replacement: 'al' }, { rgx: /ator$/, replacement: 'ate' }, { rgx: /izer$/, replacement: 'ize' }, { rgx: /enci$/, replacement: 'ence' }, { rgx: /anci$/, replacement: 'ance' }, { rgx: /abli$/, replacement: 'able' },
        // Length 3.
        { rgx: /bli$/, replacement: 'ble' }, { rgx: /(.*)(l)(ogi)$/, replacement: '$1$2og' },
        // Length 2.
        { rgx: /(.*)([cdeghkmnrt])(li)$/, replacement: '$1$2' }];
        // Definition for Step III suffixes; once again spot the longest one first!
        var rgxSFXstep3 = /(ational|tional|alize|icate|iciti|ative|ical|ness|ful)$/;
        var rgxSFXstep3WithReplacements = [{ rgx: /ational$/, replacement: 'ate' }, { rgx: /tional$/, replacement: 'tion' }, { rgx: /alize$/, replacement: 'al' }, { rgx: /(.*)(icate|iciti|ical)$/, replacement: '$1ic' }, { rgx: /(ness|ful)$/, replacement: '' }];
        // Definition for Step IV suffixes.
        var rgxSFXstep4 = /(ement|ance|ence|able|ible|ment|ant|ent|ism|ate|iti|ous|ive|ize|al|er|ic)$/;
        var rgxSFXstep4Full = /(ement|ance|ence|able|ible|ment|ant|ent|ism|ate|iti|ous|ive|ize|ion|al|er|ic)$/;
        var rgxSFXstep4ion = /(.*)(s|t)(ion)$/;
        // Exceptions Set I.
        var exceptions1 = {
            // Mapped!
            'skis': 'ski',
            'skies': 'sky',
            'dying': 'die',
            'lying': 'lie',
            'tying': 'tie',
            'idly': 'idl',
            'gently': 'gentl',
            'ugly': 'ugli',
            'early': 'earli',
            'only': 'onli',
            'singly': 'singl',
            // Invariants!
            'sky': 'sky',
            'news': 'news',
            'atlas': 'atlas',
            'cosmos': 'cosmos',
            'bias': 'bias',
            'andes': 'andes'
        };
        // Exceptions Set II.
        // Note, these are to be treated as full words.
        var rgxException2 = /^(inning|outing|canning|herring|proceed|exceed|succeed|earring)$/;

        // ## Private functions

        // ### prelude
        /**
         * Performs initial pre-processing by transforming the input string `s` as
         * per the replacements.
         *
         * @param {String} s Input string
         * @return {String} Processed string
         * @private
         */
        var prelude = function (s) {
            return s
            // Handle `y`'s.
            .replace(/^y/, '3').replace(/([aeiou])y/, '$13')
            // Handle apostrophe.
            .replace(/\’s$|\'s$/, '').replace(/s\’$|s\'$/, '').replace(/[\’\']$/, '');
        }; // prelude()

        // ### isShort
        /**
         * @param {String} s Input string
         * @return {Boolean} `true` if `s` is a short syllable, `false` otherwise
         * @private
         */
        var isShort = function (s) {
            // (a) a vowel followed by a non-vowel other than w, x or 3 and
            // preceded by a non-vowel, **or** (b) a vowel at the beginning of the word
            // followed by a non-vowel.
            return (/[^aeiouy][aeiouy][^aeiouywx3]$/.test(s) || /^[aeiouy][^aeiouy]{0,1}$/.test(s) // Removed this new changed??

            );
        }; // isShort()

        // ### markRegions
        /**
         * @param {String} s Input string
         * @return {Object} the `R1` and `R2` regions as an object from the input string `s`.
         * @private
         */
        var markRegions = function (s) {
            // Matches of `R1` and `R2`.
            var m1, m2;
            // To detect regions i.e. `R1` and `R2`.
            var rgxRegions = /[aeiouy]+([^aeiouy]{1}.+)/;
            m1 = rgxRegions.exec(s);
            if (!m1) return { r1: '', r2: '' };
            m1 = m1[1].slice(1);
            // Handle exceptions here to prevent over stemming.
            m1 = /^(gener|commun|arsen)/.test(s) ? s.replace(/^(gener|commun|arsen)(.*)/, '$2') : m1;
            m2 = rgxRegions.exec(m1);
            if (!m2) return { r1: m1, r2: '' };
            m2 = m2[1].slice(1);
            return { r1: m1, r2: m2 };
        }; // markRegions()

        // ### step1a
        /**
         * @param {String} s Input string
         * @return {String} Processed string
         * @private
         */
        var step1a = function (s) {
            var wordPart;
            if (rgxSFXsses.test(s)) return s.replace(rgxSFXsses, '$1ss');
            if (rgxSFXiedORies2.test(s)) return s.replace(rgxSFXiedORies2, '$1i');
            if (rgxSFXiedORies1.test(s)) return s.replace(rgxSFXiedORies1, '$1ie');
            if (rgxSFXusORss.test(s)) return s;
            wordPart = s.replace(rgxSFXs, '$1');
            if (/[aeiuouy](.+)$/.test(wordPart)) return s.replace(rgxSFXs, '$1');
            return s;
        }; // step1a()

        // ### step1b
        /**
         * @param {String} s Input string
         * @return {String} Processed string
         * @private
         */
        var step1b = function (s) {
            var rgn = markRegions(s),
                sd;
            // Search for the longest among the `eedly|eed` suffixes.
            if (rgxSFXeedlyOReed.test(s))
                // Replace by ee if in R1.
                return rgxSFXeedlyOReed.test(rgn.r1) ? s.replace(rgxSFXeedlyOReed, '$1ee') : s;
            // Delete `ed|edly|ingly|ing` if the preceding word part contains a vowel.
            if (rgxSFXedORedlyORinglyORing.test(s)) {
                sd = s.replace(rgxSFXedORedlyORinglyORing, '$1');
                rgn = markRegions(sd);
                // And after deletion, return either
                return rgxSFXatORblORiz.test(sd) ? sd + 'e' :
                // or
                rgxDouble.test(sd) ? sd.replace(/.$/, '') :
                // or
                isShort(sd) && rgn.r1 === '' ? sd + 'e' :
                // or
                sd;
            }
            return s;
        }; // step1b()

        // ### step1c
        /**
         * @param {String} s Input string
         * @return {String} Processed string
         * @private
         */
        var step1c = function (s) {
            return s.replace(rgxSFXyOR3, '$1i');
        }; // step1c()

        // ### step2
        /**
         * @param {String} s Input string
         * @return {String} Processed string
         * @private
         */
        var step2 = function (s) {
            var i,
                imax,
                rgn = markRegions(s),
                us; // updated s.
            var match = s.match(rgxSFXstep2);
            match = match === null ? '$$$$$' : match[1];
            if (rgn.r1.indexOf(match) !== -1) {
                for (i = 0, imax = rgxSFXstep2WithReplacements.length; i < imax; i += 1) {
                    us = s.replace(rgxSFXstep2WithReplacements[i].rgx, rgxSFXstep2WithReplacements[i].replacement);
                    if (s !== us) return us;
                }
            }
            return s;
        }; // step2()

        // ### step3
        /**
         * @param {String} s Input string
         * @return {String} Processed string
         * @private
         */
        var step3 = function (s) {
            var i,
                imax,
                rgn = markRegions(s),
                us; // updated s.
            var match = s.match(rgxSFXstep3);
            match = match === null ? '$$$$$' : match[1];

            if (rgn.r1.indexOf(match) !== -1) {
                for (i = 0, imax = rgxSFXstep3WithReplacements.length; i < imax; i += 1) {
                    us = s.replace(rgxSFXstep3WithReplacements[i].rgx, rgxSFXstep3WithReplacements[i].replacement);
                    if (s !== us) return us;
                }
                if (/ative/.test(rgn.r2)) return s.replace(/ative$/, '');
            }
            return s;
        }; // step3()

        // ### step4
        /**
         * @param {String} s Input string
         * @return {String} Processed string
         * @private
         */
        var step4 = function (s) {
            var rgn = markRegions(s);
            var match = s.match(rgxSFXstep4Full);
            match = match === null ? '$$$$$' : match[1];
            if (rgxSFXstep4Full.test(s) && rgn.r2.indexOf(match) !== -1) {
                return rgxSFXstep4.test(s) ? s.replace(rgxSFXstep4, '') : rgxSFXstep4ion.test(s) ? s.replace(rgxSFXstep4ion, '$1$2') : s;
            }
            return s;
        }; // step4()

        // ### step5
        /**
         * @param {String} s Input string
         * @return {String} Processed string
         * @private
         */
        var step5 = function (s) {
            var preceding, rgn;
            // Search for the `e` suffixes.
            rgn = markRegions(s);
            if (/e$/i.test(s)) {
                preceding = s.replace(/e$/, '');
                return (
                    // Found: delete if in R2, or in R1 and not preceded by a short syllable
                    /e/.test(rgn.r2) || /e/.test(rgn.r1) && !isShort(preceding) ? preceding : s
                );
            }
            // Search for the `l` suffixes.
            if (/l$/.test(s)) {
                rgn = markRegions(s);
                // Found: delete if in R2
                return rgn.r2 && /l$/.test(rgn.r2) ? s.replace(/ll$/, 'l') : s;
            }
            // If nothing happens, must return the string!
            return s;
        }; // step5()

        // ## Public functions
        // ### stem
        /**
         *
         * Stems an inflected `word` using Porter2 stemming algorithm.
         *
         * @param {string} word — word to be stemmed.
         * @return {string} — the stemmed word.
         *
         * @example
         * stem( 'consisting' );
         * // -> consist
         */
        var stem = function (word) {
            var str = word.toLowerCase();
            if (str.length < 3) return str;
            if (exceptions1[str]) return exceptions1[str];
            str = prelude(str);
            str = step1a(str);

            if (!rgxException2.test(str)) {
                str = step1b(str);
                str = step1c(str);
                str = step2(str);
                str = step3(str);
                str = step4(str);
                str = step5(str);
            }

            str = str.replace(/3/g, 'y');
            return str;
        }; // stem()

        // Export stem function.
        module.exports = stem;
    }, {}] }, {}, [2]);